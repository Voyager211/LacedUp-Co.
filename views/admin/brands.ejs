<!-- <h1 class="page-title"><%= title %></h1> -->

<div class="brand-management container">
  <h2 class="mb-4 fw-bold">All Brands</h2>

  <!-- Search and Add -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <form id="search-form" class="position-relative d-flex" style="max-width: 300px;">
      <div class="input-group">
        <input 
          type="text" 
          id="search-input"
          class="form-control pe-5" 
          placeholder="Search Brands..." 
          oninput="toggleClearButton()"
        >
        <button type="button" id="clear-x" onclick="clearSearch()" class="btn btn-sm position-absolute top-50 end-0 translate-middle-y me-5" style="z-index: 5; display: none;">
          <i class="bi bi-x-lg"></i>
        </button>
        <button class="btn btn-outline-secondary" type="submit">
          <i class="bi bi-search"></i>
        </button>
      </div>
    </form>

    <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addBrandModal">
      + Add New Brand
    </button>
  </div>

  <!-- Add Brand Modal -->
  <div class="modal fade" id="addBrandModal" tabindex="-1" aria-labelledby="addBrandModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="add-brand-form" novalidate>
          <div class="modal-header">
            <h5 class="modal-title" id="addBrandModalLabel">Add New Brand</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="name" class="form-label">Brand Name *</label>
              <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
              <label for="description" class="form-label">Description (Optional)</label>
              <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>
            <div class="mb-3">
              <label for="brandOffer" class="form-label">Brand Offer (%)</label>
              <input type="number" class="form-control" id="brandOffer" name="brandOffer" min="0" max="100" step="1" value="0">
              <div class="form-text">Enter percentage discount for all products of this brand (0-100)</div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-dark">Add Brand</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Table -->
  <div class="table-responsive">
    <table class="table table-bordered align-middle">
      <thead class="table-light">
        <tr>
          <th>#</th>
          <th>Brand Name</th>
          <th>Description</th>
          <th>Status</th>
          <th>Created Date</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="brand-table-body"></tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div id="pagination-wrapper">
    <%- include('partials/pagination', { currentPage, totalPages }) %>
  </div>

  <!-- Edit Modal Template (Dynamic Injection) -->
  <div id="edit-modals-container"></div>

</div>

<script src="/js/validation.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('search-input');
  const paginationContainer = document.querySelector('.pagination');
  const tableBody = document.querySelector('tbody');
  const editModalContainer = document.getElementById('edit-modals-container');

  async function fetchBrands(query = '', page = 1) {
    const res = await fetch(`/admin/brands/api?q=${encodeURIComponent(query)}&page=${page}`);
    const data = await res.json();

    const rows = data.brands.map((brand, index) => `
      <tr>
        <td>${index + 1 + ((data.currentPage - 1) * 10)}</td>
        <td class="fw-semibold">${brand.name}</td>
        <td>${brand.description || 'â€”'}</td>
        <td>
          <div class="form-check form-switch d-flex justify-content-center">
            <input class="form-check-input toggle-status" type="checkbox"
              data-id="${brand._id}" ${brand.isActive ? 'checked' : ''}>
          </div>
        </td>
        <td>${new Date(brand.createdAt).toISOString().split('T')[0]}</td>
        <td>
          <button class="btn btn-sm btn-edit me-1" data-id="${brand._id}" data-bs-toggle="modal" data-bs-target="#editBrandModal${brand._id}">
            <i class="bi bi-pencil-square me-1"></i> Edit
          </button>
          <button class="btn btn-sm btn-delete" data-id="${brand._id}">
            <i class="bi bi-trash me-1"></i> Delete
          </button>
        </td>
      </tr>
    `).join('');

    tableBody.innerHTML = rows;

    // Inject edit modals
    const modals = data.brands.map(brand => `
      <div class="modal fade" id="editBrandModal${brand._id}" tabindex="-1" aria-labelledby="editBrandModalLabel${brand._id}" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <form class="edit-brand-form" data-id="${brand._id}" novalidate>
              <div class="modal-header">
                <h5 class="modal-title" id="editBrandModalLabel${brand._id}">Edit Brand</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <div class="mb-3">
                  <label class="form-label">Brand Name *</label>
                  <input type="text" class="form-control" name="name" value="${brand.name}" required>
                </div>
                <div class="mb-3">
                  <label class="form-label">Description</label>
                  <textarea class="form-control" name="description" rows="3">${brand.description || ''}</textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Brand Offer (%)</label>
                  <input type="number" class="form-control" name="brandOffer" min="0" max="100" step="1" value="${brand.brandOffer || 0}">
                  <div class="form-text">Enter percentage discount for all products of this brand (0-100)</div>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-dark">Save Changes</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    `).join('');

    editModalContainer.innerHTML = modals;

    // Initialize validation for all edit forms
    data.brands.forEach(brand => {
      setTimeout(() => {
        const editForm = document.querySelector(`form[data-id="${brand._id}"]`);
        // Set up form handler for brand edit

        if (editForm) {
          // Remove any existing event listeners
          const newForm = editForm.cloneNode(true);
          editForm.parentNode.replaceChild(newForm, editForm);

          // Set up direct form submission handler (bypass FormValidator)
          newForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Get form fields
            const nameField = newForm.querySelector('input[name="name"]');
            const descriptionField = newForm.querySelector('textarea[name="description"]');
            const brandOfferField = newForm.querySelector('input[name="brandOffer"]');

            if (!nameField || !descriptionField || !brandOfferField) {
              Swal.fire('Error', 'Form fields not found. Please try again.', 'error');
              return;
            }

            // Basic validation
            if (!nameField.value.trim()) {
              Swal.fire('Error', 'Brand name is required.', 'error');
              return;
            }

            const formData = {
              name: nameField.value.trim(),
              description: descriptionField.value.trim(),
              brandOffer: parseFloat(brandOfferField.value) || 0
            };

            try {
              const res = await fetch(`/admin/brands/api/${brand._id}`, {
                method: 'PATCH',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
              });

              if (res.ok) {
                const responseData = await res.json();

                // Close modal
                document.getElementById(`editBrandModal${brand._id}`).querySelector('.btn-close').click();

                // Refresh brands list
                await fetchBrands(searchInput.value);

                // Show success message
                Swal.fire('Updated!', 'Brand updated successfully.', 'success');
              } else {
                try {
                  const errorData = await res.json();
                  Swal.fire('Error', errorData.message || 'Update failed.', 'error');
                } catch (parseError) {
                  Swal.fire('Error', `Update failed with status ${res.status}`, 'error');
                }
              }
            } catch (err) {
              console.error('Brand update error:', err);
              Swal.fire('Error', 'Could not update brand.', 'error');
            }
          });


        }
      }, 100);
    });

    // Render enhanced pagination
    const paginationWrapper = document.getElementById('pagination-wrapper');
    if (!paginationWrapper) return;

    if (data.totalPages <= 1) {
      paginationWrapper.innerHTML = '';
      return;
    }

    let paginationHTML = `
      <nav class="mt-4">
        <ul class="pagination justify-content-center" id="pagination-container">
          <!-- Previous Button -->
          <li class="page-item ${data.currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link pagination-btn ${data.currentPage === 1 ? 'disabled-btn' : ''}"
               href="#"
               data-page="${data.currentPage - 1}"
               ${data.currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : ''}>
              <i class="bi bi-chevron-left"></i> Previous
            </a>
          </li>

          <!-- Page Numbers -->
    `;

    for (let i = 1; i <= data.totalPages; i++) {
      paginationHTML += `
        <li class="page-item ${i === data.currentPage ? 'active' : ''}">
          <a class="page-link pagination-btn" href="#" data-page="${i}">${i}</a>
        </li>
      `;
    }

    paginationHTML += `
          <!-- Next Button -->
          <li class="page-item ${data.currentPage === data.totalPages ? 'disabled' : ''}">
            <a class="page-link pagination-btn ${data.currentPage === data.totalPages ? 'disabled-btn' : ''}"
               href="#"
               data-page="${data.currentPage + 1}"
               ${data.currentPage === data.totalPages ? 'tabindex="-1" aria-disabled="true"' : ''}>
              Next <i class="bi bi-chevron-right"></i>
            </a>
          </li>
        </ul>
      </nav>

      <!-- Enhanced Pagination Styles -->
      <style>
        .pagination {
          margin-bottom: 0;
        }

        .pagination .page-item.active .page-link {
          background-color: #1a1a1a;
          border-color: #1a1a1a;
          color: white;
          font-weight: 600;
        }

        .pagination .page-link {
          color: #333;
          border: 1px solid #dee2e6;
          border-radius: 6px;
          margin: 0 2px;
          padding: 8px 12px;
          font-weight: 500;
          transition: all 0.3s ease;
          text-decoration: none;
        }

        /* Red hover effect for enabled buttons */
        .pagination .page-link:not(.disabled-btn):hover {
          background-color: #e03a2f;
          border-color: #e03a2f;
          color: white;
          transform: translateY(-1px);
          box-shadow: 0 2px 4px rgba(224, 58, 47, 0.2);
        }

        /* Disabled button styles */
        .pagination .page-item.disabled .page-link,
        .pagination .page-link.disabled-btn {
          color: #6c757d;
          background-color: #f8f9fa;
          border-color: #dee2e6;
          cursor: not-allowed;
          opacity: 0.6;
          pointer-events: none;
        }

        /* Active page styling */
        .pagination .page-item.active .page-link:hover {
          background-color: #1a1a1a;
          border-color: #1a1a1a;
          color: white;
          transform: none;
          box-shadow: none;
        }

        /* Icon spacing */
        .pagination .page-link i {
          font-size: 0.9em;
        }
      </style>
    `;

    paginationWrapper.innerHTML = paginationHTML;
  }

  fetchBrands(searchInput.value);

  // Initialize validation for add brand form
  const addBrandValidator = new FormValidator('add-brand-form');

  document.getElementById('search-form').addEventListener('submit', (e) => {
    e.preventDefault();
    fetchBrands(searchInput.value);
  });

  // Enhanced pagination click handler
  document.addEventListener('click', (e) => {
    const target = e.target.closest('.page-link');
    if (!target || !target.dataset.page || target.classList.contains('disabled-btn')) return;

    e.preventDefault();
    const page = parseInt(target.dataset.page);

    // Validate page number
    if (isNaN(page) || page < 1) return;

    fetchBrands(searchInput.value, page);
  });

  // Set up global pagination callback for reusable component
  window.paginationCallback = function(page) {
    fetchBrands(searchInput.value, page);
  };

  // Override add brand form submission with validation
  addBrandValidator.submitForm = async function() {
    const formData = {
      name: document.getElementById('name').value.trim(),
      description: document.getElementById('description').value.trim(),
      brandOffer: parseFloat(document.getElementById('brandOffer').value) || 0,
    };

    try {
      const res = await fetch('/admin/brands/api', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      if (res.ok) {
        document.getElementById('addBrandModal').querySelector('.btn-close').click();
        await fetchBrands(searchInput.value);
        Swal.fire('Added!', 'Brand has been added.', 'success');
        // Clear form
        document.getElementById('add-brand-form').reset();
        addBrandValidator.clearAllErrors();
      } else {
        const errorData = await res.json();
        Swal.fire('Error', errorData.message || 'Could not add brand.', 'error');
      }
    } catch (err) {
      console.error(err);
      Swal.fire('Error', 'Could not add brand.', 'error');
    }
  };

  // Edit form submission is now handled by individual validators

  tableBody.addEventListener('click', async (e) => {
    if (e.target.closest('.btn-delete')) {
      const id = e.target.closest('.btn-delete').dataset.id;

      const confirmed = await Swal.fire({
        title: 'Delete this brand?',
        text: 'This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        confirmButtonText: 'Yes, delete'
      });

      if (confirmed.isConfirmed) {
        const res = await fetch(`/admin/brands/api/${id}/soft-delete`, {
          method: 'PATCH'
        });
        if (res.ok) {
          await fetchBrands(searchInput.value);
          Swal.fire('Deleted!', 'Brand removed.', 'success');
        }
      }
    }
  });

  tableBody.addEventListener('change', async (e) => {
    if (e.target.classList.contains('toggle-status')) {
      const id = e.target.dataset.id;

      const confirmed = await Swal.fire({
        title: 'Toggle brand status?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'Cancel'
      });

      if (confirmed.isConfirmed) {
        const res = await fetch(`/admin/brands/api/${id}/toggle`, { method: 'PATCH' });
        if (!res.ok) {
          Swal.fire('Error', 'Could not update status.', 'error');
        }
      } else {
        e.target.checked = !e.target.checked;
      }
    }
  });

  window.clearSearch = () => {
    const input = document.getElementById('search-input');
    input.value = '';
    document.getElementById('clear-x').style.display = 'none';
    input.form.dispatchEvent(new Event('submit'));
  };

  window.toggleClearButton = () => {
    const input = document.getElementById('search-input');
    const clearBtn = document.getElementById('clear-x');
    clearBtn.style.display = input.value.length > 0 ? 'block' : 'none';
  };

  toggleClearButton();
});
</script>