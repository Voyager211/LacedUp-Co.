

<div class="container vh-100 d-flex align-items-center justify-content-center bg-light">
  <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%;">
    <div class="text-center mb-4">
      <img src="/images/logo-black.png" alt="LacedUp Co." class="img-fluid" style="max-width: 180px;">
      <h5 class="mt-3 fw-bold text-dark">Admin Panel Login</h5>
    </div>

    <% if (message && message.length > 0) { %>
      <div class="alert alert-danger text-center py-2" role="alert">
        <%= message %>
      </div>
    <% } %>

    <form id="admin-login-form" method="POST" action="/admin/login" novalidate>
      <div class="mb-3">
        <label for="email" class="form-label">Email address *</label>
        <input type="email" class="form-control" id="email" name="email" value="<%= formData.email || '' %>" required>
      </div>

      <div class="mb-3">
        <label for="password" class="form-label">Password *</label>
        <div class="position-relative">
          <input type="password" class="form-control pe-5" id="password" name="password" required>
          <div class="password-toggle-btn" id="admin-password-toggle" aria-label="Toggle password visibility">
            <i class="bi bi-eye-slash" id="admin-password-toggle-icon"></i>
          </div>
        </div>
      </div>

      <div class="form-check mb-3">
        <input type="checkbox" class="form-check-input" id="remember" name="remember" <%= formData.remember ? 'checked' : '' %>>
        <label class="form-check-label" for="remember">Remember me</label>
      </div>

      <button type="submit" class="btn btn-dark w-100">Login</button>
    </form>
  </div>
</div>

<style>
  /* Fix visual interference between password visibility toggle and HTML5 validation icons */
  input.form-control.is-invalid {
    background-image: none !important;
  }

  /* Enhanced password visibility toggle with transparent container */
  .password-toggle-btn {
    position: absolute !important;
    top: 50% !important;
    right: 8px !important;
    transform: translateY(-50%) !important;
    border: none !important;
    background: transparent !important;
    padding: 4px !important;
    color: #6c757d !important;
    z-index: 999 !important;
    width: 28px !important;
    height: 28px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
    border-radius: 4px !important;
    transition: all 0.3s ease !important;
  }

  .password-toggle-btn:hover {
    background: rgba(220, 53, 69, 0.1) !important;
    color: #dc3545 !important;
  }

  .password-toggle-btn:focus {
    outline: none !important;
    box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.2) !important;
    background: rgba(220, 53, 69, 0.05) !important;
  }

  .password-toggle-btn:active {
    background: rgba(220, 53, 69, 0.15) !important;
    transform: translateY(-50%) scale(0.95) !important;
  }

  /* Ensure parent container has proper positioning context */
  .position-relative {
    position: relative !important;
  }
</style>

<script src="/js/validation.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Password visibility toggle functionality
    const passwordToggle = document.getElementById('admin-password-toggle');
    const passwordInput = document.getElementById('password');
    const passwordToggleIcon = document.getElementById('admin-password-toggle-icon');

    if (passwordToggle && passwordInput && passwordToggleIcon) {
      passwordToggle.addEventListener('click', function() {
        const isPassword = passwordInput.type === 'password';

        // Toggle input type
        passwordInput.type = isPassword ? 'text' : 'password';

        // Toggle icon
        if (isPassword) {
          passwordToggleIcon.classList.remove('bi-eye-slash');
          passwordToggleIcon.classList.add('bi-eye');
          passwordToggle.setAttribute('aria-label', 'Hide password');
        } else {
          passwordToggleIcon.classList.remove('bi-eye');
          passwordToggleIcon.classList.add('bi-eye-slash');
          passwordToggle.setAttribute('aria-label', 'Show password');
        }
      });

      // Add hover effect
      passwordToggle.addEventListener('mouseenter', function() {
        this.style.color = '#dc3545';
      });

      passwordToggle.addEventListener('mouseleave', function() {
        this.style.color = '#6c757d';
      });
    }

    // Initialize form validation with admin-specific validation
    const validator = new FormValidator('admin-login-form');

    // Override the form submission to handle admin-specific validation
    validator.submitForm = async function() {
      const email = document.getElementById('email').value.trim();
      const password = document.getElementById('password').value.trim();

      // Apply the same validation logic as user-side login
      const emailValidation = validateAdminEmail(email);
      const passwordValidation = validateAdminPassword(password);

      let hasErrors = false;

      // Clear previous errors
      clearFieldError(document.getElementById('email'));
      clearFieldError(document.getElementById('password'));

      // Show email validation errors
      if (!emailValidation.isValid) {
        showFieldError(document.getElementById('email'), emailValidation.message);
        hasErrors = true;
      }

      // Show password validation errors
      if (!passwordValidation.isValid) {
        showFieldError(document.getElementById('password'), passwordValidation.message);
        hasErrors = true;
      }

      // If validation passes, submit the form normally
      if (!hasErrors) {
        // Submit the form using traditional form submission
        document.getElementById('admin-login-form').submit();
      }
    };

    // Admin email validation using same regex as user-side
    function validateAdminEmail(value) {
      if (!value || !value.trim()) {
        return { isValid: false, message: 'Email is required' };
      }

      // Must contain @, at least one dot after @, and end with valid domain
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      const domainRegex = /\.(com|org|net|edu|gov|mil|int|co|in|uk|de|fr|jp|au|ca)$/i;

      if (!emailRegex.test(value)) {
        return { isValid: false, message: 'Please enter a valid email address' };
      }

      if (!domainRegex.test(value)) {
        return { isValid: false, message: 'Email must end with a valid domain (com, org, net, etc.)' };
      }

      return { isValid: true };
    }

    // Admin password validation using same logic as user-side
    function validateAdminPassword(value) {
      if (!value || !value.trim()) {
        return { isValid: false, message: 'Password is required' };
      }

      if (value.length < 6) {
        return { isValid: false, message: 'Password must be at least 6 characters long' };
      }

      return { isValid: true };
    }

    // Field error display functions
    function showFieldError(input, message) {
      clearFieldError(input);

      const errorDiv = document.createElement('div');
      errorDiv.className = 'text-danger small validation-error field-error mt-1';
      errorDiv.textContent = message;

      // Insert error message after the input field or its parent container
      const insertAfter = input.parentNode.classList.contains('position-relative') ?
                         input.parentNode : input;
      insertAfter.parentNode.insertBefore(errorDiv, insertAfter.nextSibling);

      // Add error styling to input
      input.classList.add('is-invalid');
    }

    function clearFieldError(input) {
      // Remove error styling
      input.classList.remove('is-invalid');

      // Remove error message
      const parentContainer = input.parentNode.classList.contains('position-relative') ?
                             input.parentNode.parentNode : input.parentNode;
      const errorDiv = parentContainer.querySelector('.field-error');
      if (errorDiv) {
        errorDiv.remove();
      }
    }
  });
</script>
