<!-- <h1><%= title %></h1> -->

<div class="container my-4">

  <form id="edit-product-form" novalidate>
    <!-- Basic Info -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-info-circle me-2"></i>Basic Information</h5>
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label">Product Name *</label>
          <input type="text" name="productName" class="form-control" value="<%= product.productName %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Brand *</label>
          <input type="text" name="brand" class="form-control" value="<%= product.brand %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Category *</label>
          <select name="category" class="form-select" required>
            <% categories.forEach(cat => { %>
              <option value="<%= cat._id %>" <%= product.category._id.toString() === cat._id.toString() ? 'selected' : '' %>><%= cat.name %></option>
            <% }) %>
          </select>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Stock Quantity *</label>
          <input type="number" name="stock" class="form-control" value="<%= product.stock %>" required>
        </div>
      </div>
    </div>

    <!-- Pricing -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-cash-coin me-2"></i>Pricing & Offers</h5>
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label">Regular Price *</label>
          <input type="number" name="regularPrice" class="form-control" value="<%= product.regularPrice %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Sale Price *</label>
          <input type="number" name="salePrice" class="form-control" value="<%= product.salePrice %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Product Offer (%)</label>
          <input type="number" name="productOffer" class="form-control" value="<%= product.productOffer %>">
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Features *</label>
          <input type="text" name="features" class="form-control" value="<%= product.features %>" required>
        </div>
      </div>
    </div>

    <!-- Description -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-card-text me-2"></i>Product Details</h5>
      <div class="mb-3">
        <label class="form-label">Description *</label>
        <textarea name="description" class="form-control" rows="4" required><%= product.description %></textarea>
      </div>
    </div>

    <!-- Images -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-images me-2"></i>Product Images <small class="text-muted">(Minimum 3 required)</small></h5>
      <div class="alert alert-info small" role="alert">
        <ul class="mb-0 ps-3">
          <li>‚≠ê Click the star icon to set a main image (currently handled by upload order)</li>
          <li>üì• Upload at least <strong>3 images</strong></li>
          <li>üìê Images will be <strong>cropped & resized</strong> automatically</li>
        </ul>
      </div>
      <div class="mb-3">
        <label class="form-label">Upload Images (Min: 3)</label>
        <input type="file" id="image-input" accept="image/*" multiple class="form-control">
        <input type="hidden" name="mainImageIndex" id="mainImageIndex">
        <div id="image-preview-container" class="d-flex flex-wrap gap-3 mt-3"></div>
      </div>
    </div>

    <!-- Submit -->
    <div class="d-flex justify-content-end gap-2">
      <a href="/admin/products" class="btn btn-outline-secondary">Cancel</a>
      <button type="submit" class="btn btn-dark">
        <i class="bi bi-save me-1"></i> Save Changes
      </button>
    </div>
  </form>
</div>

<style>
  .image-wrapper {
    position: relative;
    border: 3px solid transparent;
    padding: 8px;
    border-radius: 12px;
    transition: all 0.3s ease;
    background: linear-gradient(white, white) padding-box,
                linear-gradient(135deg, #e9ecef, #dee2e6) border-box;
    width: 120px;
    height: 120px;
  }

  .image-wrapper.main {
    border-color: transparent;
    background: linear-gradient(white, white) padding-box,
                linear-gradient(135deg, #198754, #20c997) border-box;
    box-shadow: 0 8px 25px rgba(25, 135, 84, 0.3);
  }

  .image-wrapper:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .add-slot {
    width: 100%;
    height: 100%;
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .add-slot:hover {
    border-color: #6c757d;
    background-color: #f8f9fa;
  }

  /* üßº Enhanced Close (X) Button */
  .btn-remove {
    position: absolute;
    top: 8px;
    right: 8px;
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #dc3545, #bb2d3b);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 18px;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.4);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10;
  }

  .btn-remove:hover {
    background: linear-gradient(135deg, #bb2d3b, #a02834);
    transform: scale(1.1) rotate(90deg);
    box-shadow: 0 6px 20px rgba(220, 53, 69, 0.6);
  }

  .btn-remove:active {
    transform: scale(0.95) rotate(90deg);
  }

  /* ‚≠ê Enhanced Star Button */
  .btn-main {
    position: absolute;
    bottom: 8px;
    right: 8px;
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #fd7e14, #e8690b);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 18px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(253, 126, 20, 0.4);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10;
  }

  .btn-main.active {
    background: linear-gradient(135deg, #198754, #146c43);
    box-shadow: 0 6px 20px rgba(25, 135, 84, 0.6);
    transform: scale(1.1);
  }

  .btn-main:hover {
    transform: scale(1.15) rotate(18deg);
    box-shadow: 0 6px 20px rgba(253, 126, 20, 0.6);
  }

  .btn-main.active:hover {
    transform: scale(1.15) rotate(18deg);
    box-shadow: 0 8px 25px rgba(25, 135, 84, 0.7);
  }

  .btn-main:active {
    transform: scale(0.95);
  }

  /* üîÑ Crop Button */
  .btn-crop {
    position: absolute;
    bottom: 8px;
    left: 8px;
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #6f42c1, #5a2d91);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 16px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(111, 66, 193, 0.4);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10;
  }

  .btn-crop:hover {
    background: linear-gradient(135deg, #5a2d91, #4c2577);
    transform: scale(1.1) rotate(-15deg);
    box-shadow: 0 6px 20px rgba(111, 66, 193, 0.6);
  }

  .btn-crop:active {
    transform: scale(0.95);
  }

  /* ========= OPTIMIZED CROPPER MODAL ========= */
  .cropper-modal-custom {
    max-width: 1200px;
    width: 95vw;
  }

  .cropper-modal-content {
    height: 700px;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
  }

  .cropper-modal-content .modal-header {
    flex-shrink: 0;
    height: 60px;
    display: flex;
    align-items: center;
  }

  .cropper-modal-content .modal-footer {
    flex-shrink: 0;
    height: 70px;
    display: flex;
    align-items: center;
  }

  .cropper-modal-content .modal-body {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 0;
  }

  .cropper-image-container {
    width: 1000px;
    height: 550px;
    max-width: 85%;
    max-height: 100%;
    position: relative;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cropper-image-container img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    display: block;
  }

  /* Enhanced cropper elements for better visibility */
  .cropper-container {
    width: 100% !important;
    height: 100% !important;
  }

  .cropper-canvas {
    max-width: 100% !important;
    max-height: 100% !important;
  }

  .cropper-drag-box,
  .cropper-crop-box {
    border-radius: 4px;
  }

  .cropper-view-box {
    outline: 2px solid rgba(224, 58, 47, 0.8);
    outline-color: rgba(224, 58, 47, 0.8);
  }

  .cropper-point {
    width: 10px !important;
    height: 10px !important;
    background-color: #E03A2F !important;
    border: 2px solid #fff !important;
    border-radius: 50% !important;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3) !important;
  }

  .cropper-line {
    background-color: #E03A2F !important;
    opacity: 0.7 !important;
  }

  .cropper-point.point-se {
    width: 12px !important;
    height: 12px !important;
  }

  .cropper-point.point-nw {
    width: 12px !important;
    height: 12px !important;
  }

  .cropper-point.point-ne {
    width: 12px !important;
    height: 12px !important;
  }

  .cropper-point.point-sw {
    width: 12px !important;
    height: 12px !important;
  }
</style>

<script src="/js/validation.js"></script>
<script>
  const productId = "<%= product._id %>";
  const container = document.getElementById('image-preview-container');
  const mainIndexInput = document.getElementById('mainImageIndex');
  const input = document.getElementById('image-input');
  let base64Images = [];
  let filesToCrop = [];
  let currentFileIndex = 0;
  let cropper;

  // Prefill existing images
  const existingMain = "<%= product.mainImage %>";
  const existingSubs = <%- JSON.stringify(product.subImages) %>;
  const preloadedImages = [existingMain, ...existingSubs];

  preloadedImages.forEach((url, index) => {
    fetch(url)
      .then(res => res.blob())
      .then(blob => {
        const reader = new FileReader();
        reader.onload = () => {
          base64Images.push(reader.result);
          renderThumbnails(); // This will render with crop button too
          if (index === 0) {
            mainIndexInput.value = 0;
          }
        };
        reader.readAsDataURL(blob);
      });
});

  input.addEventListener('change', (e) => {
    filesToCrop = Array.from(e.target.files);
    currentFileIndex = 0;
    cropNextImage();
  });

  function cropNextImage() {
    if (currentFileIndex >= filesToCrop.length) return;
    const file = filesToCrop[currentFileIndex];
    const reader = new FileReader();
    reader.onload = () => {
      showCropModal(reader.result, () => {
        currentFileIndex++;
        cropNextImage();
      });
    };
    reader.readAsDataURL(file);
  }

  function showCropModal(imageSrc, onCropDone) {
    const existing = document.getElementById('cropModal');
    if (existing) existing.remove();

    const modalHtml = `
      <div class="modal fade" id="cropModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered cropper-modal-custom">
          <div class="modal-content cropper-modal-content">
            <div class="modal-header border-0 pb-2">
              <h5 class="modal-title mx-auto mb-0">Crop Image</h5>
            </div>
            <div class="modal-body p-2">
              <div class="cropper-image-container">
                <img id="crop-image" src="${imageSrc}" />
              </div>
            </div>
            <div class="modal-footer border-0 pt-2 justify-content-center">
              <button class="btn btn-outline-dark px-4" data-bs-dismiss="modal">Cancel</button>
              <button class="btn btn-dark px-4" id="crop-save">Crop & Add</button>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);
    const modalEl = document.getElementById('cropModal');
    const cropModal = new bootstrap.Modal(modalEl);
    cropModal.show();

    const imageEl = document.getElementById('crop-image');
    imageEl.onload = () => {
      cropper = new Cropper(imageEl, {
        aspectRatio: NaN,
        viewMode: 1,
        dragMode: 'move',
        autoCropArea: 0.6,
        restore: false,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: false,
        responsive: true,
        checkCrossOrigin: false,
        checkOrientation: false,
        modal: true,
        background: true,
        minContainerWidth: 300,
        minContainerHeight: 300,
        minCanvasWidth: 200,
        minCanvasHeight: 200,
        minCropBoxWidth: 100,
        minCropBoxHeight: 100,
        scalable: true,
        zoomable: true,
        zoomOnTouch: true,
        zoomOnWheel: true,
        wheelZoomRatio: 0.1,
        cropBoxResizable: true,
        cropBoxMovable: true,
        ready: function () {
          // Ensure the cropper utilizes the full container space
          this.cropper.reset();
          // Force the cropper to center and scale the image properly
          const containerData = this.cropper.getContainerData();
          const imageData = this.cropper.getImageData();

          // Calculate optimal scale to fit image in container while maintaining aspect ratio
          const scaleX = containerData.width / imageData.naturalWidth;
          const scaleY = containerData.height / imageData.naturalHeight;
          const scale = Math.min(scaleX, scaleY) * 0.8; // 0.8 to leave some padding

          // Center and scale the image
          this.cropper.zoomTo(scale);
          this.cropper.center();
        }
      });
    };

    document.getElementById('crop-save').onclick = () => {
      const cropped = cropper.getCroppedCanvas({
        width: 800,
        height: 800,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
      }).toDataURL('image/jpeg', 0.9);
      base64Images.push(cropped);
      renderThumbnails();
      cropModal.hide();
      modalEl.addEventListener('hidden.bs.modal', () => {
        modalEl.remove();
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) backdrop.remove();
        if (typeof onCropDone === 'function') onCropDone();
      });
    };
  }

  function renderThumbnails() {
    container.innerHTML = '';

    for (let i = 0; i < 3; i++) {
      const wrapper = document.createElement('div');
      wrapper.classList.add('image-wrapper');

      if (base64Images[i]) {
        // Image exists in slot
        wrapper.innerHTML = `
          <img src="${base64Images[i]}" />
          <button type="button" class="btn-remove" onclick="removeImage(${i})">√ó</button>
          <button type="button" class="btn-main ${mainIndexInput.value == i ? 'active' : ''}" onclick="setMainImage(${i})">&#9733;</button>
          <button type="button" class="btn-crop" onclick="reCropImage(${i})"><i class='bi bi-scissors'></i></button>
        `;
        if (parseInt(mainIndexInput.value) === i) {
          wrapper.classList.add('main');
        }
      } else {
        // Empty slot with "+" icon
        wrapper.innerHTML = `
          <div class="add-slot d-flex justify-content-center align-items-center h-100" onclick="addImageToSlot(${i})" title="Click to upload image">
            <i class="bi bi-plus-lg fs-2 text-muted"></i>
          </div>
        `;
      }

      container.appendChild(wrapper);
    }
  }

function addImageToSlot(slotIndex) {
  input.value = ''; // Reset input to allow re-uploading same file
  input.click();

  input.onchange = () => {
    const file = input.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      showCropModal(reader.result, () => {
        base64Images[slotIndex] = cropper.getCroppedCanvas({
          width: 800,
          height: 800,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: 'high'
        }).toDataURL('image/jpeg', 0.9);
        renderThumbnails();
      });
    };
    reader.readAsDataURL(file);
  };
}

  function reCropImage(index) {
    showCropModal(base64Images[index], () => {
      const cropped = cropper.getCroppedCanvas({
        width: 800,
        height: 800,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
      }).toDataURL('image/jpeg', 0.9);
      base64Images[index] = cropped;
      renderThumbnails();
    });
  }

  function setMainImage(index) {
    mainIndexInput.value = index;
    renderThumbnails();
  }

  function removeImage(index) {
    base64Images.splice(index, 1);
    if (mainIndexInput.value == index) mainIndexInput.value = '';
    renderThumbnails();

    input.value = '';
  }

  // Initialize form validation
  const editProductValidator = new FormValidator('edit-product-form');

  // Override submit function with validation
  editProductValidator.submitForm = async function() {
    const form = document.getElementById('edit-product-form');
    const formData = new FormData(form);

    base64Images.forEach((b64, i) => {
      formData.append('base64Images', b64);
    });

    try {
      const res = await fetch(`/admin/products/api/${productId}`, {
        method: 'PATCH',
        body: formData
      });
      const contentType = res.headers.get("content-type");

      if (!contentType || !contentType.includes("application/json")) {
        throw new Error("Invalid response from server. Expected JSON.");
      }

      const data = await res.json();
      if (res.ok && data.success) {
        await Swal.fire({
          icon: 'success',
          title: 'Product Edited Successfully!',
          text: 'Your product changes were saved.',
          confirmButtonColor: '#111'
        });
        window.location.href = '/admin/products';
      } else {
        throw new Error(data.message || 'Failed to update');
      }
    } catch (err) {
      Swal.fire({
        icon: 'error',
        title: 'Oops!',
        text: err.message,
        confirmButtonColor: '#d33'
      });
    }
  };
</script>
