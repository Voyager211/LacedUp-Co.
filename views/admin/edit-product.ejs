<!-- <h1><%= title %></h1> -->

<div class="container my-4">

  <% if (message && message.length > 0) { %>
    <div class="alert alert-danger" role="alert">
      <%= message %>
    </div>
  <% } %>

  <form id="edit-product-form" novalidate>
    <!-- Basic Info -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-info-circle me-2"></i>Basic Information</h5>
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label">Product Name *</label>
          <input type="text" name="productName" class="form-control" value="<%= product.productName %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Brand *</label>
          <input type="text" name="brand" class="form-control" value="<%= product.brand %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Category *</label>
          <select name="category" class="form-select" required>
            <% categories.forEach(cat => { %>
              <option value="<%= cat._id %>" <%= product.category._id.toString() === cat._id.toString() ? 'selected' : '' %>><%= cat.name %></option>
            <% }) %>
          </select>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Features *</label>
          <input type="text" name="features" class="form-control" value="<%= product.features %>" required>
        </div>
      </div>
    </div>

    <!-- Pricing -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-cash-coin me-2"></i>Pricing & Offers</h5>
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label">Regular Price *</label>
          <input type="number" name="regularPrice" class="form-control" value="<%= product.regularPrice %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Product Offer (%)</label>
          <input type="number" name="productOffer" class="form-control" value="<%= product.productOffer %>">
        </div>
      </div>
    </div>

    <!-- Product Variants -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-grid-3x3-gap me-2"></i>Product Variants <small class="text-muted">(UK Shoe Sizes)</small></h5>
      <div class="alert alert-info small" role="alert">
        <ul class="mb-0 ps-3">
          <li>üìè Edit different sizes with individual base prices and variant-specific offers</li>
          <li>‚úÖ At least <strong>one variant</strong> is required</li>
          <li>üá¨üáß Use UK size format (e.g., "UK 6", "UK 7", etc.)</li>
          <li>üí∞ Base Price: The intended selling price for each variant</li>
          <li>üéØ Variant Specific Offer: Optional discount percentage (0-100%) applied to base price</li>
          <li>üìä Final Price: Automatically calculated as Base Price - Variant Specific Offer</li>
          <li>‚ûï Click "Add Variant" to add more sizes</li>
        </ul>
      </div>

      <div id="variants-container">
        <!-- Variants will be dynamically added here -->
      </div>

      <button type="button" id="add-variant-btn" class="btn btn-outline-dark">
        <i class="bi bi-plus-lg me-2"></i>Add Variant
      </button>
    </div>

    <!-- Description -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-card-text me-2"></i>Product Details</h5>
      <div class="mb-3">
        <label class="form-label">Description *</label>
        <textarea name="description" class="form-control" rows="4" required><%= product.description %></textarea>
      </div>
    </div>

    <!-- Images -->
    <div class="border rounded p-4 mb-4 bg-light-subtle">
      <h5 class="fw-semibold mb-3"><i class="bi bi-images me-2"></i>Product Images <small class="text-muted">(Minimum 3 required)</small></h5>
      <div class="alert alert-info small" role="alert">
        <ul class="mb-0 ps-3">
          <li>‚≠ê Click the star icon to set a main image (currently handled by upload order)</li>
          <li>üì• Upload at least <strong>3 images</strong></li>
          <li>üìê Images will be <strong>cropped & resized</strong> automatically</li>
        </ul>
      </div>
      <div class="mb-3">
        <label class="form-label">Product Images (Min: 3, Max: 6)</label>

        <!-- Bulk upload button -->
        <div class="mb-3">
          <button type="button" id="bulk-upload-btn" class="btn btn-outline-dark">
            <i class="bi bi-images me-2"></i>Choose Files (Bulk Upload)
          </button>
          <small class="text-muted ms-2">Select multiple images at once, or use the '+' placeholders below for individual uploads</small>
        </div>

        <!-- Hidden file inputs -->
        <input type="file" id="image-input" accept="image/*" class="d-none">
        <input type="file" id="bulk-input" accept="image/*" multiple class="d-none">
        <input type="hidden" name="mainImageIndex" id="mainImageIndex">

        <div id="image-preview-container" class="d-flex flex-wrap gap-3 mt-3"></div>
      </div>
    </div>

    <!-- Submit -->
    <div class="d-flex justify-content-end gap-2">
      <a href="/admin/products" class="btn btn-outline-secondary">Cancel</a>
      <button type="submit" class="btn btn-dark">
        <i class="bi bi-save me-1"></i> Save Changes
      </button>
    </div>
  </form>
</div>

<style>
  .image-wrapper {
    position: relative;
    border: 3px solid transparent;
    padding: 8px;
    border-radius: 12px;
    transition: all 0.3s ease;
    background: linear-gradient(white, white) padding-box,
                linear-gradient(135deg, #e9ecef, #dee2e6) border-box;
    width: 120px;
    height: 120px;
  }

  .image-wrapper.main {
    border-color: transparent;
    background: linear-gradient(white, white) padding-box,
                linear-gradient(135deg, #198754, #20c997) border-box;
    box-shadow: 0 8px 25px rgba(25, 135, 84, 0.3);
  }

  .image-wrapper:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .add-slot {
    width: 100%;
    height: 100%;
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .add-slot:hover {
    border-color: #6c757d;
    background-color: #f8f9fa;
  }

  /* üßº Enhanced Close (X) Button */
  .btn-remove {
    position: absolute;
    top: 8px;
    right: 8px;
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #dc3545, #bb2d3b);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 18px;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.4);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10;
  }

  .btn-remove:hover {
    background: linear-gradient(135deg, #bb2d3b, #a02834);
    transform: scale(1.1) rotate(90deg);
    box-shadow: 0 6px 20px rgba(220, 53, 69, 0.6);
  }

  .btn-remove:active {
    transform: scale(0.95) rotate(90deg);
  }

  /* ‚≠ê Enhanced Star Button */
  .btn-main {
    position: absolute;
    bottom: 8px;
    right: 8px;
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #fd7e14, #e8690b);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 18px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(253, 126, 20, 0.4);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10;
  }

  .btn-main.active {
    background: linear-gradient(135deg, #198754, #146c43);
    box-shadow: 0 6px 20px rgba(25, 135, 84, 0.6);
    transform: scale(1.1);
  }

  .btn-main:hover {
    transform: scale(1.15) rotate(18deg);
    box-shadow: 0 6px 20px rgba(253, 126, 20, 0.6);
  }

  .btn-main.active:hover {
    transform: scale(1.15) rotate(18deg);
    box-shadow: 0 8px 25px rgba(25, 135, 84, 0.7);
  }

  .btn-main:active {
    transform: scale(0.95);
  }

  /* üîÑ Crop Button */
  .btn-crop {
    position: absolute;
    bottom: 8px;
    left: 8px;
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #6f42c1, #5a2d91);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 16px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(111, 66, 193, 0.4);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10;
  }

  .btn-crop:hover {
    background: linear-gradient(135deg, #5a2d91, #4c2577);
    transform: scale(1.1) rotate(-15deg);
    box-shadow: 0 6px 20px rgba(111, 66, 193, 0.6);
  }

  .btn-crop:active {
    transform: scale(0.95);
  }

  /* Image placeholder styles */
  .image-placeholder {
    cursor: pointer;
    border: 3px dashed #dee2e6 !important;
    background: #f8f9fa !important;
    transition: all 0.3s ease;
  }

  .image-placeholder:hover {
    border-color: #dc3545 !important;
    background: #fff5f5 !important;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(220, 53, 69, 0.15);
  }

  .placeholder-content {
    width: 120px;
    height: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #6c757d;
    font-size: 14px;
    font-weight: 500;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .image-placeholder:hover .placeholder-content {
    color: #dc3545;
  }

  .placeholder-content i {
    font-size: 24px;
    margin-bottom: 8px;
    transition: all 0.3s ease;
  }

  .image-placeholder:hover .placeholder-content i {
    transform: scale(1.1);
  }

  /* Bulk upload button styles */
  #bulk-upload-btn {
    transition: all 0.3s ease;
    font-weight: 500;
  }

  #bulk-upload-btn:hover {
    background-color: #212529;
    border-color: #212529;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  #bulk-upload-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  /* ========= OPTIMIZED CROPPER MODAL ========= */
  .cropper-modal-custom {
    max-width: 1200px;
    width: 95vw;
  }

  .cropper-modal-content {
    height: 700px;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
  }

  .cropper-modal-content .modal-header {
    flex-shrink: 0;
    height: 60px;
    display: flex;
    align-items: center;
  }

  .cropper-modal-content .modal-footer {
    flex-shrink: 0;
    height: 70px;
    display: flex;
    align-items: center;
  }

  .cropper-modal-content .modal-body {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 0;
  }

  .cropper-image-container {
    width: 1000px;
    height: 550px;
    max-width: 85%;
    max-height: 100%;
    position: relative;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cropper-image-container img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    display: block;
  }

  /* Enhanced cropper elements for better visibility */
  .cropper-container {
    width: 100% !important;
    height: 100% !important;
  }

  .cropper-canvas {
    max-width: 100% !important;
    max-height: 100% !important;
  }

  .cropper-drag-box,
  .cropper-crop-box {
    border-radius: 4px;
  }

  .cropper-view-box {
    outline: 2px solid rgba(224, 58, 47, 0.8);
    outline-color: rgba(224, 58, 47, 0.8);
  }

  .cropper-point {
    width: 10px !important;
    height: 10px !important;
    background-color: #E03A2F !important;
    border: 2px solid #fff !important;
    border-radius: 50% !important;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3) !important;
  }

  .cropper-line {
    background-color: #E03A2F !important;
    opacity: 0.7 !important;
  }

  .cropper-point.point-se {
    width: 12px !important;
    height: 12px !important;
  }

  .cropper-point.point-nw {
    width: 12px !important;
    height: 12px !important;
  }

  .cropper-point.point-ne {
    width: 12px !important;
    height: 12px !important;
  }

  .cropper-point.point-sw {
    width: 12px !important;
    height: 12px !important;
  }

  /* ========= VARIANTS MANAGEMENT STYLES ========= */
  .variant-row {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 15px;
    transition: all 0.3s ease;
    position: relative;
  }

  .variant-row:hover {
    border-color: #dc3545;
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.1);
    transform: translateY(-1px);
  }

  .variant-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e9ecef;
  }

  .variant-number {
    background: linear-gradient(135deg, #dc3545, #bb2d3b);
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 14px;
  }

  .remove-variant-btn {
    background: linear-gradient(135deg, #dc3545, #bb2d3b);
    color: white;
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 16px;
    font-weight: bold;
  }

  .remove-variant-btn:hover {
    background: linear-gradient(135deg, #bb2d3b, #a02834);
    transform: scale(1.1) rotate(90deg);
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.4);
  }

  .remove-variant-btn:active {
    transform: scale(0.95) rotate(90deg);
  }

  #add-variant-btn {
    transition: all 0.3s ease;
    font-weight: 500;
    border: 2px dashed #6c757d;
    background: transparent;
  }

  #add-variant-btn:hover {
    background-color: #212529;
    border-color: #212529;
    border-style: solid;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .variant-fields {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
    gap: 15px;
  }

  @media (max-width: 1200px) {
    .variant-fields {
      grid-template-columns: 1fr 1fr 1fr;
      gap: 12px;
    }
  }

  @media (max-width: 768px) {
    .variant-fields {
      grid-template-columns: 1fr;
      gap: 10px;
    }
  }
</style>

<script src="/js/validation.js"></script>
<script src="/utils/imageValidation.js"></script>
<script>
  const productId = "<%= product._id %>";
  const input = document.getElementById('image-input');
  const bulkInput = document.getElementById('bulk-input');
  const bulkUploadBtn = document.getElementById('bulk-upload-btn');
  const container = document.getElementById('image-preview-container');
  const mainIndexInput = document.getElementById('mainImageIndex');
  let imageFiles = [];
  let base64Images = [];
  let cropper;
  let cropModal;

  let filesToCrop = [];
  let currentFileIndex = 0;
  let currentUploadSlot = -1; // Track which slot is being uploaded to
  let isProcessingBulk = false; // Track bulk upload state
  const MAX_IMAGES = 6;
  const MIN_IMAGES = 3;

  // Track original images for cleanup
  let originalImages = [];
  let imageUrlToBase64Map = new Map(); // Map original URLs to their base64 equivalents

  // Variants management
  let variants = [];
  let variantCounter = 0;
  const variantsContainer = document.getElementById('variants-container');
  const addVariantBtn = document.getElementById('add-variant-btn');

  // Validation error display functions
  function showValidationErrors(errors) {
    const errorContainer = document.getElementById('validation-errors') || createErrorContainer();
    errorContainer.innerHTML = '';

    errors.forEach(error => {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'alert alert-danger alert-dismissible fade show';
      errorDiv.innerHTML = `
        ${error}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      errorContainer.appendChild(errorDiv);
    });

    errorContainer.style.display = 'block';
  }

  function clearValidationErrors() {
    const errorContainer = document.getElementById('validation-errors');
    if (errorContainer) {
      errorContainer.style.display = 'none';
      errorContainer.innerHTML = '';
    }
  }

  function createErrorContainer() {
    const container = document.createElement('div');
    container.id = 'validation-errors';
    container.style.marginBottom = '1rem';

    // Insert before the image preview container
    const imageContainer = document.getElementById('image-preview-container');
    imageContainer.parentNode.insertBefore(container, imageContainer);

    return container;
  }

  // Prefill existing images
  const existingMain = "<%= product.mainImage %>";
  const existingSubs = <%- JSON.stringify(product.subImages) %>;
  const preloadedImages = [existingMain, ...existingSubs];

  // Store original images for cleanup tracking
  originalImages = [...preloadedImages];

  preloadedImages.forEach((url, index) => {
    fetch(url)
      .then(res => res.blob())
      .then(blob => {
        const reader = new FileReader();
        reader.onload = () => {
          base64Images.push(reader.result);
          // Map the original URL to its base64 equivalent
          imageUrlToBase64Map.set(url, reader.result);
          renderThumbnails(); // This will render with crop button too
          if (index === 0) {
            mainIndexInput.value = 0;
          }
        };
        reader.readAsDataURL(blob);
      });
});

  // Individual upload handler (enhanced)
  input.addEventListener('change', (e) => {
    const file = e.target.files[0]; // Single file selection

    if (!file) return;

    // Check maximum images limit
    if (base64Images.length >= MAX_IMAGES) {
      showValidationErrors([`Maximum of ${MAX_IMAGES} images allowed per product`]);
      e.target.value = '';
      return;
    }

    // Validate the selected file
    const validation = ImageValidator.validateImageFile(file);

    if (!validation.isValid) {
      // Show validation errors
      showValidationErrors([`${file.name}: ${validation.message}`]);
      // Clear the input
      e.target.value = '';
      return;
    }

    // Clear any previous validation errors
    clearValidationErrors();

    // Process single file
    const reader = new FileReader();
    reader.onload = () => {
      showCropModal(reader.result, () => {
        // Image processing is handled by the crop save handler
        // Just clean up after cropping is complete
        e.target.value = '';
        currentUploadSlot = -1;
      });
    };
    reader.readAsDataURL(file);
  });

  // Function to trigger file selection for a specific slot
  function selectImageForSlot(slotIndex = -1) {
    currentUploadSlot = slotIndex;
    input.click();
  }

  // Bulk upload button event listener
  bulkUploadBtn.addEventListener('click', () => {
    if (isProcessingBulk) {
      showValidationErrors(['Please wait for the current upload to complete.']);
      return;
    }
    bulkInput.click();
  });

  // Bulk input change handler
  bulkInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);

    if (!files.length) return;

    // Check if adding these files would exceed maximum
    let filesToProcess = files;
    if (base64Images.length + files.length > MAX_IMAGES) {
      const availableSlots = MAX_IMAGES - base64Images.length;
      if (availableSlots <= 0) {
        showValidationErrors([`Maximum of ${MAX_IMAGES} images allowed per product`]);
        e.target.value = '';
        return;
      }

      filesToProcess = files.slice(0, availableSlots);
      showValidationErrors([`Maximum of ${MAX_IMAGES} images allowed. Only the first ${availableSlots} images have been selected.`]);
    }

    // Validate all selected files
    const validation = ImageValidator.validateMultipleImageFiles(filesToProcess);

    if (!validation.isValid) {
      // Show validation errors but continue with valid files if any
      showValidationErrors(validation.errors);
      if (validation.validFiles.length === 0) {
        e.target.value = '';
        return;
      }
      filesToProcess = validation.validFiles;
    } else {
      // Clear any previous validation errors
      clearValidationErrors();
    }

    // Start bulk processing
    processBulkUpload(filesToProcess);

    // Clear the input for next use
    e.target.value = '';
  });

  // Bulk upload processing function
  function processBulkUpload(files) {
    if (files.length === 0) return;

    isProcessingBulk = true;
    filesToCrop = files;
    currentFileIndex = 0;

    // Update button state
    bulkUploadBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Processing...';
    bulkUploadBtn.disabled = true;

    // Start processing first image
    cropNextBulkImage();
  }

  function cropNextBulkImage() {
    if (currentFileIndex >= filesToCrop.length) {
      // Bulk processing complete
      isProcessingBulk = false;
      bulkUploadBtn.innerHTML = '<i class="bi bi-images me-2"></i>Choose Files (Bulk Upload)';
      bulkUploadBtn.disabled = false;
      filesToCrop = [];
      currentFileIndex = 0;
      return;
    }

    const file = filesToCrop[currentFileIndex];
    const reader = new FileReader();
    reader.onload = () => {
      showCropModal(reader.result, () => {
        currentFileIndex++;
        cropNextBulkImage(); // Process next image
      });
    };
    reader.readAsDataURL(file);
  }

  function cropNextImage() {
    if (currentFileIndex >= filesToCrop.length) return;
    const file = filesToCrop[currentFileIndex];
    const reader = new FileReader();
    reader.onload = () => {
      showCropModal(reader.result, () => {
        currentFileIndex++;
        cropNextImage();
      });
    };
    reader.readAsDataURL(file);
  }

  function showCropModal(imageSrc, onCropDone) {
    const existing = document.getElementById('cropModal');
    if (existing) existing.remove();

    const modalHtml = `
      <div class="modal fade" id="cropModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered cropper-modal-custom">
          <div class="modal-content cropper-modal-content">
            <div class="modal-header border-0 pb-2">
              <h5 class="modal-title mx-auto mb-0">Crop Image</h5>
            </div>
            <div class="modal-body p-2">
              <div class="cropper-image-container">
                <img id="crop-image" src="${imageSrc}" />
              </div>
            </div>
            <div class="modal-footer border-0 pt-2 justify-content-center">
              <button class="btn btn-outline-dark px-4" data-bs-dismiss="modal">Cancel</button>
              <button class="btn btn-dark px-4" id="crop-save">Crop & Add</button>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);
    const modalEl = document.getElementById('cropModal');
    const cropModal = new bootstrap.Modal(modalEl);
    cropModal.show();

    const imageEl = document.getElementById('crop-image');
    imageEl.onload = () => {
      cropper = new Cropper(imageEl, {
        aspectRatio: NaN,
        viewMode: 1,
        dragMode: 'move',
        autoCropArea: 0.6,
        restore: false,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: false,
        responsive: true,
        checkCrossOrigin: false,
        checkOrientation: false,
        modal: true,
        background: true,
        minContainerWidth: 300,
        minContainerHeight: 300,
        minCanvasWidth: 200,
        minCanvasHeight: 200,
        minCropBoxWidth: 100,
        minCropBoxHeight: 100,
        scalable: true,
        zoomable: true,
        zoomOnTouch: true,
        zoomOnWheel: true,
        wheelZoomRatio: 0.1,
        cropBoxResizable: true,
        cropBoxMovable: true,
        ready: function () {
          // Ensure the cropper utilizes the full container space
          this.cropper.reset();
          // Force the cropper to center and scale the image properly
          const containerData = this.cropper.getContainerData();
          const imageData = this.cropper.getImageData();

          // Calculate optimal scale to fit image in container while maintaining aspect ratio
          const scaleX = containerData.width / imageData.naturalWidth;
          const scaleY = containerData.height / imageData.naturalHeight;
          const scale = Math.min(scaleX, scaleY) * 0.8; // 0.8 to leave some padding

          // Center and scale the image
          this.cropper.zoomTo(scale);
          this.cropper.center();
        }
      });
    };

    document.getElementById('crop-save').onclick = () => {
      const cropped = cropper.getCroppedCanvas({
        width: 800,
        height: 800,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
      }).toDataURL('image/jpeg', 0.9);

      if (currentUploadSlot >= 0 && currentUploadSlot < base64Images.length) {
        // Replace existing image (re-cropping)
        base64Images[currentUploadSlot] = cropped;
      } else {
        // Add new image
        base64Images.push(cropped);
      }

      renderThumbnails();
      cropModal.hide();

      modalEl.addEventListener('hidden.bs.modal', () => {
        modalEl.remove();
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) backdrop.remove();

        if (typeof onCropDone === 'function') onCropDone(); // Execute callback
      });
    };
  }

  function renderThumbnails() {
    container.innerHTML = '';

    // Render existing images
    base64Images.forEach((img, index) => {
      const wrapper = document.createElement('div');
      wrapper.classList.add('image-wrapper');
      if (parseInt(mainIndexInput.value) === index) wrapper.classList.add('main');

      wrapper.innerHTML = `
        <img src="${img}" />
        <button class="btn-remove" onclick="removeImage(${index})">√ó</button>
        <button class="btn-crop" onclick="recropImage(${index})" title="Re-crop image"><i class="bi bi-scissors"></i></button>
        <button class="btn-main ${mainIndexInput.value == index ? 'active' : ''}" onclick="setMainImage(${index})">&#9733;</button>
      `;
      container.appendChild(wrapper);
    });

    // Add placeholders based on current state
    const currentImageCount = base64Images.length;

    if (currentImageCount < MIN_IMAGES) {
      // Show placeholders to reach minimum requirement
      const placeholdersNeeded = MIN_IMAGES - currentImageCount;
      for (let i = 0; i < placeholdersNeeded; i++) {
        addPlaceholder();
      }
    } else if (currentImageCount >= MIN_IMAGES && currentImageCount < MAX_IMAGES) {
      // After minimum met: show 1 additional placeholder
      addPlaceholder();
    }
    // If currentImageCount >= MAX_IMAGES, show no placeholders
  }

  function addPlaceholder() {
    const placeholder = document.createElement('div');
    placeholder.classList.add('image-wrapper', 'image-placeholder');
    placeholder.innerHTML = `
      <div class="placeholder-content">
        <i class="bi bi-plus-lg"></i>
        <span>Add Image</span>
      </div>
    `;

    // Add click handler to trigger file selection
    placeholder.addEventListener('click', () => {
      if (base64Images.length >= MAX_IMAGES) {
        showValidationErrors([`Maximum of ${MAX_IMAGES} images allowed per product`]);
        return;
      }
      selectImageForSlot(-1); // -1 indicates new image, not replacement
    });

    container.appendChild(placeholder);
  }

  function setMainImage(index) {
    mainIndexInput.value = index;
    renderThumbnails();
  }

  function removeImage(index) {
    if (index < 0 || index >= base64Images.length) return;

    // Remove from base64Images array
    base64Images.splice(index, 1);

    // Reset main image index if the removed image was the main image
    if (mainIndexInput.value == index) {
      mainIndexInput.value = '';
    } else if (mainIndexInput.value > index) {
      // Adjust main image index if it's after the removed image
      mainIndexInput.value = parseInt(mainIndexInput.value) - 1;
    }

    renderThumbnails();
  }

  function recropImage(index) {
    if (index < 0 || index >= base64Images.length) return;

    // Set the current upload slot to the index being re-cropped
    currentUploadSlot = index;

    // Open crop modal with the existing image
    showCropModal(base64Images[index], () => {
      // Reset upload slot after re-cropping is complete
      currentUploadSlot = -1;
    });
  }

  // ========= VARIANTS MANAGEMENT FUNCTIONS =========

  // Calculate final price for a variant
  function calculateFinalPrice(variantId) {
    const variantElement = document.querySelector(`[data-variant-id="${variantId}"]`);
    if (!variantElement) return;

    const basePriceInput = variantElement.querySelector('.variant-base-price');
    const offerInput = variantElement.querySelector('.variant-specific-offer');
    const finalPriceInput = variantElement.querySelector('.variant-final-price');

    const basePrice = parseFloat(basePriceInput.value) || 0;
    const offer = parseFloat(offerInput.value) || 0;

    const finalPrice = basePrice * (1 - offer / 100);
    finalPriceInput.value = finalPrice.toFixed(2);

    // Update the color based on discount
    if (offer > 0) {
      finalPriceInput.style.color = '#198754'; // Green for discounted
      finalPriceInput.style.fontWeight = '700';
    } else {
      finalPriceInput.style.color = '#6c757d'; // Gray for no discount
      finalPriceInput.style.fontWeight = '600';
    }
  }

  function addVariant(size = '', stock = '', basePrice = '', variantSpecificOffer = '') {
    variantCounter++;
    const variantId = `variant-${variantCounter}`;

    const variantHtml = `
      <div class="variant-row" data-variant-id="${variantId}">
        <div class="variant-header">
          <div class="d-flex align-items-center gap-2">
            <div class="variant-number">${variants.length + 1}</div>
            <span class="fw-semibold">Size Variant</span>
          </div>
          <button type="button" class="remove-variant-btn" onclick="removeVariant('${variantId}')">√ó</button>
        </div>
        <div class="variant-fields">
          <div>
            <label class="form-label">Size *</label>
            <input type="text" class="form-control variant-size" placeholder="e.g., UK 6" value="${size}" required>
          </div>
          <div>
            <label class="form-label">Stock *</label>
            <input type="number" class="form-control variant-stock" placeholder="0" value="${stock}" min="0" required>
          </div>
          <div>
            <label class="form-label">Base Price * (‚Çπ)</label>
            <input type="number" class="form-control variant-base-price" placeholder="0" value="${basePrice}" min="0" step="0.01" required onchange="calculateFinalPrice('${variantId}')" oninput="calculateFinalPrice('${variantId}')">
          </div>
          <div>
            <label class="form-label">Variant Specific Offer (%)</label>
            <input type="number" class="form-control variant-specific-offer" placeholder="0" value="${variantSpecificOffer}" min="0" max="100" step="0.01" onchange="calculateFinalPrice('${variantId}')" oninput="calculateFinalPrice('${variantId}')">
          </div>
          <div>
            <label class="form-label">Final Price (‚Çπ)</label>
            <input type="number" class="form-control variant-final-price" placeholder="0" readonly style="background-color: #f8f9fa; font-weight: 600; color: #198754;">
          </div>
        </div>
      </div>
    `;

    variantsContainer.insertAdjacentHTML('beforeend', variantHtml);
    variants.push({ id: variantId, size, stock, basePrice, variantSpecificOffer });
    updateVariantNumbers();

    // Calculate initial final price
    setTimeout(() => calculateFinalPrice(variantId), 100);
  }

  function removeVariant(variantId) {
    const variantElement = document.querySelector(`[data-variant-id="${variantId}"]`);
    if (variantElement) {
      variantElement.remove();
      variants = variants.filter(v => v.id !== variantId);
      updateVariantNumbers();
    }
  }

  function updateVariantNumbers() {
    const variantRows = document.querySelectorAll('.variant-row');
    variantRows.forEach((row, index) => {
      const numberElement = row.querySelector('.variant-number');
      if (numberElement) {
        numberElement.textContent = index + 1;
      }
    });
  }

  function getVariantsData() {
    const variantRows = document.querySelectorAll('.variant-row');
    const variantsData = [];

    variantRows.forEach(row => {
      const size = row.querySelector('.variant-size').value.trim();
      const stock = parseInt(row.querySelector('.variant-stock').value) || 0;
      const basePrice = parseFloat(row.querySelector('.variant-base-price').value) || 0;
      const variantSpecificOffer = parseFloat(row.querySelector('.variant-specific-offer').value) || 0;

      if (size && basePrice > 0) {
        variantsData.push({
          size,
          stock,
          basePrice,
          variantSpecificOffer,
          // Keep old field for backward compatibility during transition
          productOffer: variantSpecificOffer
        });
      }
    });

    return variantsData;
  }

  function validateVariants() {
    const variantsData = getVariantsData();
    const errors = [];

    if (variantsData.length === 0) {
      errors.push('At least one product variant is required.');
      return { isValid: false, errors };
    }

    const sizes = new Set();
    variantsData.forEach((variant, index) => {
      if (!variant.size) {
        errors.push(`Variant ${index + 1}: Size is required.`);
      } else if (sizes.has(variant.size.toLowerCase())) {
        errors.push(`Variant ${index + 1}: Duplicate size "${variant.size}".`);
      } else {
        sizes.add(variant.size.toLowerCase());
      }

      if (variant.stock < 0) {
        errors.push(`Variant ${index + 1}: Stock cannot be negative.`);
      }

      if (!variant.basePrice || variant.basePrice <= 0) {
        errors.push(`Variant ${index + 1}: Base price is required and must be greater than 0.`);
      }

      if (variant.variantSpecificOffer < 0 || variant.variantSpecificOffer > 100) {
        errors.push(`Variant ${index + 1}: Variant specific offer must be between 0 and 100.`);
      }
    });

    return { isValid: errors.length === 0, errors };
  }

  // Add variant button event listener
  addVariantBtn.addEventListener('click', () => {
    addVariant();
  });

  function setMainImage(index) {
    mainIndexInput.value = index;
    renderThumbnails();
  }

  function removeImage(index) {
    base64Images.splice(index, 1);
    if (mainIndexInput.value == index) mainIndexInput.value = '';
    renderThumbnails();

    input.value = '';
  }

  // Initialize form validation
  const editProductValidator = new FormValidator('edit-product-form');

  // Override submit function with validation
  editProductValidator.submitForm = async function() {
    const form = document.getElementById('edit-product-form');
    const formData = new FormData(form);

    // Validate minimum image requirement
    if (base64Images.length < MIN_IMAGES) {
      await Swal.fire({
        icon: 'warning',
        title: 'Images Required',
        text: `Please upload at least ${MIN_IMAGES} images for the product.`,
        confirmButtonColor: '#d33'
      });
      return;
    }

    // Validate variants
    const variantValidation = validateVariants();
    if (!variantValidation.isValid) {
      await Swal.fire({
        icon: 'warning',
        title: 'Variant Validation Failed',
        html: `<ul style="text-align: left; margin: 0; padding-left: 20px;">${variantValidation.errors.map(error => `<li>${error}</li>`).join('')}</ul>`,
        confirmButtonColor: '#d33'
      });
      return;
    }

    base64Images.forEach((b64, i) => {
      formData.append('base64Images', b64);
    });

    // Attach variants data
    const variantsData = getVariantsData();
    formData.append('variants', JSON.stringify(variantsData));

    try {
      const res = await fetch(`/admin/products/api/${productId}`, {
        method: 'PATCH',
        body: formData
      });
      const contentType = res.headers.get("content-type");

      if (!contentType || !contentType.includes("application/json")) {
        throw new Error("Invalid response from server. Expected JSON.");
      }

      const data = await res.json();
      if (res.ok && data.success) {
        await Swal.fire({
          icon: 'success',
          title: 'Product Edited Successfully!',
          text: 'Your product changes were saved.',
          confirmButtonColor: '#111'
        });
        window.location.href = '/admin/products';
      } else {
        throw new Error(data.message || 'Failed to update');
      }
    } catch (err) {
      console.error('Form submission error:', err);
      console.error('Variants data that was sent:', getVariantsData());
      Swal.fire({
        icon: 'error',
        title: 'Oops!',
        text: err.message || 'An error occurred while saving the product',
        confirmButtonColor: '#d33'
      });
    }
  };

  // Initialize the interface with placeholders on page load
  document.addEventListener('DOMContentLoaded', function() {
    renderThumbnails();

    // Load existing variants or add default ones
    const existingVariants = <%- JSON.stringify(product.variants || []) %>;
    if (existingVariants && existingVariants.length > 0) {
      existingVariants.forEach(variant => {
        // Use actual basePrice from database, fallback to regularPrice only if truly missing
        const basePrice = variant.basePrice || <%= product.regularPrice %>;
        const variantSpecificOffer = variant.variantSpecificOffer || variant.productOffer || 0;
        addVariant(variant.size, variant.stock, basePrice.toString(), variantSpecificOffer.toString());
      });
    } else {
      // Add default variants if none exist
      const defaultSizes = ['UK 6', 'UK 7', 'UK 8', 'UK 9', 'UK 10'];
      const defaultStocks = [10, 15, 20, 12, 8];
      defaultSizes.forEach((size, index) => {
        addVariant(size, defaultStocks[index].toString(), '5000', '0');
      });
    }
  });

</script>
