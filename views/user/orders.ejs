<div class="container py-4">
  <!-- Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'My Profile', href: '/profile' },
      { label: 'My Orders' }
    ]
  }) %>

  <!-- Main Layout: Sidebar + Content -->
  <div class="row g-4">
    <!-- Left Sidebar Navigation -->
    <div class="col-lg-3 col-md-4">
      <%- include('partials/profile-sidebar.ejs', { user: user, active: 'orders' }) %>
    </div>

    <!-- Main Content Area -->
    <div class="col-lg-9 col-md-8">
      <div class="profile-content">
        <div class="content-card">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="content-title">My Orders</h2>
            <div class="d-flex gap-2">
              <select class="form-select" id="orderStatusFilter" style="width: auto;">
                <option value="">All Orders</option>
                <option value="Pending">Pending</option>
                <option value="Processing">Processing</option>
                <option value="Shipped">Shipped</option>
                <option value="Delivered">Delivered</option>
                <option value="Cancelled">Cancelled</option>
                <option value="Returned">Returned</option>
              </select>
            </div>
          </div>

          <!-- Orders Container -->
          <div id="ordersContainer">
            <% if (orderItems && orderItems.length > 0) { %>
              <% orderItems.forEach(item => { %>
                <%- include('partials/order-card', { item: item }) %>
              <% }) %>
            <% } else { %>
              <!-- Empty State -->
              <div class="text-center py-5" id="emptyState">
                <div class="mb-4">
                  <i class="bi bi-bag-x display-1 text-muted"></i>
                </div>
                <h4 class="text-muted mb-3">No Orders Found</h4>
                <p class="text-muted mb-4">You haven't placed any orders yet. Start shopping to see your orders here!</p>
                <a href="/shop" class="btn btn-primary">
                  <i class="bi bi-shop me-2"></i>Start Shopping
                </a>
              </div>
            <% } %>
          </div>

          <!-- Pagination -->
          <% if (totalPages > 1) { %>
            <div class="row mt-4">
              <div class="col-12">
                <%- include('partials/pagination', {
                  currentPage: currentPage,
                  totalPages: totalPages
                }) %>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- Order Actions Modal -->
<div class="modal fade" id="orderActionModal" tabindex="-1" aria-labelledby="orderActionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderActionModalLabel">Order Action</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="orderActionModalBody">
        <!-- Dynamic content will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="confirmOrderAction">Confirm</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Profile Content Styles */
.profile-content {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
  overflow: hidden;
}

.content-card {
  padding: 2rem;
}

.content-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #000;
  margin-bottom: 0;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e9ecef;
}

/* Order Card Styles */
.order-card {
  transition: all 0.3s ease;
  cursor: pointer;
}

.order-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
}

.order-card .card {
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e9ecef;
}

.order-card .card-body {
  padding: 1.5rem;
}

/* Product Thumbnail */
.product-thumb {
  width: 50px;
  height: 50px;
  object-fit: cover;
  border-radius: 8px;
  border: 1px solid #e9ecef;
}

.product-thumb-placeholder {
  width: 50px;
  height: 50px;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6c757d;
}

.product-info {
  flex: 1;
  min-width: 0;
}

.product-info .fw-semibold {
  font-size: 0.9rem;
  line-height: 1.3;
  margin-bottom: 0.25rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Order Info */
.order-info h6 {
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

/* Status & Amount */
.status-amount .badge {
  font-weight: 500;
  letter-spacing: 0.5px;
  display: inline-block;
  margin-bottom: 0.5rem;
}

.status-amount .fs-5 {
  font-size: 1.25rem !important;
  margin-bottom: 0.25rem;
}

/* Order Actions */
.order-actions .btn {
  font-size: 0.875rem;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-weight: 500;
}

.order-actions .btn-primary {
  background-color: #000;
  border-color: #000;
}

.order-actions .btn-primary:hover {
  background-color: #dc3545;
  border-color: #dc3545;
}

.order-actions .btn-outline-danger:hover,
.order-actions .btn-outline-info:hover,
.order-actions .btn-outline-success:hover,
.order-actions .btn-outline-warning:hover {
  transform: translateY(-1px);
}

/* Badge Colors */
.badge {
  font-weight: 500;
  letter-spacing: 0.5px;
}

/* Responsive Design */
@media (max-width: 992px) {
  .order-card .card-body {
    padding: 1.25rem;
  }
  
  .status-amount {
    text-align: left !important;
  }
  
  .order-actions {
    margin-top: 1rem;
  }
}

@media (max-width: 768px) {
  .order-card .card-body {
    padding: 1rem;
  }
  
  .product-thumb,
  .product-thumb-placeholder {
    width: 40px;
    height: 40px;
  }
  
  .product-info .fw-semibold {
    font-size: 0.85rem;
  }
  
  .status-amount .fs-5 {
    font-size: 1.1rem !important;
  }
  
  .order-actions .btn {
    font-size: 0.8rem;
    padding: 0.4rem 0.8rem;
  }
  
  .order-actions {
    flex-direction: row !important;
  }
  
  .order-actions .btn:first-child {
    margin-bottom: 0;
    margin-right: 0.5rem;
  }
}

@media (max-width: 576px) {
  .order-card .row > div {
    margin-bottom: 1rem;
  }
  
  .order-card .row > div:last-child {
    margin-bottom: 0;
  }
  
  .order-actions {
    flex-direction: column !important;
  }
  
  .order-actions .btn:first-child {
    margin-bottom: 0.5rem;
    margin-right: 0;
  }
}

/* Click effect for order cards */
.order-card:active {
  transform: translateY(0);
}

/* Hover effect for View Details button */
.order-actions .btn-primary:hover {
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
}
</style>

<script>
  const cancellationReasons = <%- JSON.stringify(cancellationReasons) %>;
  const returnReasons = <%- JSON.stringify(returnReasons) %>;
</script>

<script>
// Global variables for pagination and filtering
let currentPage = 1;
let isLoading = false;

document.addEventListener('DOMContentLoaded', function() {
  // Set up pagination callbacks for the user pagination partial
  window.fetchCallback = loadOrders;
  window.paginationCallback = loadOrders;

  // Order status filter
  const statusFilter = document.getElementById('orderStatusFilter');
  
  statusFilter.addEventListener('change', function() {
    loadOrders(1, this.value); // Reset to page 1 when filter changes
  });
});

// Load orders via AJAX
// Load orders via AJAX
async function loadOrders(page = 1, status = '') {
  if (isLoading) return;
  
  isLoading = true;
  showLoadingState();
  
  try {
    // Get current filter if not provided
    if (!status) {
      const statusFilter = document.getElementById('orderStatusFilter');
      status = statusFilter.value;
    }
    
    // Build query parameters
    const params = new URLSearchParams();
    params.append('page', page);
    if (status) params.append('status', status);
    
    // Make API request
    const response = await fetch(`/orders/api/filtered?${params.toString()}`);
    const result = await response.json();
    
    if (result.success) {
      updateOrdersContainer(result.data.orderItems);
      currentPage = result.data.currentPage;
      
      // ✅ FIX: Update pagination UI and remove loading states
      if (window.PaginationUtils && result.data.totalPages) {
        window.PaginationUtils.updateState(result.data.currentPage, result.data.totalPages);
      }
      
      // ✅ FIX: Update pagination container if it exists
      updatePaginationContainer(result.data);
      
    } else {
      throw new Error(result.message || 'Failed to load orders');
    }
  } catch (error) {
    console.error('Error loading orders:', error);
    showToast.error('Error loading orders. Please try again.');
    
    // ✅ FIX: Remove loading states from pagination buttons on error
    if (window.PaginationUtils) {
      const loadingButtons = document.querySelectorAll('.page-link[data-original-content]');
      loadingButtons.forEach(button => window.PaginationUtils.removeLoading(button));
    }
  } finally {
    isLoading = false;
    hideLoadingState();
  }
}

function updatePaginationContainer(data) {
  const paginationContainer = document.querySelector('.pagination');
  if (!paginationContainer || !data.totalPages || data.totalPages <= 1) {
    return;
  }

  // Update pagination data attributes
  paginationContainer.dataset.totalPages = data.totalPages;
  
  // If pagination structure needs to be regenerated (for dynamic pages)
  if (data.totalPages !== parseInt(paginationContainer.dataset.totalPages)) {
    regeneratePagination(data.currentPage, data.totalPages);
  }
}

// ✅ NEW: Regenerate pagination if total pages changed
function regeneratePagination(currentPage, totalPages) {
  const paginationWrapper = document.querySelector('.pagination').closest('nav').parentElement;
  if (!paginationWrapper) return;
  
  let paginationHTML = `
    <div class="row mt-4">
      <div class="col-12">
        <nav class="mt-4">
          <ul class="pagination justify-content-center" id="pagination-container" data-total-pages="${totalPages}">
            <!-- Previous Button -->
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
              <a class="page-link pagination-btn ${currentPage === 1 ? 'disabled-btn' : ''}"
                 href="#"
                 data-page="${currentPage - 1}"
                 ${currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : ''}>
                <i class="bi bi-chevron-left"></i>
              </a>
            </li>
  `;
  
  for (let i = 1; i <= totalPages; i++) {
    paginationHTML += `
      <li class="page-item ${i === currentPage ? 'active' : ''}">
        <a class="page-link pagination-btn" href="#" data-page="${i}">${i}</a>
      </li>
    `;
  }
  
  paginationHTML += `
            <!-- Next Button -->
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
              <a class="page-link pagination-btn ${currentPage === totalPages ? 'disabled-btn' : ''}"
                 href="#"
                 data-page="${currentPage + 1}"
                 ${currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : ''}>
                <i class="bi bi-chevron-right"></i>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  `;
  
  paginationWrapper.innerHTML = paginationHTML;
}

// Show loading state
function showLoadingState() {
  const container = document.getElementById('ordersContainer');
  container.innerHTML = `
    <div class="text-center py-5">
      <div class="loading-state">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Loading your orders...</p>
      </div>
    </div>
  `;
}

// Hide loading state
function hideLoadingState() {
  // ✅ ENHANCED: Also remove pagination button loading states
  if (window.PaginationUtils) {
    const loadingButtons = document.querySelectorAll('.page-link[data-original-content]');
    loadingButtons.forEach(button => window.PaginationUtils.removeLoading(button));
  }
}

// Update orders container
function updateOrdersContainer(orderItems) {
  const container = document.getElementById('ordersContainer');
  
  if (!orderItems || orderItems.length === 0) {
    container.innerHTML = `
      <div class="text-center py-5" id="emptyState">
        <div class="mb-4">
          <i class="bi bi-funnel display-1 text-muted"></i>
        </div>
        <h4 class="text-muted mb-3">No Orders Found</h4>
        <p class="text-muted mb-4">No orders match the selected filter criteria.</p>
        <button class="btn btn-outline-primary" onclick="clearFilter()">
          <i class="bi bi-arrow-clockwise me-2"></i>Clear Filter
        </button>
      </div>
    `;
    return;
  }
  
  // Generate order cards HTML
  let cardsHTML = '';
  orderItems.forEach(item => {
    cardsHTML += generateOrderCardHTML(item);
  });
  
  container.innerHTML = cardsHTML;
}

// Generate order card HTML (matches your existing partial structure)
function generateOrderCardHTML(item) {
  const orderDate = new Date(item.orderDate);
  const formattedDate = orderDate.toLocaleDateString('en-IN', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  });
  
  const productImageHTML = item.productImage 
    ? `<img src="${item.productImage}" alt="${item.productName}" class="product-thumb me-3">`
    : `<div class="product-thumb-placeholder me-3"><i class="bi bi-image"></i></div>`;
  
  const statusClass = 
    item.status === 'Delivered' ? 'success' : 
    item.status === 'Shipped' ? 'info' : 
    item.status === 'Processing' ? 'warning' : 
    item.status === 'Processing Return' ? 'warning' :
    item.status === 'Cancelled' ? 'danger' : 
    item.status === 'Returned' ? 'secondary' : 'secondary';
  
  // Generate action buttons based on status
  let actionButtons = `
    <button class="btn btn-primary btn-sm" onclick="viewOrderDetails('${item.orderId}')">
      <i class="bi bi-eye me-1"></i>View Details
    </button>
    <div class="d-flex gap-2">
  `;
  
  if (item.status === 'Pending' || item.status === 'Processing') {
    actionButtons += `
      <button class="btn btn-outline-danger btn-sm flex-fill" onclick="cancelItem('${item.orderId}', '${item.itemId}')">
        <i class="bi bi-x-circle me-1"></i>Cancel
      </button>
    `;
  }
  
  if (item.status === 'Shipped') {
    actionButtons += `
      <button class="btn btn-outline-info btn-sm flex-fill" onclick="trackOrder('${item.orderId}')">
        <i class="bi bi-truck me-1"></i>Track
      </button>
    `;
  }
  
  if (item.status === 'Delivered') {
    if (item.returnRequest) {
      const returnStatusClass = 
        item.returnRequest.status === 'Pending' ? 'warning' : 
        item.returnRequest.status === 'Approved' ? 'success' : 
        item.returnRequest.status === 'Rejected' ? 'danger' : 'secondary';
      
      actionButtons += `
        <span class="badge bg-${returnStatusClass} flex-fill text-center py-2">
          <i class="bi bi-arrow-return-left me-1"></i>
          Return ${item.returnRequest.status}
        </span>
      `;
    } else {
      actionButtons += `
        <button class="btn btn-outline-warning btn-sm flex-fill" onclick="returnItem('${item.orderId}', '${item.itemId}')">
          <i class="bi bi-arrow-return-left me-1"></i>Return
        </button>
      `;
    }
    
    actionButtons += `
      <button class="btn btn-outline-success btn-sm flex-fill" onclick="downloadInvoice('${item.orderId}')">
        <i class="bi bi-download me-1"></i>Invoice
      </button>
    `;
  }
  
  actionButtons += `</div>`;
  
  return `
    <div class="order-card mb-3" data-status="${item.status}">
      <div class="card border-0 shadow-sm">
        <div class="card-body p-4">
          <div class="row align-items-center">
            <!-- Order Info -->
            <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
              <div class="order-info">
                <h6 class="mb-1 fw-bold text-dark">Order #${item.orderId}</h6>
                <small class="text-muted">
                  <i class="bi bi-calendar3 me-1"></i>
                  ${formattedDate}
                </small>
                <div class="mt-1">
                  <small class="text-muted">Size: ${item.size} | Qty: ${item.quantity}</small>
                </div>
              </div>
            </div>

            <!-- Product Preview -->
            <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
              <div class="product-preview d-flex align-items-center">
                ${productImageHTML}
                <div class="product-info">
                  <div class="fw-semibold text-dark">
                    ${item.productName}
                  </div>
                  <small class="text-muted">SKU: ${item.sku}</small>
                </div>
              </div>
            </div>

            <!-- Status & Amount -->
            <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
              <div class="status-amount text-center">
                <span class="badge bg-${statusClass} fs-6 px-3 py-2 mb-2">
                  ${item.status}
                </span>
                <div class="fw-bold text-dark fs-5">₹${item.totalPrice.toLocaleString('en-IN')}</div>
                <small class="text-muted text-uppercase">
                  ${item.paymentMethod === 'cod' ? 'Cash on Delivery' : item.paymentMethod}
                </small>
              </div>
            </div>

            <!-- Actions -->
            <div class="col-lg-3 col-md-6">
              <div class="order-actions d-flex flex-column gap-2">
                ${actionButtons}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
}

// Clear filter function
function clearFilter() {
  document.getElementById('orderStatusFilter').value = '';
  loadOrders(1, '');
}

// Order action functions
function cancelItem(orderId, itemId) {
  //  Convert array to object for SweetAlert inputOptions
  const reasonOptions = cancellationReasons.reduce((options, reason, index) => {
    options[reason] = reason;
    return options;
  }, {});

  Swal.fire({
    title: 'Cancel Item?',
    text: 'Please select a reason for cancelling this item.',
    icon: 'warning',
    input: 'select',
    inputOptions: reasonOptions,  
    inputPlaceholder: 'Select a reason for cancellation',
    inputValidator: (value) => {
      return new Promise((resolve) => {
        if (!value || value === '') {
          resolve('Please select a reason for cancellation');
        } else {
          resolve();
        }
      });
    },
    showCancelButton: true,
    confirmButtonColor: '#dc3545',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Yes, Cancel Item',
    cancelButtonText: 'Keep Item'
  }).then((result) => {
    if (result.isConfirmed) {
      // Show loading
      Swal.fire({
        title: 'Cancelling Item...',
        text: 'Please wait while we process your request.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      console.log('Selected Reason:', result.value);  
      console.log('Type of Reason:', typeof result.value);  
      fetch(`/orders/${orderId}/items/${itemId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'cancel',
          reason: result.value  
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Item Cancelled',
            text: 'Your item has been successfully cancelled.',
            confirmButtonColor: '#28a745'
          }).then(() => {
            // Refresh current page instead of full reload
            loadOrders(currentPage);
          });
        } else {
          throw new Error(data.message || 'Failed to cancel item');
        }
      })
      .catch(error => {
        console.error('Error cancelling item:', error);
        Swal.fire({
          icon: 'error',
          title: 'Cancellation Failed',
          text: error.message || 'Failed to cancel item. Please try again.',
          confirmButtonColor: '#dc3545'
        });
      });
    }
  });
}

function returnItem(orderId, itemId) {
  // Convert array to object for SweetAlert inputOptions
  const reasonOptions = returnReasons.reduce((options, reason, index) => {
    options[reason] = reason;
    return options;
  }, {});

  Swal.fire({
    title: 'Return Item?',
    text: 'Please select a reason for returning this item.',
    icon: 'warning',
    input: 'select',
    inputOptions: reasonOptions,
    inputPlaceholder: 'Select a reason for return',
    inputValidator: (value) => {
      return new Promise((resolve) => {
        if (!value || value === '') {
          resolve('Please select a reason for return');
        } else {
          resolve();
        }
      });
    },
    showCancelButton: true,
    confirmButtonColor: '#ffc107',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Yes, Return Item',
    cancelButtonText: 'Keep Item'
  }).then((result) => {
    if (result.isConfirmed) {
      // Show loading
      Swal.fire({
        title: 'Processing Return...',
        text: 'Please wait while we process your return request.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      //  POST method, /returns path
      fetch(`/orders/${orderId}/items/${itemId}/returns`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reason: result.value
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Return Request Submitted',
            text: 'Your return request has been sent for approval.',
            confirmButtonColor: '#28a745'
          }).then(() => {
            // Refresh current page instead of full reload
            loadOrders(currentPage);
          });
        } else {
          throw new Error(data.message || 'Failed to return item');
        }
      })
      .catch(error => {
        console.error('Error returning item:', error);
        Swal.fire({
          icon: 'error',
          title: 'Return Failed',
          text: error.message || 'Failed to return item. Please try again.',
          confirmButtonColor: '#dc3545'
        });
      });
    }
  });
}

function trackOrder(orderId) {
  // Implement order tracking functionality
  Swal.fire({
    icon: 'info',
    title: 'Order Tracking',
    text: 'Order tracking feature coming soon!',
    confirmButtonColor: '#007bff'
  });
}

function downloadInvoice(orderId) {
  // Implement invoice download functionality
  window.open(`/orders/${orderId}/invoice`, '_blank');
}

function viewOrderDetails(orderId) {
  // Implement order details view
  window.location.href = `/orders/${orderId}`;
}

// Add smooth scrolling for better UX
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  });
});
</script>
