<div class="container py-4">
  <!-- Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'My Profile', href: '/profile' },
      { label: 'My Orders' }
    ]
  }) %>

  <!-- Main Layout: Sidebar + Content -->
  <div class="row g-4">
    <!-- Left Sidebar Navigation -->
    <div class="col-lg-3 col-md-4">
      <%- include('partials/profile-sidebar.ejs', { user: user, active: 'orders' }) %>
    </div>

    <!-- Main Content Area -->
    <div class="col-lg-9 col-md-8">
      <div class="profile-content">
        <div class="content-card">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="content-title">My Orders</h2>
            <div class="d-flex gap-2">
              <select class="form-select" id="orderStatusFilter" style="width: auto;">
                <option value="">All Orders</option>
                <option value="Pending">Pending</option>
                <option value="Processing">Processing</option>
                <option value="Shipped">Shipped</option>
                <option value="Delivered">Delivered</option>
                <option value="Cancelled">Cancelled</option>
                <option value="Returned">Returned</option>
              </select>
            </div>
          </div>

          <% if (orderItems && orderItems.length > 0) { %>
            <div id="ordersContainer">
          <% orderItems.forEach(item => { %>
            <div class="order-card mb-3" data-status="<%= item.status %>">
              <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                  <div class="row align-items-center">
                    <!-- Order Info -->
                    <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
                      <div class="order-info">
                        <h6 class="mb-1 fw-bold text-dark">Order #<%= item.orderId %></h6>
                        <small class="text-muted">
                          <i class="bi bi-calendar3 me-1"></i>
                          <%= new Date(item.orderDate).toLocaleDateString('en-IN', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric' 
                          }) %>
                        </small>
                        <div class="mt-1">
                          <small class="text-muted">Size: <%= item.size %> | Qty: <%= item.quantity %></small>
                        </div>
                      </div>
                    </div>

                    <!-- Product Preview -->
                    <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
                      <div class="product-preview d-flex align-items-center">
                        <% if (item.productImage) { %>
                          <img src="<%= item.productImage %>" 
                               alt="<%= item.productName %>" 
                               class="product-thumb me-3">
                        <% } else { %>
                          <div class="product-thumb-placeholder me-3">
                            <i class="bi bi-image"></i>
                          </div>
                        <% } %>
                        <div class="product-info">
                          <div class="fw-semibold text-dark">
                            <%= item.productName %>
                          </div>
                          <small class="text-muted">SKU: <%= item.sku %></small>
                        </div>
                      </div>
                    </div>

                    <!-- Status & Amount -->
                    <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
                      <div class="status-amount text-center">
                        <span class="badge bg-<%= 
                          item.status === 'Delivered' ? 'success' : 
                          item.status === 'Shipped' ? 'info' : 
                          item.status === 'Processing' ? 'warning' : 
                          item.status === 'Cancelled' ? 'danger' : 
                          item.status === 'Returned' ? 'secondary' : 'secondary' 
                        %> fs-6 px-3 py-2 mb-2">
                          <%= item.status %>
                        </span>
                        <div class="fw-bold text-dark fs-5">â‚¹<%= item.totalPrice.toLocaleString('en-IN') %></div>
                        <small class="text-muted text-uppercase">
                          <%= item.paymentMethod === 'cod' ? 'Cash on Delivery' : item.paymentMethod %>
                        </small>
                      </div>
                    </div>

                    <!-- Actions -->
                    <div class="col-lg-3 col-md-6">
                      <div class="order-actions d-flex flex-column gap-2">
                        <button class="btn btn-primary btn-sm" onclick="viewOrderDetails('<%= item.orderId %>')">
                          <i class="bi bi-eye me-1"></i>View Details
                        </button>
                        
                        <div class="d-flex gap-2">
                          <% if (item.status === 'Pending' || item.status === 'Processing') { %>
                            <button class="btn btn-outline-danger btn-sm flex-fill" onclick="cancelItem('<%= item.orderId %>', '<%= item.itemId %>')">
                              <i class="bi bi-x-circle me-1"></i>Cancel
                            </button>
                          <% } %>
                          
                          <% if (item.status === 'Shipped') { %>
                            <button class="btn btn-outline-info btn-sm flex-fill" onclick="trackOrder('<%= item.orderId %>')">
                              <i class="bi bi-truck me-1"></i>Track
                            </button>
                          <% } %>
                          
                          <% if (item.status === 'Delivered') { %>
                            <% if (item.returnRequest) { %>
                              <span class="badge bg-<%= 
                                item.returnRequest.status === 'Pending' ? 'warning' : 
                                item.returnRequest.status === 'Approved' ? 'success' : 
                                item.returnRequest.status === 'Rejected' ? 'danger' : 'secondary' 
                              %> flex-fill text-center py-2">
                                <i class="bi bi-arrow-return-left me-1"></i>
                                Return <%= item.returnRequest.status %>
                              </span>
                            <% } else { %>
                              <button class="btn btn-outline-warning btn-sm flex-fill" onclick="returnItem('<%= item.orderId %>', '<%= item.itemId %>')">
                                <i class="bi bi-arrow-return-left me-1"></i>Return
                              </button>
                            <% } %>
                            <button class="btn btn-outline-success btn-sm flex-fill" onclick="downloadInvoice('<%= item.orderId %>')">
                              <i class="bi bi-download me-1"></i>Invoice
                            </button>
                          <% } %>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>

        <!-- Pagination (if needed) -->
        <div class="d-flex justify-content-center mt-4">
          <nav aria-label="Orders pagination">
            <!-- Add pagination here if implementing server-side pagination -->
          </nav>
        </div>

      <% } else { %>
        <!-- Empty State -->
        <div class="text-center py-5">
          <div class="mb-4">
            <i class="bi bi-bag-x display-1 text-muted"></i>
          </div>
          <h4 class="text-muted mb-3">No Orders Found</h4>
          <p class="text-muted mb-4">You haven't placed any orders yet. Start shopping to see your orders here!</p>
          <a href="/shop" class="btn btn-primary">
            <i class="bi bi-shop me-2"></i>Start Shopping
          </a>
        </div>
      <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Order Actions Modal -->
<div class="modal fade" id="orderActionModal" tabindex="-1" aria-labelledby="orderActionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderActionModalLabel">Order Action</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="orderActionModalBody">
        <!-- Dynamic content will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="confirmOrderAction">Confirm</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Profile Content Styles */
.profile-content {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
  overflow: hidden;
}

.content-card {
  padding: 2rem;
}

.content-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #000;
  margin-bottom: 0;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e9ecef;
}

/* Order Card Styles */
.order-card {
  transition: all 0.3s ease;
  cursor: pointer;
}

.order-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
}

.order-card .card {
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e9ecef;
}

.order-card .card-body {
  padding: 1.5rem;
}

/* Product Thumbnail */
.product-thumb {
  width: 50px;
  height: 50px;
  object-fit: cover;
  border-radius: 8px;
  border: 1px solid #e9ecef;
}

.product-thumb-placeholder {
  width: 50px;
  height: 50px;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6c757d;
}

.product-info {
  flex: 1;
  min-width: 0;
}

.product-info .fw-semibold {
  font-size: 0.9rem;
  line-height: 1.3;
  margin-bottom: 0.25rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Order Info */
.order-info h6 {
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

/* Status & Amount */
.status-amount .badge {
  font-weight: 500;
  letter-spacing: 0.5px;
  display: inline-block;
  margin-bottom: 0.5rem;
}

.status-amount .fs-5 {
  font-size: 1.25rem !important;
  margin-bottom: 0.25rem;
}

/* Order Actions */
.order-actions .btn {
  font-size: 0.875rem;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-weight: 500;
}

.order-actions .btn-primary {
  background-color: #000;
  border-color: #000;
}

.order-actions .btn-primary:hover {
  background-color: #dc3545;
  border-color: #dc3545;
}

.order-actions .btn-outline-danger:hover,
.order-actions .btn-outline-info:hover,
.order-actions .btn-outline-success:hover,
.order-actions .btn-outline-warning:hover {
  transform: translateY(-1px);
}

/* Badge Colors */
.badge {
  font-weight: 500;
  letter-spacing: 0.5px;
}

/* Responsive Design */
@media (max-width: 992px) {
  .order-card .card-body {
    padding: 1.25rem;
  }
  
  .status-amount {
    text-align: left !important;
  }
  
  .order-actions {
    margin-top: 1rem;
  }
}

@media (max-width: 768px) {
  .order-card .card-body {
    padding: 1rem;
  }
  
  .product-thumb,
  .product-thumb-placeholder {
    width: 40px;
    height: 40px;
  }
  
  .product-info .fw-semibold {
    font-size: 0.85rem;
  }
  
  .status-amount .fs-5 {
    font-size: 1.1rem !important;
  }
  
  .order-actions .btn {
    font-size: 0.8rem;
    padding: 0.4rem 0.8rem;
  }
  
  .order-actions {
    flex-direction: row !important;
  }
  
  .order-actions .btn:first-child {
    margin-bottom: 0;
    margin-right: 0.5rem;
  }
}

@media (max-width: 576px) {
  .order-card .row > div {
    margin-bottom: 1rem;
  }
  
  .order-card .row > div:last-child {
    margin-bottom: 0;
  }
  
  .order-actions {
    flex-direction: column !important;
  }
  
  .order-actions .btn:first-child {
    margin-bottom: 0.5rem;
    margin-right: 0;
  }
}

/* Click effect for order cards */
.order-card:active {
  transform: translateY(0);
}

/* Hover effect for View Details button */
.order-actions .btn-primary:hover {
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Order status filter
  const statusFilter = document.getElementById('orderStatusFilter');
  const orderCards = document.querySelectorAll('.order-card');

  statusFilter.addEventListener('change', function() {
    const selectedStatus = this.value;
    
    orderCards.forEach(card => {
      const cardStatus = card.getAttribute('data-status');
      
      if (selectedStatus === '' || cardStatus === selectedStatus) {
        card.style.display = 'block';
        // Add fade in animation
        card.style.opacity = '0';
        setTimeout(() => {
          card.style.opacity = '1';
        }, 100);
      } else {
        card.style.display = 'none';
      }
    });

    // Show/hide empty state if no orders match filter
    const visibleCards = Array.from(orderCards).filter(card => card.style.display !== 'none');
    if (visibleCards.length === 0 && selectedStatus !== '') {
      showEmptyFilterState();
    } else {
      hideEmptyFilterState();
    }
  });

  function showEmptyFilterState() {
    const container = document.getElementById('ordersContainer');
    if (!document.getElementById('emptyFilterState')) {
      const emptyState = document.createElement('div');
      emptyState.id = 'emptyFilterState';
      emptyState.className = 'text-center py-5';
      emptyState.innerHTML = `
        <div class="mb-4">
          <i class="bi bi-funnel display-1 text-muted"></i>
        </div>
        <h4 class="text-muted mb-3">No Orders Found</h4>
        <p class="text-muted mb-4">No orders match the selected filter criteria.</p>
        <button class="btn btn-outline-primary" onclick="document.getElementById('orderStatusFilter').value = ''; document.getElementById('orderStatusFilter').dispatchEvent(new Event('change'));">
          <i class="bi bi-arrow-clockwise me-2"></i>Clear Filter
        </button>
      `;
      container.appendChild(emptyState);
    }
  }

  function hideEmptyFilterState() {
    const emptyState = document.getElementById('emptyFilterState');
    if (emptyState) {
      emptyState.remove();
    }
  }
});

// Order action functions
function cancelItem(orderId, itemId) {
  Swal.fire({
    title: 'Cancel Item?',
    text: 'Are you sure you want to cancel this item? This action cannot be undone.',
    icon: 'warning',
    input: 'textarea',
    inputLabel: 'Reason for cancellation (optional)',
    inputPlaceholder: 'Please provide a reason for cancelling this item...',
    showCancelButton: true,
    confirmButtonColor: '#dc3545',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Yes, Cancel Item',
    cancelButtonText: 'Keep Item'
  }).then((result) => {
    if (result.isConfirmed) {
      // Show loading
      Swal.fire({
        title: 'Cancelling Item...',
        text: 'Please wait while we process your request.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      // Make API call to cancel item
      fetch(`/cancel-item/${orderId}/${itemId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reason: result.value || ''
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Item Cancelled',
            text: 'Your item has been successfully cancelled.',
            confirmButtonColor: '#28a745'
          }).then(() => {
            location.reload();
          });
        } else {
          throw new Error(data.message || 'Failed to cancel item');
        }
      })
      .catch(error => {
        console.error('Error cancelling item:', error);
        Swal.fire({
          icon: 'error',
          title: 'Cancellation Failed',
          text: error.message || 'Failed to cancel item. Please try again.',
          confirmButtonColor: '#dc3545'
        });
      });
    }
  });
}

function returnItem(orderId, itemId) {
  Swal.fire({
    title: 'Return Item?',
    text: 'Are you sure you want to return this item?',
    icon: 'warning',
    input: 'textarea',
    inputLabel: 'Reason for return (optional)',
    inputPlaceholder: 'Please provide a reason for returning this item...',
    showCancelButton: true,
    confirmButtonColor: '#ffc107',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Yes, Return Item',
    cancelButtonText: 'Keep Item'
  }).then((result) => {
    if (result.isConfirmed) {
      // Show loading
      Swal.fire({
        title: 'Processing Return...',
        text: 'Please wait while we process your return request.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      // Make API call to return item
      fetch(`/return-item/${orderId}/${itemId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reason: result.value || ''
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Return Request Sent for approval',
            text: 'Your return request has been sent for approval.',
            confirmButtonColor: '#28a745'
          }).then(() => {
            location.reload();
          });
        } else {
          throw new Error(data.message || 'Failed to return item');
        }
      })
      .catch(error => {
        console.error('Error returning item:', error);
        Swal.fire({
          icon: 'error',
          title: 'Return Failed',
          text: error.message || 'Failed to return item. Please try again.',
          confirmButtonColor: '#dc3545'
        });
      });
    }
  });
}

function trackOrder(orderId) {
  // Implement order tracking functionality
  Swal.fire({
    icon: 'info',
    title: 'Order Tracking',
    text: 'Order tracking feature coming soon!',
    confirmButtonColor: '#007bff'
  });
}

function downloadInvoice(orderId) {
  // Implement invoice download functionality
  window.open(`/download-invoice/${orderId}`, '_blank');
}

function viewOrderDetails(orderId) {
  // Implement order details view
  window.location.href = `/order-details/${orderId}`;
}

// Add smooth scrolling for better UX
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  });
});
</script>