<div class="container py-4">
  <!-- Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'My Profile', href: '/profile' },
      { label: 'Change Password' }
    ]
  }) %>

  <!-- Main Layout: Sidebar + Content -->
  <div class="row g-4">
    <!-- Left Sidebar Navigation -->
    <div class="col-lg-3 col-md-4">
      <%- include('partials/profile-sidebar.ejs', { user: user, active: 'change-password' }) %>
    </div>

    <!-- Main Content Area -->
    <div class="col-lg-9 col-md-8">
      <div class="profile-content">
        <!-- Change Password Section -->
        <div class="content-card">
          <h2 class="content-title">
            <i class="bi bi-shield-lock me-2"></i>
            Change Password
          </h2>
          
          <div class="password-intro mb-4">
            <div class="alert alert-info border-0" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);">
              <div class="d-flex align-items-center">
                <i class="bi bi-info-circle me-3" style="font-size: 1.5rem; color: #0d6efd;"></i>
                <div>
                  <h6 class="mb-1">Secure Your Account</h6>
                  <p class="mb-0 text-muted">Choose a strong password to protect your account. Your password should be unique and not used elsewhere.</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Change Password Form -->
          <form id="changePasswordForm" class="password-form">
            <div class="row g-4">
              <!-- Current Password -->
              <div class="col-12">
                <label for="currentPassword" class="form-label">Current Password <span class="text-danger">*</span></label>
                <div class="input-group">
                  <input type="password" 
                         class="form-control" 
                         id="currentPassword" 
                         name="currentPassword" 
                         required
                         placeholder="Enter your current password">
                  <button class="btn btn-outline-secondary password-toggle-btn" 
                          type="button" 
                          onclick="togglePassword('currentPassword')">
                    <i class="bi bi-eye" id="currentPassword-icon"></i>
                  </button>
                </div>
                <div class="invalid-feedback" id="currentPassword-error"></div>
              </div>

              <!-- New Password -->
              <div class="col-12">
                <label for="newPassword" class="form-label">New Password <span class="text-danger">*</span></label>
                <div class="input-group">
                  <input type="password" 
                         class="form-control" 
                         id="newPassword" 
                         name="newPassword" 
                         required
                         placeholder="Enter your new password">
                  <button class="btn btn-outline-secondary password-toggle-btn" 
                          type="button" 
                          onclick="togglePassword('newPassword')">
                    <i class="bi bi-eye" id="newPassword-icon"></i>
                  </button>
                </div>
                <div class="form-text">
                  Password must be at least 8 characters with uppercase, lowercase, number, and special character
                </div>
                <div class="invalid-feedback" id="newPassword-error"></div>
              </div>

              <!-- Confirm Password -->
              <div class="col-12">
                <label for="confirmPassword" class="form-label">Confirm New Password <span class="text-danger">*</span></label>
                <div class="input-group">
                  <input type="password" 
                         class="form-control" 
                         id="confirmPassword" 
                         name="confirmPassword" 
                         required
                         placeholder="Confirm your new password">
                  <button class="btn btn-outline-secondary password-toggle-btn" 
                          type="button" 
                          onclick="togglePassword('confirmPassword')">
                    <i class="bi bi-eye" id="confirmPassword-icon"></i>
                  </button>
                </div>
                <div class="invalid-feedback" id="confirmPassword-error"></div>
              </div>

              <!-- Password Strength Indicator -->
              <div class="col-12">
                <div class="password-strength-container" style="display: none;">
                  <label class="form-label">Password Strength</label>
                  <div class="progress" style="height: 8px;">
                    <div class="progress-bar" 
                         role="progressbar" 
                         id="passwordStrengthBar"
                         style="width: 0%"
                         aria-valuenow="0" 
                         aria-valuemin="0" 
                         aria-valuemax="100"></div>
                  </div>
                  <small class="text-muted" id="passwordStrengthText">Enter a password to see strength</small>
                </div>
              </div>
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
              <button type="submit" class="btn-save" id="updatePasswordBtn">
                <i class="bi bi-shield-check me-2"></i>
                Update Password
              </button>
              <a href="/profile" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-2"></i>
                Back to Profile
              </a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Profile Content Styles - Consistent with profile.ejs */
.profile-content {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
  overflow: hidden;
}

.content-card {
  padding: 2rem;
}

.content-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #000;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e9ecef;
  display: flex;
  align-items: center;
}

.password-form {
  max-width: 600px;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #333;
  font-size: 0.95rem;
}

.form-control {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 0.95rem;
  transition: all 0.3s ease;
  background-color: #fff;
}

.form-control:focus {
  outline: none;
  border-color: #000;
  box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
}

/* Input group styles */
.input-group .form-control {
  border-right: 0;
}

.input-group .form-control:focus {
  box-shadow: none;
  border-color: #000;
}

.input-group .form-control:focus + .password-toggle-btn {
  border-color: #000;
}

/* Password toggle button styling */
.password-toggle-btn {
  border-left: 0;
  cursor: pointer;
  transition: all 0.3s ease;
  background: #fff;
  border-color: #ddd;
}

.password-toggle-btn:hover {
  background-color: #dc3545;
  border-color: #dc3545;
  color: #fff;
}

.password-toggle-btn:focus {
  box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
}

/* Password strength indicator */
.password-strength-container {
  margin-top: 1rem;
}

.progress {
  border-radius: 4px;
  background-color: #e9ecef;
}

.progress-bar {
  transition: width 0.3s ease, background-color 0.3s ease;
}

/* Validation Styles */
.form-control.is-invalid {
  border-color: #dc3545;
  box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
}

.form-control.is-valid {
  border-color: #28a745;
  box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
}

.invalid-feedback {
  display: block;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875rem;
  color: #dc3545;
}

.form-text {
  margin-top: 0.25rem;
  font-size: 0.8rem;
  color: #6c757d;
}

.form-actions {
  margin-top: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e9ecef;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.btn-save {
  background-color: #000;
  color: #fff;
  border: none;
  padding: 0.875rem 2rem;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  text-decoration: none;
}

.btn-save:hover {
  background-color: #dc3545;
  transform: translateY(-1px);
}

.btn-save:active {
  transform: translateY(0);
}

.btn-save:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
  transform: none;
}

.btn-outline-secondary {
  border: 1px solid #6c757d;
  color: #6c757d;
  background: transparent;
  padding: 0.875rem 2rem;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  text-decoration: none;
  display: flex;
  align-items: center;
  transition: all 0.3s ease;
}

.btn-outline-secondary:hover {
  background-color: #dc3545;
  border-color: #dc3545;
  color: #fff;
}

/* Responsive Design */
@media (max-width: 768px) {
  .content-card {
    padding: 1.5rem;
  }
  
  .content-title {
    font-size: 1.3rem;
    margin-bottom: 1.5rem;
  }
  
  .password-form {
    max-width: 100%;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  .btn-save,
  .btn-outline-secondary {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 576px) {
  .content-card {
    padding: 1rem;
  }
  
  .form-control {
    font-size: 0.9rem;
  }
  
  .btn-save,
  .btn-outline-secondary {
    padding: 0.75rem 1.5rem;
    font-size: 0.9rem;
  }
}
</style>

<script>
// Password visibility toggle
function togglePassword(fieldId) {
  const field = document.getElementById(fieldId);
  const icon = document.getElementById(fieldId + '-icon');
  
  if (field.type === 'password') {
    field.type = 'text';
    icon.classList.remove('bi-eye');
    icon.classList.add('bi-eye-slash');
  } else {
    field.type = 'password';
    icon.classList.remove('bi-eye-slash');
    icon.classList.add('bi-eye');
  }
}

// Password strength checker
function checkPasswordStrength(password) {
  let strength = 0;
  let feedback = [];

  if (password.length >= 8) strength += 20;
  else feedback.push('At least 8 characters');

  if (/[a-z]/.test(password)) strength += 20;
  else feedback.push('Lowercase letter');

  if (/[A-Z]/.test(password)) strength += 20;
  else feedback.push('Uppercase letter');

  if (/\d/.test(password)) strength += 20;
  else feedback.push('Number');

  if (/[@$!%*?&]/.test(password)) strength += 20;
  else feedback.push('Special character');

  return { strength, feedback };
}

// Update password strength indicator
function updatePasswordStrength(password) {
  const container = document.querySelector('.password-strength-container');
  const bar = document.getElementById('passwordStrengthBar');
  const text = document.getElementById('passwordStrengthText');

  if (!password) {
    container.style.display = 'none';
    return;
  }

  container.style.display = 'block';
  const { strength, feedback } = checkPasswordStrength(password);

  bar.style.width = strength + '%';
  bar.setAttribute('aria-valuenow', strength);

  // Update color and text based on strength
  if (strength < 40) {
    bar.className = 'progress-bar bg-danger';
    text.textContent = 'Weak - Missing: ' + feedback.join(', ');
    text.className = 'text-danger';
  } else if (strength < 80) {
    bar.className = 'progress-bar bg-warning';
    text.textContent = 'Fair - Missing: ' + feedback.join(', ');
    text.className = 'text-warning';
  } else if (strength < 100) {
    bar.className = 'progress-bar bg-info';
    text.textContent = 'Good - Missing: ' + feedback.join(', ');
    text.className = 'text-info';
  } else {
    bar.className = 'progress-bar bg-success';
    text.textContent = 'Strong password!';
    text.className = 'text-success';
  }
}

// Form validation functions
function showError(fieldId, message) {
  const field = document.getElementById(fieldId);
  const errorElement = document.getElementById(fieldId + '-error');
  
  if (field && errorElement) {
    field.classList.add('is-invalid');
    field.classList.remove('is-valid');
    errorElement.textContent = message;
  }
}

function showSuccess(fieldId) {
  const field = document.getElementById(fieldId);
  const errorElement = document.getElementById(fieldId + '-error');
  
  if (field && errorElement) {
    field.classList.add('is-valid');
    field.classList.remove('is-invalid');
    errorElement.textContent = '';
  }
}

function clearError(fieldId) {
  const field = document.getElementById(fieldId);
  const errorElement = document.getElementById(fieldId + '-error');
  
  if (field && errorElement) {
    field.classList.remove('is-invalid', 'is-valid');
    errorElement.textContent = '';
  }
}

function clearAllErrors() {
  const fields = ['currentPassword', 'newPassword', 'confirmPassword'];
  fields.forEach(fieldId => clearError(fieldId));
}

// Password validation
function validatePassword(password) {
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  
  if (!password) {
    return 'Password is required';
  }
  
  if (password.length < 8) {
    return 'Password must be at least 8 characters long';
  }
  
  if (!passwordRegex.test(password)) {
    return 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character';
  }
  
  if (password.includes(' ')) {
    return 'Password cannot contain spaces';
  }
  
  return null;
}

// Real-time validation
document.getElementById('newPassword').addEventListener('input', function() {
  updatePasswordStrength(this.value);
  
  const error = validatePassword(this.value);
  if (error && this.value) {
    showError('newPassword', error);
  } else if (this.value) {
    showSuccess('newPassword');
  } else {
    clearError('newPassword');
  }
  
  // Check confirm password match
  const confirmPassword = document.getElementById('confirmPassword').value;
  if (confirmPassword && this.value !== confirmPassword) {
    showError('confirmPassword', 'Passwords do not match');
  } else if (confirmPassword && this.value === confirmPassword) {
    showSuccess('confirmPassword');
  }
});

document.getElementById('confirmPassword').addEventListener('input', function() {
  const newPassword = document.getElementById('newPassword').value;
  if (this.value && this.value !== newPassword) {
    showError('confirmPassword', 'Passwords do not match');
  } else if (this.value && this.value === newPassword) {
    showSuccess('confirmPassword');
  } else {
    clearError('confirmPassword');
  }
});

document.getElementById('currentPassword').addEventListener('input', function() {
  if (this.value) {
    clearError('currentPassword');
  }
});

// Form submission
document.getElementById('changePasswordForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  const currentPassword = document.getElementById('currentPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmPassword').value;

  // Clear previous errors
  clearAllErrors();

  // Validate form
  let hasErrors = false;

  if (!currentPassword) {
    showError('currentPassword', 'Current password is required');
    hasErrors = true;
  }

  const newPasswordError = validatePassword(newPassword);
  if (newPasswordError) {
    showError('newPassword', newPasswordError);
    hasErrors = true;
  }

  if (!confirmPassword) {
    showError('confirmPassword', 'Please confirm your new password');
    hasErrors = true;
  } else if (newPassword !== confirmPassword) {
    showError('confirmPassword', 'Passwords do not match');
    hasErrors = true;
  }

  if (hasErrors) {
    return;
  }

  // Disable button and show loading
  const updateBtn = document.getElementById('updatePasswordBtn');
  const originalText = updateBtn.innerHTML;
  updateBtn.disabled = true;
  updateBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Updating Password...';

  try {
    const response = await fetch('/profile/change-password', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        currentPassword,
        newPassword,
        confirmPassword
      })
    });

    const data = await response.json();

    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Password Updated!',
        text: 'Your password has been successfully changed.',
        confirmButtonColor: '#000'
      }).then(() => {
        window.location.href = '/profile';
      });
    } else {
      if (data.message.includes('Current password')) {
        showError('currentPassword', data.message);
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Failed to update password',
          confirmButtonColor: '#000'
        });
      }
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while updating password',
      confirmButtonColor: '#000'
    });
  } finally {
    updateBtn.disabled = false;
    updateBtn.innerHTML = originalText;
  }
});
</script>