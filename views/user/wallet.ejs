<div class="container py-4">
  <!-- Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'My Profile', href: '/profile' },
      { label: 'My Wallet' }
    ]
  }) %>

  <!-- Main Layout: Sidebar + Content -->
  <div class="row g-4">
    <!-- Left Sidebar Navigation -->
    <div class="col-lg-3 col-md-4">
      <%- include('partials/profile-sidebar.ejs', { user: user, active: 'wallet' }) %>
    </div>

    <!-- Main Content Area -->
    <div class="col-lg-9 col-md-8">
      <div class="wallet-content">
        <!-- Wallet Balance Card -->
        <div class="wallet-balance-card mb-4">
          <div class="card border-0 shadow-sm">
            <div class="card-body p-4">
              <div class="row align-items-center">
                <div class="col-md-8">
                  <h3 class="wallet-title mb-2">
                    <i class="bi bi-wallet2 me-2 text-primary"></i>
                    My Wallet
                  </h3>
                  <div class="balance-display">
                    <span class="balance-label">Available Balance</span>
                    <div class="balance-amount">₹<%= wallet.balance.toLocaleString('en-IN') %></div>
                  </div>
                </div>
                <div class="col-md-4 text-end">
                  <button class="btn btn-primary btn-lg" onclick="showAddMoneyModal()">
                    <i class="bi bi-plus-circle me-2"></i>Add Money
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Transaction History -->
        <div class="transaction-history-card">
          <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-bottom">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                  <i class="bi bi-clock-history me-2"></i>
                  Transaction History
                </h5>
                <div class="d-flex gap-2">
                  <select class="form-select form-select-sm" id="transactionFilter" style="width: auto;">
                    <option value="">All Transactions</option>
                    <option value="credit">Credits</option>
                    <option value="debit">Debits</option>
                  </select>
                </div>
              </div>
            </div>
            
            <!-- ✅ TRANSACTIONS CONTAINER: Will be updated via fetch -->
            <div class="card-body p-0" id="transactionsContainer">
              <!-- Initial loading state -->
              <div class="text-center py-5" id="initialLoading">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading transactions...</p>
              </div>
            </div>

            <!-- ✅ PAGINATION: Use the consistent pagination partial -->
            <% if (totalPages > 1) { %>
              <div class="card-footer bg-white" id="paginationContainer">
                <%- include('partials/pagination', {
                  currentPage: currentPage,
                  totalPages: totalPages
                }) %>
              </div>
            <% } else { %>
              <div class="card-footer bg-white" id="paginationContainer" style="display: none;">
                <!-- Pagination will be inserted here dynamically -->
              </div>
            <% } %>
            
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyModalLabel">
          <i class="bi bi-plus-circle me-2"></i>Add Money to Wallet
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addMoneyForm">
          <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <div class="input-group">
              <span class="input-group-text">₹</span>
              <input type="number" class="form-control" id="amount" name="amount" min="1" max="50000" required>
            </div>
            <div class="form-text">Minimum: ₹1, Maximum: ₹50,000</div>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description (Optional)</label>
            <input type="text" class="form-control" id="description" name="description" placeholder="e.g., Adding money for shopping">
          </div>
          <div class="quick-amounts mb-3">
            <label class="form-label">Quick Add</label>
            <div class="d-flex gap-2 flex-wrap">
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(500)">₹500</button>
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(1000)">₹1,000</button>
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(2000)">₹2,000</button>
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(5000)">₹5,000</button>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="addMoney()">
          <i class="bi bi-plus-circle me-2"></i>Add Money
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* Wallet Styles */
.wallet-content {
  background: #fff;
  border-radius: 12px;
  overflow: hidden;
}

.wallet-balance-card .card {
  background: #000000 !important;
  color: white;
  border: none !important;
  border-top: 4px solid #dc3545 !important;
}

.wallet-title {
  color: white;
  font-weight: 600;
}

.balance-label {
  font-size: 0.9rem;
  opacity: 0.9;
  display: block;
  margin-bottom: 0.5rem;
}

.balance-amount {
  font-size: 2.5rem;
  font-weight: 700;
  line-height: 1;
}

/* ✅ RED THEME: Change all blue (primary) elements to red */
.wallet-balance-card .text-primary {
  color: #dc3545 !important;
}

.btn-primary {
  background-color: #dc3545 !important;
  border-color: #dc3545 !important;
}

.btn-primary:hover {
  background-color: #c82333 !important;
  border-color: #bd2130 !important;
}

.btn-primary:focus, .btn-primary.focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
}

.btn-outline-primary {
  color: #dc3545 !important;
  border-color: #dc3545 !important;
}

.btn-outline-primary:hover {
  background-color: #dc3545 !important;
  border-color: #dc3545 !important;
  color: #fff !important;
}

.btn-outline-primary:focus, .btn-outline-primary.focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
}


.text-primary {
  color: #dc3545 !important;
}

/* Transaction Styles */
.transaction-item {
  border-bottom: 1px solid #e9ecef;
  transition: background-color 0.2s ease;
}

.transaction-item:hover {
  background-color: #f8f9fa;
}

.transaction-item:last-child {
  border-bottom: none;
}

.transaction-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
}

.transaction-icon.credit {
  background-color: #d4edda;
  color: #155724;
}

.transaction-icon.debit {
  background-color: #f8d7da;
  color: #721c24;
}

.transaction-description {
  font-weight: 600;
  color: #333;
  margin-bottom: 0.25rem;
}

.transaction-meta {
  font-size: 0.8rem;
  color: #6c757d;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.transaction-date {
  font-size: 0.9rem;
  color: #6c757d;
  text-align: center;
}

.transaction-time {
  font-size: 0.8rem;
  color: #adb5bd;
}

.transaction-amount {
  font-weight: 700;
  font-size: 1.1rem;
}

.transaction-amount.credit {
  color: #28a745;
}

.transaction-amount.debit {
  color: #dc3545;
}

.balance-after {
  font-size: 0.8rem;
  color: #6c757d;
  margin-top: 0.25rem;
}

/* Quick amounts */
.quick-amounts .btn {
  border-radius: 20px;
}

/* Empty state */
.empty-transactions {
  padding: 3rem 1rem;
}

/* Responsive */
@media (max-width: 768px) {
  .balance-amount {
    font-size: 2rem;
  }
  
  .transaction-item .row > div {
    margin-bottom: 0.5rem;
    text-align: center;
  }
  
  .transaction-item .row > div:last-child {
    margin-bottom: 0;
  }
  
  .transaction-meta {
    justify-content: center;
    gap: 0.5rem;
  }
}

/* Filter animation */
.transaction-item {
  transition: all 0.3s ease;
}

.transaction-item.hidden {
  display: none;
}
</style>

<script>
// ✅ UPDATED: Use pagination partial pattern
let currentPage = 1;
let currentTotalPages = 1;
let isLoading = false;
let currentFilter = '';

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  // ✅ SET UP: Pagination callbacks for the pagination partial
  window.fetchCallback = loadTransactions;
  window.paginationCallback = loadTransactions;
  
  // Load first page of transactions
  loadTransactions(1);
  
  // Setup filter
  const filterSelect = document.getElementById('transactionFilter');
  filterSelect.addEventListener('change', function() {
    currentFilter = this.value;
    loadTransactions(1); // Reset to page 1 when filter changes
  });
});

// ✅ FETCH: Load transactions via API
async function loadTransactions(page = 1) {
  if (isLoading) return;
  
  isLoading = true;
  currentPage = page;
  
  // Show loading state
  showLoadingState();
  
  try {
    // Build query parameters
    const params = new URLSearchParams();
    params.append('page', page);
    if (currentFilter) params.append('type', currentFilter);
    
    // Fetch from API
    const response = await fetch(`/api/wallet/transactions/paginated?${params.toString()}`);
    const result = await response.json();
    
    if (result.success) {
      renderTransactions(result.data.transactions);
      // ✅ UPDATE: Pagination using partial pattern
      updatePaginationPartial(result.data);
    } else {
      throw new Error(result.message || 'Failed to load transactions');
    }
  } catch (error) {
    console.error('Error loading transactions:', error);
    showError('Error loading transactions. Please try again.');
  } finally {
    isLoading = false;
  }
}

// ✅ UPDATE: Use pagination partial pattern
function updatePaginationPartial(data) {
  const paginationContainer = document.getElementById('paginationContainer');
  currentTotalPages = data.totalPages;
  
  if (data.totalPages <= 1) {
    paginationContainer.style.display = 'none';
    return;
  }
  
  paginationContainer.style.display = 'block';
  
  // ✅ GENERATE: Pagination using the exact same pattern as the partial
  let paginationHTML = `
    <nav class="mt-4">
      <ul class="pagination justify-content-center" id="pagination-container">
        <!-- Previous Button -->
        <li class="page-item ${data.currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link pagination-btn arrow-btn ${data.currentPage === 1 ? 'disabled-btn' : ''}"
             href="#"
             data-page="${data.currentPage - 1}"
             ${data.currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : ''}>
            <i class="bi bi-chevron-left"></i>
          </a>
        </li>

        <!-- Page Numbers -->
  `;
  
  for (let i = 1; i <= data.totalPages; i++) {
    paginationHTML += `
      <li class="page-item ${i === data.currentPage ? 'active' : ''}">
        <a class="page-link pagination-btn page-number" href="#" data-page="${i}">${i}</a>
      </li>
    `;
  }
  
  paginationHTML += `
        <!-- Next Button -->
        <li class="page-item ${data.currentPage === data.totalPages ? 'disabled' : ''}">
          <a class="page-link pagination-btn arrow-btn ${data.currentPage === data.totalPages ? 'disabled-btn' : ''}"
             href="#"
             data-page="${data.currentPage + 1}"
             ${data.currentPage === data.totalPages ? 'tabindex="-1" aria-disabled="true"' : ''}>
            <i class="bi bi-chevron-right"></i>
          </a>
        </li>
      </ul>
    </nav>
  `;
  
  paginationContainer.innerHTML = paginationHTML;
}

// ✅ RENDER: Show transactions (same as before)
function renderTransactions(transactions) {
  const container = document.getElementById('transactionsContainer');
  
  if (!transactions || transactions.length === 0) {
    container.innerHTML = `
      <div class="empty-transactions text-center py-5">
        <div class="mb-4">
          <i class="bi bi-receipt display-1 text-muted"></i>
        </div>
        <h4 class="text-muted mb-3">No Transactions Found</h4>
        <p class="text-muted mb-4">${currentFilter ? 'No transactions match the selected filter.' : 'Your transaction history will appear here once you start using your wallet.'}</p>
        ${currentFilter ? 
          '<button class="btn btn-outline-primary" onclick="clearFilter()"><i class="bi bi-arrow-clockwise me-2"></i>Clear Filter</button>' :
          '<button class="btn btn-primary" onclick="showAddMoneyModal()"><i class="bi bi-plus-circle me-2"></i>Add Money to Get Started</button>'
        }
      </div>
    `;
    return;
  }
  
  // Generate transactions HTML
  let transactionsHTML = '<div class="transaction-list">';
  transactions.forEach(transaction => {
    transactionsHTML += generateTransactionHTML(transaction);
  });
  transactionsHTML += '</div>';
  
  container.innerHTML = transactionsHTML;
}

// ✅ GENERATE: Transaction HTML (same as before)
function generateTransactionHTML(transaction) {
  const transactionDate = new Date(transaction.date);
  const formattedDate = transactionDate.toLocaleDateString('en-IN', { 
    day: '2-digit',
    month: 'short', 
    year: 'numeric' 
  });
  const formattedTime = transactionDate.toLocaleTimeString('en-IN', {
    hour: '2-digit',
    minute: '2-digit'
  });
  
  return `
    <div class="transaction-item" data-type="${transaction.type}">
      <div class="row align-items-center py-3 px-4">
        <div class="col-md-1">
          <div class="transaction-icon ${transaction.type}">
            <i class="bi bi-${transaction.type === 'credit' ? 'arrow-down-circle' : 'arrow-up-circle'}"></i>
          </div>
        </div>
        <div class="col-md-6">
          <div class="transaction-details">
            <div class="transaction-description">${transaction.description}</div>
            <div class="transaction-meta">
              <span class="transaction-id">ID: ${transaction.transactionId}</span>
            </div>
          </div>
        </div>
        <div class="col-md-2 text-center">
          <div class="transaction-date">
            ${formattedDate}
            <div class="transaction-time">${formattedTime}</div>
          </div>
        </div>
        <div class="col-md-3 text-end">
          <div class="transaction-amount ${transaction.type}">
            ${transaction.type === 'credit' ? '+' : '-'}₹${transaction.amount.toLocaleString('en-IN')}
          </div>
          <div class="balance-after">
            Balance: ₹${transaction.balanceAfter.toLocaleString('en-IN')}
          </div>
        </div>
      </div>
    </div>
  `;
}

// ✅ UTILS: Helper functions
function showLoadingState() {
  const container = document.getElementById('transactionsContainer');
  container.innerHTML = `
    <div class="text-center py-5">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-3 text-muted">Loading transactions...</p>
    </div>
  `;
}

function clearFilter() {
  document.getElementById('transactionFilter').value = '';
  currentFilter = '';
  loadTransactions(1);
}

function showError(message) {
  const container = document.getElementById('transactionsContainer');
  container.innerHTML = `
    <div class="text-center py-5">
      <div class="mb-4">
        <i class="bi bi-exclamation-triangle display-1 text-danger"></i>
      </div>
      <h4 class="text-danger mb-3">Error</h4>
      <p class="text-muted mb-4">${message}</p>
      <button class="btn btn-primary" onclick="loadTransactions(currentPage)">
        <i class="bi bi-arrow-clockwise me-2"></i>Try Again
      </button>
    </div>
  `;
}

// ✅ EXISTING: Keep all your existing wallet functionality
let isProcessing = false;

function showAddMoneyModal() {
  const modal = new bootstrap.Modal(document.getElementById('addMoneyModal'));
  modal.show();
}

function setAmount(amount) {
  document.getElementById('amount').value = amount;
}

async function addMoney() {
  if (isProcessing) return;
  
  const form = document.getElementById('addMoneyForm');
  const formData = new FormData(form);
  const amount = parseFloat(formData.get('amount'));
  const description = formData.get('description');
  
  // Validation
  if (!amount || amount <= 0) {
    showAlert('error', 'Invalid Amount', 'Please enter a valid amount');
    return;
  }
  
  if (amount > 50000) {
    showAlert('error', 'Amount Too High', 'Maximum amount allowed is ₹50,000');
    return;
  }
  
  isProcessing = true;
  showLoading('Processing...', 'Adding money to your wallet');
  
  try {
    const response = await fetch('/api/wallet/add-money', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount, description: description || `Added ₹${amount} to wallet` })
    });

    const data = await response.json();

    if (data.success) {
      // Update balance immediately
      updateBalance(data.newBalance);
      
      // ✅ REFRESH: Reload first page to show new transaction
      await loadTransactions(1);

      // Success message
      showAlert('success', 'Success!', `₹${amount.toLocaleString('en-IN')} added to wallet`);
      
      // Close modal and reset form
      bootstrap.Modal.getInstance(document.getElementById('addMoneyModal')).hide();
      form.reset();
    } else {
      throw new Error(data.message || 'Failed to add money');
    }
  } catch (error) {
    console.error('Add money error:', error);
    showAlert('error', 'Error', error.message || 'Failed to add money. Please try again.');
  } finally {
    isProcessing = false;
    Swal.close();
  }
}

function updateBalance(newBalance) {
  const balanceElement = document.querySelector('.balance-amount');
  if (balanceElement) {
    balanceElement.style.transform = 'scale(1.1)';
    balanceElement.style.color = '#28a745';
    balanceElement.textContent = `₹${newBalance.toLocaleString('en-IN')}`;
    
    setTimeout(() => {
      balanceElement.style.transform = 'scale(1)';
      balanceElement.style.color = '';
    }, 300);
  }
}

function showAlert(icon, title, text) {
  Swal.fire({
    icon: icon,
    title: title,
    text: text,
    confirmButtonColor: icon === 'success' ? '#28a745' : '#dc3545'
  });
}

function showLoading(title, text) {
  Swal.fire({
    title: title,
    text: text,
    allowOutsideClick: false,
    allowEscapeKey: false,
    showConfirmButton: false,
    didOpen: () => Swal.showLoading()
  });
}
</script>
