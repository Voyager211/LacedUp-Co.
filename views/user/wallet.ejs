<div class="container py-4">
  <!-- Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'My Profile', href: '/profile' },
      { label: 'My Wallet' }
    ]
  }) %>

  <!-- Main Layout: Sidebar + Content -->
  <div class="row g-4">
    <!-- Left Sidebar Navigation -->
    <div class="col-lg-3 col-md-4">
      <%- include('partials/profile-sidebar.ejs', { user: user, active: 'wallet' }) %>
    </div>

    <!-- Main Content Area -->
    <div class="col-lg-9 col-md-8">
      <div class="wallet-content">
        <!-- Wallet Balance Card -->
        <div class="wallet-balance-card mb-4">
          <div class="card border-0 shadow-sm">
            <div class="card-body p-4">
              <div class="row align-items-center">
                <div class="col-md-8">
                  <h3 class="wallet-title mb-2">
                    <i class="bi bi-wallet2 me-2 text-primary"></i>
                    My Wallet
                  </h3>
                  <!-- Add this RIGHT BEFORE the existing balance-amount div -->
                  <div class="balance-display">
                    <span class="balance-label">Available Balance</span>
                    <div class="balance-amount">₹<%= wallet.balance.toLocaleString('en-IN') %></div>
                  </div>
                </div>
                <div class="col-md-4 text-end">
                  <button class="btn btn-primary btn-lg" onclick="showAddMoneyModal()">
                    <i class="bi bi-plus-circle me-2"></i>Add Money
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Transaction History -->
        <div class="transaction-history-card">
          <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-bottom">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                  <i class="bi bi-clock-history me-2"></i>
                  Transaction History
                </h5>
                <div class="d-flex gap-2">
                  <select class="form-select form-select-sm" id="transactionFilter" style="width: auto;">
                    <option value="">All Transactions</option>
                    <option value="credit">Credits</option>
                    <option value="debit">Debits</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="card-body p-0">
              <% if (wallet.transactions && wallet.transactions.length > 0) { %>
                <div class="transaction-list">
                  <% wallet.transactions.forEach(transaction => { %>
                    <div class="transaction-item" data-type="<%= transaction.type %>">
                      <div class="row align-items-center py-3 px-4">
                        <div class="col-md-1">
                          <div class="transaction-icon <%= transaction.type === 'credit' ? 'credit' : 'debit' %>">
                            <i class="bi bi-<%= transaction.type === 'credit' ? 'arrow-down-circle' : 'arrow-up-circle' %>"></i>
                          </div>
                        </div>
                        <div class="col-md-6">
                          <div class="transaction-details">
                            <div class="transaction-description"><%= transaction.description %></div>
                            <div class="transaction-meta">
                              <span class="transaction-id">ID: <%= transaction.transactionId %></span>
                              <!-- <% if (transaction.orderId) { %>
                                <span class="transaction-order">Order: <%= transaction.orderId %></span>
                              <% } %> -->
                              <!-- <% if (transaction.returnId) { %>
                                <span class="transaction-return">Return: <%= transaction.returnId %></span>
                              <% } %> -->
                            </div>
                          </div>
                        </div>
                        <div class="col-md-2 text-center">
                          <div class="transaction-date">
                            <%= new Date(transaction.date).toLocaleDateString('en-IN', {
                              day: '2-digit',
                              month: 'short',
                              year: 'numeric'
                            }) %>
                            <div class="transaction-time">
                              <%= new Date(transaction.date).toLocaleTimeString('en-IN', {
                                hour: '2-digit',
                                minute: '2-digit'
                              }) %>
                            </div>
                          </div>
                        </div>
                        <div class="col-md-3 text-end">
                          <div class="transaction-amount <%= transaction.type %>">
                            <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toLocaleString('en-IN') %>
                          </div>
                          <div class="balance-after">
                            Balance: ₹<%= transaction.balanceAfter.toLocaleString('en-IN') %>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% }) %>
                </div>

                <!-- Pagination -->
                <% if (wallet.totalPages > 1) { %>
                  <div class="card-footer bg-white">
                    <nav aria-label="Transaction pagination">
                      <ul class="pagination justify-content-center mb-0">
                        <% if (wallet.hasPrevPage) { %>
                          <li class="page-item">
                            <a class="page-link" href="?page=<%= wallet.currentPage - 1 %>">Previous</a>
                          </li>
                        <% } %>
                        
                        <% for (let i = 1; i <= wallet.totalPages; i++) { %>
                          <li class="page-item <%= i === wallet.currentPage ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                          </li>
                        <% } %>
                        
                        <% if (wallet.hasNextPage) { %>
                          <li class="page-item">
                            <a class="page-link" href="?page=<%= wallet.currentPage + 1 %>">Next</a>
                          </li>
                        <% } %>
                      </ul>
                    </nav>
                  </div>
                <% } %>

              <% } else { %>
                <!-- Empty State -->
                <div class="empty-transactions text-center py-5">
                  <div class="mb-4">
                    <i class="bi bi-receipt display-1 text-muted"></i>
                  </div>
                  <h4 class="text-muted mb-3">No Transactions Yet</h4>
                  <p class="text-muted mb-4">Your transaction history will appear here once you start using your wallet.</p>
                  <button class="btn btn-primary" onclick="showAddMoneyModal()">
                    <i class="bi bi-plus-circle me-2"></i>Add Money to Get Started
                  </button>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyModalLabel">
          <i class="bi bi-plus-circle me-2"></i>Add Money to Wallet
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addMoneyForm">
          <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <div class="input-group">
              <span class="input-group-text">₹</span>
              <input type="number" class="form-control" id="amount" name="amount" min="1" max="50000" required>
            </div>
            <div class="form-text">Minimum: ₹1, Maximum: ₹50,000</div>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description (Optional)</label>
            <input type="text" class="form-control" id="description" name="description" placeholder="e.g., Adding money for shopping">
          </div>
          <div class="quick-amounts mb-3">
            <label class="form-label">Quick Add</label>
            <div class="d-flex gap-2 flex-wrap">
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(500)">₹500</button>
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(1000)">₹1,000</button>
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(2000)">₹2,000</button>
              <button type="button" class="btn btn-outline-primary btn-sm" onclick="setAmount(5000)">₹5,000</button>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="addMoney()">
          <i class="bi bi-plus-circle me-2"></i>Add Money
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* Wallet Styles */
.wallet-content {
  background: #fff;
  border-radius: 12px;
  overflow: hidden;
}

.wallet-balance-card .card {
  background: #000000 !important;
  color: white;
  border: none !important;
  border-top: 4px solid #dc3545 !important;
}

.wallet-title {
  color: white;
  font-weight: 600;
}

.balance-label {
  font-size: 0.9rem;
  opacity: 0.9;
  display: block;
  margin-bottom: 0.5rem;
}

.balance-amount {
  font-size: 2.5rem;
  font-weight: 700;
  line-height: 1;
}

/* ✅ RED THEME: Change all blue (primary) elements to red */
.wallet-balance-card .text-primary {
  color: #dc3545 !important;
}

.btn-primary {
  background-color: #dc3545 !important;
  border-color: #dc3545 !important;
}

.btn-primary:hover {
  background-color: #c82333 !important;
  border-color: #bd2130 !important;
}

.btn-primary:focus, .btn-primary.focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
}

.btn-outline-primary {
  color: #dc3545 !important;
  border-color: #dc3545 !important;
}

.btn-outline-primary:hover {
  background-color: #dc3545 !important;
  border-color: #dc3545 !important;
  color: #fff !important;
}

.btn-outline-primary:focus, .btn-outline-primary.focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
}

.pagination .page-item.active .page-link {
  background-color: #dc3545 !important;
  border-color: #dc3545 !important;
}

.text-primary {
  color: #dc3545 !important;
}

/* Transaction Styles */
.transaction-item {
  border-bottom: 1px solid #e9ecef;
  transition: background-color 0.2s ease;
}

.transaction-item:hover {
  background-color: #f8f9fa;
}

.transaction-item:last-child {
  border-bottom: none;
}

.transaction-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
}

.transaction-icon.credit {
  background-color: #d4edda;
  color: #155724;
}

.transaction-icon.debit {
  background-color: #f8d7da;
  color: #721c24;
}

.transaction-description {
  font-weight: 600;
  color: #333;
  margin-bottom: 0.25rem;
}

.transaction-meta {
  font-size: 0.8rem;
  color: #6c757d;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.transaction-date {
  font-size: 0.9rem;
  color: #6c757d;
  text-align: center;
}

.transaction-time {
  font-size: 0.8rem;
  color: #adb5bd;
}

.transaction-amount {
  font-weight: 700;
  font-size: 1.1rem;
}

.transaction-amount.credit {
  color: #28a745;
}

.transaction-amount.debit {
  color: #dc3545;
}

.balance-after {
  font-size: 0.8rem;
  color: #6c757d;
  margin-top: 0.25rem;
}

/* Quick amounts */
.quick-amounts .btn {
  border-radius: 20px;
}

/* Empty state */
.empty-transactions {
  padding: 3rem 1rem;
}

/* Responsive */
@media (max-width: 768px) {
  .balance-amount {
    font-size: 2rem;
  }
  
  .transaction-item .row > div {
    margin-bottom: 0.5rem;
    text-align: center;
  }
  
  .transaction-item .row > div:last-child {
    margin-bottom: 0;
  }
  
  .transaction-meta {
    justify-content: center;
    gap: 0.5rem;
  }
}

/* Filter animation */
.transaction-item {
  transition: all 0.3s ease;
}

.transaction-item.hidden {
  display: none;
}
</style>

<script>
// Wallet functionality
let isProcessing = false;

// Show add money modal
function showAddMoneyModal() {
  const modal = new bootstrap.Modal(document.getElementById('addMoneyModal'));
  modal.show();
}

// Set quick amount
function setAmount(amount) {
  document.getElementById('amount').value = amount;
}

// Add money to wallet
async function addMoney() {
  if (isProcessing) return;
  
  const form = document.getElementById('addMoneyForm');
  const formData = new FormData(form);
  const amount = parseFloat(formData.get('amount'));
  const description = formData.get('description');
  
  // Validation
  if (!amount || amount <= 0) {
    showAlert('error', 'Invalid Amount', 'Please enter a valid amount');
    return;
  }
  
  if (amount > 50000) {
    showAlert('error', 'Amount Too High', 'Maximum amount allowed is ₹50,000');
    return;
  }
  
  isProcessing = true;
  showLoading('Processing...', 'Adding money to your wallet');
  
  try {
    const response = await fetch('/api/wallet/add-money', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount, description: description || `Added ₹${amount} to wallet` })
    });

    const data = await response.json();

    if (data.success) {
      // Update balance immediately
      updateBalance(data.newBalance);
      
      // Add transaction to list
      if (data.transaction) {
        addTransactionToList(data.transaction);
      }

      // Success message
      showAlert('success', 'Success!', `₹${amount.toLocaleString('en-IN')} added to wallet`);
      
      // Close modal and reset form
      bootstrap.Modal.getInstance(document.getElementById('addMoneyModal')).hide();
      form.reset();
    } else {
      throw new Error(data.message || 'Failed to add money');
    }
  } catch (error) {
    console.error('Add money error:', error);
    showAlert('error', 'Error', error.message || 'Failed to add money. Please try again.');
  } finally {
    isProcessing = false;
    Swal.close();
  }
}

// Update balance display
function updateBalance(newBalance) {
  const balanceElement = document.querySelector('.balance-amount');
  if (balanceElement) {
    // Animate balance update
    balanceElement.style.transform = 'scale(1.1)';
    balanceElement.style.color = '#28a745';
    balanceElement.textContent = `₹${newBalance.toLocaleString('en-IN')}`;
    
    setTimeout(() => {
      balanceElement.style.transform = 'scale(1)';
      balanceElement.style.color = '';
    }, 300);
  }
  
  console.log(`💰 Balance updated: ₹${newBalance.toLocaleString('en-IN')}`);
}

// Add transaction to list
function addTransactionToList(transaction) {
  const transactionList = document.querySelector('.transaction-list');
  const emptyState = document.querySelector('.empty-transactions');
  
  // Hide empty state
  if (emptyState) {
    emptyState.style.display = 'none';
  }
  
  // Create transaction list if it doesn't exist
  if (!transactionList && emptyState) {
    const cardBody = emptyState.parentElement;
    cardBody.innerHTML = '<div class="transaction-list"></div>';
  }
  
  const list = document.querySelector('.transaction-list');
  if (!list) return;
  
  // Create transaction HTML
  const transactionDate = new Date(transaction.date);
  const transactionHtml = `
    <div class="transaction-item new-transaction" data-type="${transaction.type}">
      <div class="row align-items-center py-3 px-4">
        <div class="col-md-1">
          <div class="transaction-icon ${transaction.type}">
            <i class="bi bi-${transaction.type === 'credit' ? 'arrow-down-circle' : 'arrow-up-circle'}"></i>
          </div>
        </div>
        <div class="col-md-6">
          <div class="transaction-details">
            <div class="transaction-description">${transaction.description}</div>
            <div class="transaction-meta">
              <span class="transaction-id">ID: ${transaction.transactionId}</span>
            </div>
          </div>
        </div>
        <div class="col-md-2 text-center">
          <div class="transaction-date">
            ${transactionDate.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' })}
            <div class="transaction-time">
              ${transactionDate.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        </div>
        <div class="col-md-2 text-end">
          <div class="transaction-amount ${transaction.type}">
            ${transaction.type === 'credit' ? '+' : '-'}₹${transaction.amount.toLocaleString('en-IN')}
          </div>
          <div class="balance-after">
            Balance: ₹${transaction.balanceAfter.toLocaleString('en-IN')}
          </div>
        </div>
        <div class="col-md-1 text-end">
          <span class="badge bg-success">completed</span>
        </div>
      </div>
    </div>
  `;
  
  // Add to top with animation
  list.insertAdjacentHTML('afterbegin', transactionHtml);
  
  // Animate new transaction
  const newTransaction = list.querySelector('.new-transaction');
  newTransaction.style.backgroundColor = '#d4edda';
  newTransaction.style.transform = 'scale(0.95)';
  newTransaction.style.opacity = '0.7';
  
  setTimeout(() => {
    newTransaction.style.transition = 'all 0.3s ease';
    newTransaction.style.transform = 'scale(1)';
    newTransaction.style.opacity = '1';
    newTransaction.style.backgroundColor = '';
    newTransaction.classList.remove('new-transaction');
  }, 100);
}

// Utility functions
function showAlert(icon, title, text) {
  Swal.fire({
    icon: icon,
    title: title,
    text: text,
    confirmButtonColor: icon === 'success' ? '#28a745' : '#dc3545'
  });
}

function showLoading(title, text) {
  Swal.fire({
    title: title,
    text: text,
    allowOutsideClick: false,
    allowEscapeKey: false,
    showConfirmButton: false,
    didOpen: () => Swal.showLoading()
  });
}

// Transaction filter
document.addEventListener('DOMContentLoaded', function() {
  const filterSelect = document.getElementById('transactionFilter');
  if (filterSelect) {
    filterSelect.addEventListener('change', function() {
      const selectedType = this.value;
      const transactionItems = document.querySelectorAll('.transaction-item');
      
      transactionItems.forEach(item => {
        const itemType = item.getAttribute('data-type');
        if (selectedType === '' || itemType === selectedType) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  }
});
</script>

