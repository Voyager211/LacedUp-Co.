<div class="container py-4">
  <!-- Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'My Profile', href: '/profile' },
      { label: 'Address Book' }
    ]
  }) %>

  <!-- Main Layout: Sidebar + Content -->
  <div class="row g-4">
    <!-- Left Sidebar Navigation -->
    <div class="col-lg-3 col-md-4">
      <%- include('partials/profile-sidebar.ejs', { user: user, active: 'addresses' }) %>
    </div>

    <!-- Main Content Area -->
    <div class="col-lg-9 col-md-8">
      <div class="address-book-container">
        <!-- Header -->
        <div class="address-header">
          <div class="header-content">
            <h2><i class="bi bi-geo-alt me-2"></i> Address Book</h2>
            <% if (typeof totalAddresses !== 'undefined' && totalAddresses > 0) { %>
              <p class="text-muted">Manage your delivery addresses</p>
            <% } else { %>
              <p class="text-muted">Manage your delivery addresses</p>
            <% } %>
          </div>
          <button class="btn btn-primary add-address-btn" onclick="addNewAddress()">
            <i class="bi bi-plus me-2"></i> Add New Address
          </button>
        </div>

        <!-- ✅ ADDRESSES GRID: Updated for pagination -->
        <div class="addresses-grid" id="addressesGrid">
          <% if (typeof addresses !== 'undefined' && addresses.length > 0) { %>
            <% addresses.forEach(function(address) { %>
              <div class="address-card <%= address.isDefault ? 'default' : '' %>">
                <% if (address.isDefault) { %>
                  <div class="default-badge">
                    <i class="bi bi-star-fill me-1"></i> Default
                  </div>
                <% } %>
                
                <div class="address-type">
                  <i class="bi bi-<%= address.addressType === 'home' ? 'house' : address.addressType === 'office' ? 'briefcase' : 'geo-alt' %>"></i>
                  <%= address.addressType.charAt(0).toUpperCase() + address.addressType.slice(1) %>
                </div>
                
                <div class="address-details">
                  <h5><%= address.name %></h5>
                  <div class="address-text">
                    <%= address.landMark %><br>
                    <%= address.city %>, <%= address.state %> - <%= address.pincode %><br>
                    <strong>Phone:</strong> <%= address.phone %>
                    <% if (address.altPhone) { %>
                      <br><strong>Alt Phone:</strong> <%= address.altPhone %>
                    <% } %>
                  </div>
                </div>
                
                <div class="address-actions">
                  <button class="btn btn-outline-primary btn-sm" onclick="editAddress('<%= address._id %>')">
                    <i class="bi bi-pencil me-1"></i> Edit
                  </button>
                  <% if (!address.isDefault) { %>
                    <button class="btn btn-outline-success btn-sm" onclick="setDefaultAddress('<%= address._id %>')">
                      <i class="bi bi-star me-1"></i> Set Default
                    </button>
                  <% } %>
                  <button class="btn btn-outline-danger btn-sm" onclick="deleteAddress('<%= address._id %>')">
                    <i class="bi bi-trash me-1"></i> Delete
                  </button>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <!-- Empty state -->
            <div class="empty-state" id="emptyState">
              <div class="empty-icon">
                <i class="bi bi-geo-alt"></i>
              </div>
              <h4>No addresses found</h4>
              <p>Add your first delivery address to get started</p>
              <button class="btn btn-primary" onclick="addNewAddress()">
                <i class="bi bi-plus me-2"></i> Add Address
              </button>
            </div>
          <% } %>
        </div>

        <!-- ✅ PAGINATION: Using your existing pagination partial -->
        <% if (typeof totalPages !== 'undefined' && totalPages > 1) { %>
          <div class="pagination-wrapper">
            <%- include('partials/pagination', {
              currentPage: currentPage,
              totalPages: totalPages
            }) %>
          </div>
        <% } %>

      </div>
    </div>
  </div>
</div>

<!-- Add/Edit Address Modal -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">
          <i class="bi bi-plus me-2"></i> Add New Address
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%- include('partials/addresses') %>
      </div>
    </div>
  </div>
</div>

<style>
/* Address Book Styles */
.address-book-container {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
  overflow: hidden;
}

.address-header {
  padding: 2rem;
  border-bottom: 1px solid #e9ecef;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.header-content h2 {
  margin: 0 0 0.5rem;
  color: #000;
  font-weight: 600;
  display: flex;
  align-items: center;
}

.header-content p {
  margin: 0;
}

.add-address-btn {
  background: #000;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.add-address-btn:hover {
  background: #dc3545;
  transform: translateY(-1px);
}

/* Addresses Grid */
.addresses-grid {
  padding: 2rem;
  min-height: 400px;
}

.loading-state, .empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 300px;
  text-align: center;
  color: #666;
}

.empty-icon {
  font-size: 4rem;
  color: #ddd;
  margin-bottom: 1rem;
}

.empty-state h4 {
  margin-bottom: 0.5rem;
  color: #333;
}

.empty-state p {
  margin-bottom: 1.5rem;
}

/* Address Cards */
.address-card {
  background: #fff;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  transition: all 0.3s ease;
  position: relative;
}

.address-card:hover {
  border-color: #000;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.address-card.default {
  border-color: #28a745;
  background: linear-gradient(135deg, #f8fff9 0%, #f0fff4 100%);
}

.default-badge {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: #28a745;
  color: white;
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
}

.address-type {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  background: #f8f9fa;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.9rem;
  font-weight: 500;
  color: #666;
  margin-bottom: 1rem;
}

.address-details h5 {
  margin: 0 0 0.5rem;
  color: #000;
  font-weight: 600;
}

.address-text {
  color: #666;
  line-height: 1.6;
  margin-bottom: 1rem;
}

.address-actions {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.85rem;
  border-radius: 6px;
  font-weight: 500;
}

.btn-outline-primary {
  border-color: #000;
  color: #000;
}

.btn-outline-primary:hover {
  background: #000;
  border-color: #000;
}

.btn-outline-success {
  border-color: #28a745;
  color: #28a745;
}

.btn-outline-success:hover {
  background: #28a745;
  border-color: #28a745;
}

.btn-outline-danger {
  border-color: #dc3545;
  color: #dc3545;
}

.btn-outline-danger:hover {
  background: #dc3545;
  border-color: #dc3545;
}

/* ✅ PAGINATION WRAPPER: Consistent with wallet/orders */
.pagination-wrapper {
  padding: 1.5rem 2rem;
  border-top: 1px solid #e9ecef;
  background: #f8f9fa;
}

/* Modal Styles */
.modal-content {
  border: none;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.modal-header {
  border-bottom: 1px solid #e9ecef;
  padding: 1.5rem 2rem;
}

.modal-title {
  font-weight: 600;
  color: #000;
}

.modal-body {
  padding: 0;
}

/* Responsive Design */
@media (max-width: 768px) {
  .address-header {
    flex-direction: column;
    align-items: stretch;
    text-align: center;
  }

  .add-address-btn {
    width: 100%;
  }

  .address-actions {
    justify-content: center;
  }
}

@media (max-width: 576px) {
  .addresses-grid {
    padding: 1rem;
  }

  .address-card {
    padding: 1rem;
  }

  .address-header {
    padding: 1.5rem;
  }
}

.modal.fade .modal-dialog {
  transition: transform 0.3s ease-out;
}

.modal.show .modal-dialog {
  transform: none;
}

/* Prevent body scroll when modal is open */
body.modal-open {
  overflow: hidden;
}

/* Smooth transitions for address cards */
.address-card {
  transition: all 0.3s ease;
}

.addresses-grid {
  transition: opacity 0.3s ease;
}

/* Loading state for address grid */
.addresses-grid.loading {
  opacity: 0.6;
  pointer-events: none;
}
</style>

<script>
// Initialize Geoapify Autocomplete
class GeoapifyAddressForm {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.autocomplete = null;
    this.initializeAutocomplete();
    this.setupEventListeners();
  }

  initializeAutocomplete() {
    // Create autocomplete for address input
    const addressInput = document.getElementById('addressDetails');
    if (addressInput && typeof GeocoderAutocomplete !== 'undefined') {
      try {
        this.autocomplete = new GeocoderAutocomplete(addressInput, this.apiKey, {
          placeholder: 'Start typing your address...',
          type: 'locality', // Changed from 'address' to 'locality' for better results
          lang: 'en',
          countries: ['in'],
          limit: 5,
          debounceDelay: 300,
          skipIcons: false,
          skipDetails: false
        });

        // Handle address selection
        this.autocomplete.on('select', (location) => {
          console.log('Address selected:', location);
          this.fillAddressForm(location);
        });

        // Handle suggestions
        this.autocomplete.on('suggestions', (suggestions) => {
          console.log('Address suggestions received:', suggestions);
        });

        // Handle input events
        this.autocomplete.on('input', (query) => {
          console.log('Address input:', query);
        });

        console.log('✅ Geoapify autocomplete initialized successfully');
      } catch (error) {
        console.error('❌ Error initializing Geoapify autocomplete:', error);
        // Fallback to manual search
        this.setupManualSearch();
      }
    } else {
      console.warn('⚠️ GeocoderAutocomplete not available, setting up manual search');
      this.setupManualSearch();
    }
  }

  setupManualSearch() {
    const addressInput = document.getElementById('addressDetails');
    if (addressInput) {
      let searchTimeout;
      
      addressInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        const query = e.target.value.trim();
        
        if (query.length >= 3) {
          searchTimeout = setTimeout(() => {
            this.performManualSearch(query);
          }, 500);
        }
      });
    }
  }

  async performManualSearch(query) {
    try {
      const response = await fetch(
        `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(query)}&country=IN&format=json&apiKey=${this.apiKey}&limit=5`
      );
      
      if (response.ok) {
        const data = await response.json();
        if (data.results && data.results.length > 0) {
          this.showManualSuggestions(data.results);
        }
      }
    } catch (error) {
      console.error('Manual search error:', error);
    }
  }

  showManualSuggestions(suggestions) {
    // Remove existing suggestions
    const existingSuggestions = document.querySelector('.manual-address-suggestions');
    if (existingSuggestions) {
      existingSuggestions.remove();
    }

    const addressInput = document.getElementById('addressDetails');
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'manual-address-suggestions';
    suggestionsContainer.style.cssText = `
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      z-index: 1000;
      background: white;
      border: 1px solid #ddd;
      border-top: none;
      border-radius: 0 0 6px 6px;
      max-height: 200px;
      overflow-y: auto;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    `;

    suggestions.forEach((suggestion, index) => {
      const suggestionItem = document.createElement('div');
      suggestionItem.className = 'manual-suggestion-item';
      suggestionItem.style.cssText = `
        padding: 12px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f8f9fa;
        font-size: 0.9rem;
        color: #333;
        transition: all 0.2s ease;
      `;
      suggestionItem.textContent = suggestion.formatted;
      
      suggestionItem.addEventListener('mouseenter', () => {
        suggestionItem.style.backgroundColor = '#f8f9fa';
      });
      
      suggestionItem.addEventListener('mouseleave', () => {
        suggestionItem.style.backgroundColor = 'white';
      });
      
      suggestionItem.addEventListener('click', () => {
        addressInput.value = suggestion.formatted;
        this.fillAddressForm({ properties: suggestion });
        suggestionsContainer.remove();
      });
      
      suggestionsContainer.appendChild(suggestionItem);
    });

    // Position the suggestions container
    const inputContainer = addressInput.parentNode;
    inputContainer.style.position = 'relative';
    inputContainer.appendChild(suggestionsContainer);

    // Hide suggestions when clicking outside
    document.addEventListener('click', (e) => {
      if (!inputContainer.contains(e.target)) {
        suggestionsContainer.remove();
      }
    }, { once: true });
  }

  fillAddressForm(location) {
    const properties = location.properties;

    // Auto-fill form fields
    if (properties.state) {
      document.getElementById('state').value = properties.state;
      this.updateDistricts(properties.state, properties.county);
    }

    if (properties.city) {
      document.getElementById('city').value = properties.city;
    }

    if (properties.postcode) {
      document.getElementById('pincode').value = properties.postcode;
    }

    if (properties.county) {
      // Wait for districts to load, then select
      setTimeout(() => {
        document.getElementById('district').value = properties.county;
      }, 100);
    }

    // Clear any validation errors
    this.clearValidationErrors();
  }

  setupEventListeners() {
    // Pincode-based location fetching as fallback
    const pincodeInput = document.getElementById('pincode');
    if (pincodeInput) {
      pincodeInput.addEventListener('blur', async (e) => {
        const pincode = e.target.value.trim();
        if (pincode.length === 6 && !document.getElementById('city').value) {
          await this.fetchLocationByPincode(pincode);
        }
      });
    }

    // Current location button
    this.addCurrentLocationButton();
  }

  async fetchLocationByPincode(pincode) {
    try {
      console.log(`🔍 Fetching location for pincode: ${pincode}`);
      
      const response = await fetch(
        `https://api.geoapify.com/v1/geocode/search?text=${pincode}&country=IN&format=json&apiKey=${this.apiKey}`
      );
      const data = await response.json();

      console.log('Pincode search results:', data);

      if (data.results && data.results.length > 0) {
        const location = data.results[0];
        console.log('Auto-filling from pincode:', location);
        
        // Auto-fill the form with pincode data
        if (location.state) {
          const stateSelect = document.getElementById('state');
          // Try to match state name to our dropdown options
          const stateOptions = Array.from(stateSelect.options);
          const matchingState = stateOptions.find(option => 
            option.textContent.toLowerCase().includes(location.state.toLowerCase()) ||
            location.state.toLowerCase().includes(option.textContent.toLowerCase())
          );
          
          if (matchingState) {
            stateSelect.value = matchingState.value;
            console.log(`✅ State set to: ${matchingState.textContent}`);
            
            // Call the updateDistricts function directly (defined in addresses partial)
            if (typeof updateDistricts === 'function') {
              updateDistricts(matchingState.value);
              console.log(`✅ Districts loaded for state: ${matchingState.textContent}`);
              
              // Wait for districts to load, then auto-select district
              setTimeout(() => {
                this.autoSelectDistrict(location.county || location.city);
              }, 300);
            } else {
              // Fallback: trigger change event
              stateSelect.dispatchEvent(new Event('change'));
              setTimeout(() => {
                this.autoSelectDistrict(location.county || location.city);
              }, 300);
            }
          }
        }

        // Auto-fill city
        if (location.county) {
          document.getElementById('city').value = location.county;
          console.log(`✅ City set to: ${location.county}`);
        } else if (location.city) {
          document.getElementById('city').value = location.city;
          console.log(`✅ City set to: ${location.city}`);
        }

        // Show success message
        const pincodeInput = document.getElementById('pincode');
        pincodeInput.style.borderColor = '#28a745';
        setTimeout(() => {
          pincodeInput.style.borderColor = '';
        }, 2000);

        this.clearValidationErrors();
      } else {
        console.warn('No results found for pincode:', pincode);
        // Show warning for invalid pincode
        const pincodeInput = document.getElementById('pincode');
        pincodeInput.style.borderColor = '#ffc107';
        setTimeout(() => {
          pincodeInput.style.borderColor = '';
        }, 2000);
      }
    } catch (error) {
      console.error('Error fetching location by pincode:', error);
      // Show error state
      const pincodeInput = document.getElementById('pincode');
      pincodeInput.style.borderColor = '#dc3545';
      setTimeout(() => {
        pincodeInput.style.borderColor = '';
      }, 2000);
    }
  }

  autoSelectDistrict(districtName) {
    if (!districtName) return;
    
    const districtSelect = document.getElementById('district');
    if (districtSelect.disabled) {
      console.warn('District dropdown is still disabled, retrying...');
      setTimeout(() => {
        this.autoSelectDistrict(districtName);
      }, 100);
      return;
    }

    console.log(`🔍 Looking for district: ${districtName}`);
    
    // Try to find matching district option
    const districtOptions = Array.from(districtSelect.options);
    const matchingDistrict = districtOptions.find(option => {
      const optionText = option.textContent.toLowerCase();
      const searchText = districtName.toLowerCase();
      
      // Try exact match first
      if (optionText === searchText) return true;
      
      // Try partial matches
      if (optionText.includes(searchText) || searchText.includes(optionText)) return true;
      
      // Try without common words
      const cleanOptionText = optionText.replace(/\b(district|taluk|tehsil)\b/g, '').trim();
      const cleanSearchText = searchText.replace(/\b(district|taluk|tehsil)\b/g, '').trim();
      
      return cleanOptionText === cleanSearchText || 
             cleanOptionText.includes(cleanSearchText) || 
             cleanSearchText.includes(cleanOptionText);
    });

    if (matchingDistrict) {
      districtSelect.value = matchingDistrict.value;
      console.log(`✅ District set to: ${matchingDistrict.textContent}`);
      
      // Add visual feedback
      districtSelect.style.borderColor = '#28a745';
      setTimeout(() => {
        districtSelect.style.borderColor = '';
      }, 2000);
    } else {
      console.warn(`❌ Could not find matching district for: ${districtName}`);
      console.log('Available districts:', districtOptions.map(opt => opt.textContent));
      
      // Show warning that district needs manual selection
      districtSelect.style.borderColor = '#ffc107';
      setTimeout(() => {
        districtSelect.style.borderColor = '';
      }, 3000);
    }
  }

  addCurrentLocationButton() {
    const addressDetails = document.getElementById('addressDetails');
    if (addressDetails && navigator.geolocation) {
      // Check if button already exists
      const existingBtn = addressDetails.parentNode.querySelector('.btn-current-location');
      if (existingBtn) {
        return; // Button already exists, don't add another
      }

      // Create "Use Current Location" button
      const locationBtn = document.createElement('button');
      locationBtn.type = 'button';
      locationBtn.className = 'btn btn-outline-dark btn-sm mt-2 btn-current-location'; // Added unique class
      locationBtn.innerHTML = '<i class="fas fa-location-arrow me-1"></i>Use Current Location';
      locationBtn.style.cssText = `
        background-color: #000;
        border-color: #000;
        color: #fff;
        transition: all 0.3s ease;
      `;
      
      // Add hover effect
      locationBtn.addEventListener('mouseenter', () => {
        locationBtn.style.backgroundColor = '#dc3545';
        locationBtn.style.borderColor = '#dc3545';
        locationBtn.style.transform = 'translateY(-1px)';
      });
      
      locationBtn.addEventListener('mouseleave', () => {
        locationBtn.style.backgroundColor = '#000';
        locationBtn.style.borderColor = '#000';
        locationBtn.style.transform = 'translateY(0)';
      });
      locationBtn.addEventListener('click', () => {
        this.getCurrentLocation();
      });

      addressDetails.parentNode.appendChild(locationBtn);
    }
  }

  async getCurrentLocation() {
    if (!navigator.geolocation) {
      alert('Geolocation is not supported by this browser.');
      return;
    }

    navigator.geolocation.getCurrentPosition(async (position) => {
      const { latitude, longitude } = position.coords;
      try {
        const response = await fetch(
          `https://api.geoapify.com/v1/geocode/reverse?lat=${latitude}&lon=${longitude}&format=json&apiKey=${this.apiKey}`
        );
        const data = await response.json();

        if (data.results && data.results.length > 0) {
          const location = data.results[0];
          this.fillAddressForm({ properties: location });
          document.getElementById('addressDetails').value = location.formatted;
        }
      } catch (error) {
        console.error('Error getting current location:', error);
        alert('Could not get your current location. Please enter address manually.');
      }
    }, (error) => {
      console.error('Geolocation error:', error);
      alert('Could not access your location. Please enter address manually.');
    });
  }

  updateDistricts(selectedState, selectedDistrict = '') {
    // Your existing state-district logic here
    const districtSelect = document.getElementById('district');
    if (typeof stateDistrictData !== 'undefined' && stateDistrictData[selectedState]) {
      districtSelect.disabled = false;
      districtSelect.innerHTML = '<option value="">Select District</option>';

      stateDistrictData[selectedState].districts.forEach(district => {
        const option = document.createElement('option');
        option.value = district.toLowerCase().replace(/\s+/g, '-');
        option.textContent = district;
        districtSelect.appendChild(option);
      });

      if (selectedDistrict) {
        districtSelect.value = selectedDistrict.toLowerCase().replace(/\s+/g, '-');
      }
    }
  }

  clearValidationErrors() {
    document.querySelectorAll('.is-invalid').forEach(input => {
      input.classList.remove('is-invalid');
    });

    document.querySelectorAll('.error-message').forEach(error => {
      error.style.display = 'none';
    });
  }
}



let addresses = [];
let currentEditingId = null;
let currentPage = 1;
let totalPages = 1;
let isLoading = false;

document.addEventListener('DOMContentLoaded', function() {
  // ✅ Set up pagination callbacks for integration with pagination.js
  window.fetchCallback = loadAddressesPage;
  window.paginationCallback = loadAddressesPage;
  
  // Initialize Geoapify when modal is shown
  const addressModal = document.getElementById('addressModal');
  if (addressModal) {
    addressModal.addEventListener('shown.bs.modal', function() {
      const API_KEY = '<%= geoapifyApiKey %>';
      new GeoapifyAddressForm(API_KEY);
    });
  }
  
  // Initialize with current page data
  currentPage = <%= typeof currentPage !== 'undefined' ? currentPage : 1 %>;
  totalPages = <%= typeof totalPages !== 'undefined' ? totalPages : 1 %>;
  
  console.log(`📄 Address book initialized: page ${currentPage}/${totalPages}`);
});

// ✅ NEW: Load specific page of addresses (called by pagination.js)
async function loadAddressesPage(page = 1) {
  if (isLoading) return;
  
  isLoading = true;
  currentPage = page;
  
  // Show loading state
  const grid = document.getElementById('addressesGrid');
  if (grid) {
    grid.classList.add('loading');
  }
  
  try {
    console.log(`🔄 Loading addresses page ${page}...`);
    
    const response = await fetch(`/api/addresses/paginated?page=${page}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('📦 Paginated response:', result);

    if (result && result.success) {
      addresses = result.data.addresses || [];
      currentPage = result.data.currentPage;
      totalPages = result.data.totalPages;
      
      console.log(`✅ Loaded ${addresses.length} addresses for page ${currentPage}/${totalPages}`);
      
      // Render addresses
      renderAddresses();
      
      // ✅ Update pagination UI using existing utilities
      if (window.PaginationUtils && totalPages > 1) {
        window.PaginationUtils.updateState(currentPage, totalPages);
      }
      
    } else {
      console.error('❌ API returned error:', result ? result.message : 'Unknown error');
      showError(result && result.message ? result.message : 'Failed to load addresses');
    }
  } catch (error) {
    console.error('❌ Error loading addresses:', error);
    showError(`Failed to load addresses: ${error.message}`);
    
    // Remove loading states from pagination buttons on error
    if (window.PaginationUtils) {
      const loadingButtons = document.querySelectorAll('.page-link[data-original-content]');
      loadingButtons.forEach(button => window.PaginationUtils.removeLoading(button));
    }
  } finally {
    isLoading = false;
    
    // Hide loading state
    if (grid) {
      grid.classList.remove('loading');
    }
  }
}

// ✅ UPDATED: Render addresses in grid
function renderAddresses() {
  const grid = document.getElementById('addressesGrid');
  if (!grid) {
    console.error('❌ addressesGrid element not found');
    return;
  }
  
  if (addresses.length === 0) {
    grid.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">
          <i class="bi bi-geo-alt"></i>
        </div>
        <h4>No addresses found</h4>
        <p>Add your first delivery address to get started</p>
        <button class="btn btn-primary" onclick="addNewAddress()">
          <i class="bi bi-plus me-2"></i> Add Address
        </button>
      </div>
    `;
    return;
  }
  
  const addressesHTML = addresses.map(address => `
    <div class="address-card ${address.isDefault ? 'default' : ''}">
      ${address.isDefault ? '<div class="default-badge"><i class="bi bi-star-fill me-1"></i> Default</div>' : ''}
      
      <div class="address-type">
        <i class="bi bi-${getAddressIcon(address.addressType)}"></i>
        ${capitalizeFirst(address.addressType)}
      </div>
      
      <div class="address-details">
        <h5>${address.name}</h5>
        <div class="address-text">
          ${address.landMark}<br>
          ${address.city}, ${address.state} - ${address.pincode}<br>
          <strong>Phone:</strong> ${address.phone}
          ${address.altPhone ? `<br><strong>Alt Phone:</strong> ${address.altPhone}` : ''}
        </div>
      </div>
      
      <div class="address-actions">
        <button class="btn btn-outline-primary btn-sm" onclick="editAddress('${address._id}')">
          <i class="bi bi-pencil me-1"></i> Edit
        </button>
        ${!address.isDefault ? `
          <button class="btn btn-outline-success btn-sm" onclick="setDefaultAddress('${address._id}')">
            <i class="bi bi-star me-1"></i> Set Default
          </button>
        ` : ''}
        <button class="btn btn-outline-danger btn-sm" onclick="deleteAddress('${address._id}')">
          <i class="bi bi-trash me-1"></i> Delete
        </button>
      </div>
    </div>
  `).join('');

  grid.innerHTML = addressesHTML;
}

// ✅ UPDATED: Refresh current page after CRUD operations
async function setDefaultAddress(addressId) {
  try {
    console.log('🔄 Setting default address:', addressId);
    
    const response = await fetch(`/api/address/${addressId}/default`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const data = await response.json();

    if (data && data.success) {
      console.log('✅ Default address set successfully');
      showSuccess(data.message || 'Default address updated successfully');
      
      // ✅ Reload current page to reflect changes
      await loadAddressesPage(currentPage);
      
    } else {
      showError(data && data.message ? data.message : 'Failed to set default address');
    }
  } catch (error) {
    console.error('❌ Error setting default address:', error);
    showError(`Failed to set default address: ${error.message}`);
  }
}

async function deleteAddress(addressId) {
  // Use SweetAlert for confirmation
  if (typeof Swal !== 'undefined') {
    const result = await Swal.fire({
      title: 'Delete Address?',
      text: 'Are you sure you want to delete this address? This action cannot be undone.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      confirmButtonText: '<i class="bi bi-trash me-1"></i> Yes, Delete',
      cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',
      reverseButtons: true
    });

    if (!result.isConfirmed) {
      return;
    }
  } else {
    if (!confirm('Are you sure you want to delete this address?')) {
      return;
    }
  }

  try {
    const response = await fetch(`/api/address/${addressId}`, {
      method: 'DELETE'
    });

    const data = await response.json();

    if (data.success) {
      showSuccess(data.message);
      
      // ✅ Smart page handling: if deleting last address on page > 1, go to previous page
      const currentAddressCount = addresses.length;
      if (currentAddressCount === 1 && currentPage > 1) {
        await loadAddressesPage(currentPage - 1);
      } else {
        await loadAddressesPage(currentPage);
      }
    } else {
      showError(data.message);
    }
  } catch (error) {
    console.error('Error deleting address:', error);
    showError('Failed to delete address');
  }
}

// ✅ Helper functions
function getAddressIcon(type) {
  switch(type) {
    case 'home': return 'house';
    case 'office': return 'briefcase';
    case 'other': return 'geo-alt';
    default: return 'geo-alt';
  }
}

function capitalizeFirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function addNewAddress() {
  currentEditingId = null;
  document.getElementById('addressModalLabel').innerHTML = '<i class="bi bi-plus me-2"></i> Add New Address';
  
  const modal = new bootstrap.Modal(document.getElementById('addressModal'));
  
  document.getElementById('addressModal').addEventListener('shown.bs.modal', function resetForm() {
    const form = document.getElementById('addressForm');
    if (form) {
      form.reset();
      
      form.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
        el.classList.remove('is-invalid', 'is-valid');
      });
      
      form.querySelectorAll('.error-message').forEach(el => {
        el.style.display = 'none';
      });
      
      const districtSelect = document.getElementById('district');
      if (districtSelect) {
        districtSelect.innerHTML = '<option value="">Select District</option>';
        districtSelect.disabled = true;
      }
      
      console.log('✅ Form reset for new address');
    }
    
    this.removeEventListener('shown.bs.modal', resetForm);
  });
  
  modal.show();
}

async function editAddress(addressId) {
  currentEditingId = addressId;
  document.getElementById('addressModalLabel').innerHTML = '<i class="bi bi-pencil me-2"></i> Edit Address';
  
  const address = addresses.find(addr => addr._id === addressId);
  if (!address) {
    showError('Address not found');
    return;
  }

  const modal = new bootstrap.Modal(document.getElementById('addressModal'));
  
  document.getElementById('addressModal').addEventListener('shown.bs.modal', function populateForm() {
    const form = document.getElementById('addressForm');
    if (form) {
      form.querySelector('#fullName').value = address.name || '';
      form.querySelector('#mobileNumber').value = address.phone || '';
      form.querySelector('#altPhone').value = address.altPhone || '';
      form.querySelector('#addressDetails').value = address.landMark || '';
      form.querySelector('#city').value = address.city || '';
      form.querySelector('#pincode').value = address.pincode || '';
      
      const addressTypeRadio = form.querySelector(`input[name="addressType"][value="${address.addressType}"]`);
      if (addressTypeRadio) {
        addressTypeRadio.checked = true;
      }
      
      const makeDefaultCheck = form.querySelector('#makeDefault');
      if (makeDefaultCheck) {
        makeDefaultCheck.checked = address.isDefault;
      }
      
      const stateSelect = form.querySelector('#state');
      if (stateSelect && address.state) {
        stateSelect.value = address.state;
        stateSelect.dispatchEvent(new Event('change'));
        
        setTimeout(() => {
          const districtSelect = form.querySelector('#district');
          if (districtSelect && address.district) {
            districtSelect.value = address.district;
          }
        }, 200);
      }
      
      console.log('✅ Form populated for editing address:', addressId);
    }
    
    this.removeEventListener('shown.bs.modal', populateForm);
  });
  
  modal.show();
}

// ✅ Handle form submission to refresh current page after add/edit
document.addEventListener('DOMContentLoaded', function() {
  const addressModal = document.getElementById('addressModal');
  if (addressModal) {
    addressModal.addEventListener('shown.bs.modal', function() {
      setTimeout(() => {
        const form = document.getElementById('addressForm');
        if (form && !form.hasAttribute('data-pagination-handler')) {
          form.setAttribute('data-pagination-handler', 'true');
          
          const originalHandler = form.querySelector('script')?.textContent;
          
          // Override the success callback to refresh current page
          form.addEventListener('submit', async function(e) {
            // Let the original handler run first
            // After successful submission, reload current page
            setTimeout(async () => {
              await loadAddressesPage(currentPage);
            }, 2000); // Wait for success message and modal close
          });
        }
      }, 100);
    });
  }
});

function showSuccess(message) {
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      title: 'Success!',
      text: message,
      icon: 'success',
      confirmButtonColor: '#000000'
    });
  } else {
    alert(message);
  }
}

function showError(message) {
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      title: 'Error!',
      text: message,
      icon: 'error',
      confirmButtonColor: '#000000'
    });
  } else {
    alert(message);
  }
}
</script>