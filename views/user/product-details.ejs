<% var title = product.productName %>

<div class="container my-5">
  <!-- 1. Breadcrumbs -->
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'Sneakers', href: '/shop' },
      { label: product.productName }
    ]
  }) %>


  <!-- 2. Main Content Row -->
  <div class="row gy-4">
    <!-- LEFT: Image Gallery -->
    <div class="col-md-6">
      <div class="row">
        <!-- Main Image Container -->
        <div class="col-12">
          <div class="border p-2 rounded bg-white position-relative image-gallery-container">
            <!-- Main Image with Navigation Controls -->
            <div class="main-image-wrapper position-relative" id="mainImageContainer">
              <img id="main-image" src="<%= product.mainImage %>" class="img-fluid w-100" alt="<%= product.productName %>" style="cursor: zoom-in;">

              <!-- Magnifier for hover zoom -->
              <div id="magnifier" class="magnifier">
                <img id="magnifierImage" class="magnifier-image" src="<%= product.mainImage %>" alt="Magnified view">
              </div>

              <!-- Navigation Controls -->
              <%
                const allImages = [product.mainImage, ...(product.subImages || [])];
                if (allImages.length > 1) {
              %>
                <button class="btn btn-dark btn-sm position-absolute top-50 start-0 translate-middle-y ms-2 nav-btn" id="prev-btn" style="z-index: 10; opacity: 0.8;">
                  <i class="bi bi-chevron-left"></i>
                </button>
                <button class="btn btn-dark btn-sm position-absolute top-50 end-0 translate-middle-y me-2 nav-btn" id="next-btn" style="z-index: 10; opacity: 0.8;">
                  <i class="bi bi-chevron-right"></i>
                </button>
              <% } %>
            </div>

            <!-- Image Counter -->
            <% if (allImages.length > 1) { %>
              <div class="position-absolute bottom-0 end-0 bg-dark text-white px-2 py-1 rounded-top-start" style="font-size: 0.8rem; z-index: 10;">
                <span id="current-image-index">1</span> / <%= allImages.length %>
              </div>
            <% } %>
          </div>
        </div>


      </div>

      <!-- Thumbnail Gallery -->
      <% if (allImages.length > 1) { %>
        <div class="d-flex gap-2 mt-3 overflow-auto thumbnail-gallery">
          <% allImages.forEach((img, index) => { %>
            <img src="<%= img %>"
                 class="img-thumbnail thumbnail-image <%= index === 0 ? 'active' : '' %>"
                 style="width: 80px; height: 80px; object-fit: cover; cursor: pointer; transition: all 0.3s ease;"
                 alt="Thumbnail <%= index + 1 %>"
                 data-index="<%= index %>"
                 data-src="<%= img %>">
          <% }) %>
        </div>
      <% } %>
    </div>

    <!-- RIGHT: Product Info -->
    <div class="col-md-6">
      <h2 class="fw-bold"><%= product.productName %></h2>
      <p class="text-muted mb-1"><%= product.brand %></p>

      <!-- Rating -->
      <div class="d-flex align-items-center mb-3">
        <span class="text-warning me-2">
          <% for (let i = 1; i <= 5; i++) { %>
            <% if (i <= Math.round(averageRating)) { %>
              <i class="bi bi-star-fill"></i>
            <% } else { %>
              <i class="bi bi-star"></i>
            <% } %>
          <% } %>
        </span>
        <small class="text-muted">(<%= totalReviews %> reviews)</small>
      </div>

      <!-- Price -->
      <div class="d-flex align-items-center gap-3 mb-2">
        <% if (product.variants && product.variants.length > 0) { %>
          <%
            // Calculate average sale price using the formula: regularPrice * (1 - productOffer/100)
            const calculatedPrices = product.variants.map(v => {
              const offer = v.productOffer || 0;
              return product.regularPrice * (1 - offer / 100);
            });
            const avgPrice = calculatedPrices.reduce((sum, price) => sum + price, 0) / calculatedPrices.length;
          %>
          <h4 class="text-danger mb-0" id="current-price">₹<%= avgPrice.toFixed(2) %></h4>
          <span class="text-muted text-decoration-line-through">₹<%= product.regularPrice %></span>
          <span class="badge bg-success" id="discount-badge">
            <%= Math.round(((product.regularPrice - avgPrice) / product.regularPrice) * 100) %>% OFF
          </span>
        <% } else { %>
          <h4 class="text-danger mb-0">₹0.00</h4>
          <span class="text-muted">No variants available</span>
        <% } %>
      </div>

      <div class="mb-3">
        <i class="bi bi-ticket"></i> <a href="#" class="text-decoration-none">Apply Coupon</a>
      </div>

      <!-- Size Selection -->
      <% if (product.variants && product.variants.length > 0) { %>
        <div class="mb-4">
          <h6 class="fw-semibold mb-3">Select Size</h6>
          <div class="d-flex flex-wrap gap-2" id="size-selection">
            <% product.variants.forEach((variant, index) => { %>
              <%
                // Calculate sale price using the formula: regularPrice * (1 - productOffer/100)
                const offer = variant.productOffer || 0;
                const calculatedPrice = product.regularPrice * (1 - offer / 100);
              %>
              <button
                class="btn btn-outline-dark size-btn"
                data-size="<%= variant.size %>"
                data-stock="<%= variant.stock %>"
                data-price="<%= calculatedPrice %>"
                data-variant-index="<%= index %>"
                data-offer="<%= offer %>"
                <%= variant.stock === 0 ? 'disabled' : '' %>
              >
                <%= variant.size %>
                <% if (variant.stock === 0) { %>
                  <br><small class="text-muted">Out of Stock</small>
                <% } %>
              </button>
            <% }); %>
          </div>
          <small class="text-muted mt-2 d-block">Select a size to see availability and exact price. Click outside to deselect.</small>
        </div>
      <% } %>

      <!-- Stock Display with Enhanced Styling -->
      <div class="mb-3" id="stock-display">
        <div class="d-flex align-items-center gap-2">
          <span class="fw-semibold">Stock:</span>
          <span id="stock-badge" class="badge bg-secondary px-3 py-2">
            <i class="bi bi-info-circle me-1"></i>
            Select a size to see availability
          </span>
        </div>
      </div>

      <!-- Notify Me Section (hidden by default) -->
      <div class="mb-4 d-none" id="notify-section">
        <h4 class="text-danger fw-bold mb-2">Out of Stock</h4>
        <p class="text-muted mb-3">This size is currently out of stock</p>

        <div class="border rounded p-3 bg-light">
          <div class="row g-2">
            <div class="col-8">
              <input type="email" class="form-control" id="notify-email" placeholder="Enter email to get notified" required>
            </div>
            <div class="col-4">
              <button class="btn btn-danger w-100" id="notify-btn">
                NOTIFY ME
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Product Description -->
      <div class="mb-4">
        <h6 class="fw-semibold mb-2">Description</h6>
        <p class="text-muted"><%= product.description %></p>
      </div>

      <!-- Action Buttons -->
      <div class="d-flex gap-3 mb-4" id="action-buttons">
        <button class="btn btn-dark flex-fill add-to-cart-btn" data-product-id="<%= product._id %>" id="add-to-cart-btn" disabled>
          <i class="bi bi-cart-plus me-2"></i>Add to Cart
        </button>
        <button class="btn btn-outline-danger add-to-wishlist-btn" data-product-id="<%= product._id %>" title="Add to Wishlist">
          <i class="bi bi-heart"></i>
        </button>
      </div>

      <!-- Features -->
      <div class="mb-4">
        <h6 class="fw-semibold mb-2">Features</h6>
        <ul class="list-unstyled">
          <% product.features.split(',').forEach(item => { %>
            <li class="mb-1"><i class="bi bi-check-circle text-success me-2"></i> <%= item.trim() %></li>
          <% }) %>
        </ul>
      </div>
    </div>
  </div>

  <!-- Divider -->
  <hr class="my-5">

  <!-- 4. Reviews Section -->
  <div id="reviews-section">
    <h5 class="fw-bold mb-4">Customer Reviews</h5>

    <!-- Average Rating Summary -->
    <div class="mb-4">
      <h1 class="display-4"><%= averageRating.toFixed(1) %> <small class="text-muted fs-5">/ 5</small></h1>
      <div>
        <% for (let star = 5; star >= 1; star--) { %>
          <div class="d-flex align-items-center gap-2">
            <span><%= star %> <i class="bi bi-star-fill text-warning"></i></span>
            <div class="progress flex-grow-1" style="height: 8px;">
              <div class="progress-bar bg-warning" role="progressbar" style="width: <%= ratingBreakdown[star] || 0 %>%"></div>
            </div>
            <small><%= ratingCounts[star] %></small>
          </div>
        <% } %>
      </div>
    </div>

    <!-- Review Submission Form -->
    <div class="mb-5">
      <% if (user) { %>
        <div class="border rounded p-4 bg-light">
          <h6 class="fw-semibold mb-3">Write a Review</h6>
          <form id="review-form" novalidate>
            <input type="hidden" name="productId" value="<%= product._id %>">

            <!-- Rating Stars -->
            <div class="mb-3">
              <label class="form-label">Rating *</label>
              <div class="rating-stars d-flex gap-1 mb-2">
                <% for (let i = 1; i <= 5; i++) { %>
                  <i class="bi bi-star rating-star" data-rating="<%= i %>" style="font-size: 1.5rem; cursor: pointer; color: #ddd; transition: color 0.2s ease;"></i>
                <% } %>
              </div>
              <input type="hidden" name="rating" id="rating-input" required>
              <div class="invalid-feedback">Please select a rating.</div>
            </div>

            <!-- Review Title -->
            <div class="mb-3">
              <label for="review-title" class="form-label">Review Title *</label>
              <input type="text" class="form-control" id="review-title" name="title" maxlength="100" required>
              <div class="invalid-feedback">Please provide a review title (max 100 characters).</div>
            </div>

            <!-- Review Comment -->
            <div class="mb-3">
              <label for="review-comment" class="form-label">Your Review *</label>
              <textarea class="form-control" id="review-comment" name="comment" rows="4" maxlength="1000" required placeholder="Share your experience with this product..."></textarea>
              <div class="form-text">Maximum 1000 characters</div>
              <div class="invalid-feedback">Please write your review (max 1000 characters).</div>
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-dark">
              <i class="bi bi-send me-2"></i>Submit Review
            </button>
          </form>
        </div>
      <% } else { %>
        <div class="alert alert-info d-flex align-items-center">
          <i class="bi bi-info-circle me-2"></i>
          <span>You must <a href="/login" class="alert-link">login first</a> to submit a review.</span>
        </div>
      <% } %>
    </div>

    <!-- Individual Reviews -->
    <div class="mt-4">
      <% if (reviews.length > 0) { %>
        <% reviews.forEach(r => { %>
          <div class="mb-4">
            <h6 class="mb-1"><%= r.user.fullname %></h6>
            <div class="text-warning small mb-1">
              <% for (let i = 1; i <= 5; i++) { %>
                <i class="bi <%= i <= r.rating ? 'bi-star-fill' : 'bi-star' %>"></i>
              <% } %>
            </div>
            <p><%= r.comment %></p>
          </div>
        <% }) %>
      <% } else { %>
        <p>No reviews yet.</p>
      <% } %>
    </div>
  </div>

  <!-- 5. Related Products -->
  <div class="mt-5">
    <h5 class="fw-bold mb-4">You might also like</h5>
    <div class="row">
      <% relatedProducts.forEach(rp => { %>
        <%- include('partials/product-card', { product: rp }) %>
      <% }) %>
    </div>
  </div>
</div>

<!-- Image Gallery JavaScript -->



<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Updated to work with existing HTML structure
    const mainImage = document.getElementById('main-image'); // Updated selector
    const magnifier = document.getElementById('magnifier');
    const magnifierImage = document.getElementById('magnifierImage');
    const fullscreenModal = document.getElementById('fullscreenModal');
    const fullscreenImage = document.getElementById('fullscreenImage');
    const fullscreenZoomBtn = document.getElementById('fullscreenZoomBtn');
    const imageCounter = document.getElementById('imageCounter');
    const imageTitle = document.querySelector('.image-title');
    const subImageElements = document.querySelectorAll('.thumbnail-image'); // Updated to use existing thumbnails

    let currentZoomed = false;
    let currentImageIndex = 0;
    let productImages = [];

    // Collect images for fullscreen zoom
    function collectProductImages() {
      const mainImgSrc = mainImage.getAttribute('src');
      productImages = [mainImgSrc];
      subImageElements.forEach(img => {
        const src = img.getAttribute('src');
        if (!productImages.includes(src)) {
          productImages.push(src);
        }
      });
    }

    // Update fullscreen image and counter
    function updateFullscreenImage() {
      if (fullscreenImage && imageCounter) {
        fullscreenImage.src = productImages[currentImageIndex];
        imageCounter.textContent = `${currentImageIndex + 1} / ${productImages.length}`;
      }
    }

    // Navigate fullscreen - make functions global for HTML onclick handlers
    window.previousImage = function() {
      if (currentImageIndex > 0) {
        currentImageIndex--;
        updateFullscreenImage();
      }
    }

    window.nextImage = function() {
      if (currentImageIndex < productImages.length - 1) {
        currentImageIndex++;
        updateFullscreenImage();
      }
    }

    function setupKeyboardNavigation() {
      document.addEventListener('keydown', function (event) {
        if (fullscreenModal && fullscreenModal.classList.contains('active')) {
          if (event.key === 'ArrowLeft') {
            previousImage();
          } else if (event.key === 'ArrowRight') {
            nextImage();
          } else if (event.key === 'Escape') {
            closeFullscreenZoom();
          }
        }
      });
    }

    // Magnifier logic - adapted for existing structure
    function setupMagnifier() {
      const container = document.querySelector('.main-image-wrapper'); // Use existing container
      if (!container || !magnifier || !magnifierImage) {
        console.log('Magnifier elements not found, skipping magnifier setup');
        return;
      }

      container.addEventListener('mousemove', function (e) {
        const rect = container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        magnifier.style.display = 'block';
        magnifier.style.left = `${x - magnifier.offsetWidth / 2}px`;
        magnifier.style.top = `${y - magnifier.offsetHeight / 2}px`;

        const zoomFactor = 2;
        magnifierImage.style.width = `${container.offsetWidth * zoomFactor}px`;
        magnifierImage.style.height = `${container.offsetHeight * zoomFactor}px`;

        const magnifierRect = magnifier.getBoundingClientRect();
        const mx = x / container.offsetWidth * magnifierImage.offsetWidth - magnifier.offsetWidth / 2;
        const my = y / container.offsetHeight * magnifierImage.offsetHeight - magnifier.offsetHeight / 2;

        magnifierImage.style.left = `-${mx}px`;
        magnifierImage.style.top = `-${my}px`;
      });

      container.addEventListener('mouseleave', function () {
        magnifier.style.display = 'none';
      });
    }

    function openFullscreenZoom() {
      if (fullscreenModal) {
        fullscreenModal.classList.add('active');
        currentImageIndex = 0;
        updateFullscreenImage();
      }
    }

    function closeFullscreenZoom() {
      if (fullscreenModal && fullscreenImage) {
        fullscreenModal.classList.remove('active');
        fullscreenImage.classList.remove('zoomed');
        currentZoomed = false;
      }
    }

    function toggleFullscreenZoom() {
      if (fullscreenImage) {
        currentZoomed = !currentZoomed;
        fullscreenImage.classList.toggle('zoomed', currentZoomed);
      }
    }

    // Initialize everything
    function initializeImageZoom() {
      collectProductImages();
      setupMagnifier();
      setupKeyboardNavigation();

      // Add click handler to main image for fullscreen zoom
      if (mainImage) {
        mainImage.addEventListener('click', openFullscreenZoom);
      }

      // Add click handler for fullscreen zoom button if it exists
      if (fullscreenZoomBtn) {
        fullscreenZoomBtn.addEventListener('click', toggleFullscreenZoom);
      }

      // Update magnifier image when main image changes
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
            if (magnifierImage) {
              magnifierImage.src = mainImage.src;
            }
          }
        });
      });

      if (mainImage) {
        observer.observe(mainImage, { attributes: true, attributeFilter: ['src'] });
      }
    }

    // Initialize the image zoom functionality
    initializeImageZoom();

    // Add navigation functionality for main gallery view
    function setupMainGalleryNavigation() {
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const currentIndexSpan = document.getElementById('current-image-index');
      const thumbnails = document.querySelectorAll('.thumbnail-image');

      let currentMainImageIndex = 0;

      // Function to update main image and related elements
      function updateMainImage(index) {
        if (index >= 0 && index < productImages.length) {
          currentMainImageIndex = index;

          // Update main image
          if (mainImage) {
            mainImage.src = productImages[index];
          }

          // Update magnifier image
          if (magnifierImage) {
            magnifierImage.src = productImages[index];
          }

          // Update image counter
          if (currentIndexSpan) {
            currentIndexSpan.textContent = index + 1;
          }

          // Update thumbnail active states
          thumbnails.forEach((thumb, i) => {
            thumb.classList.toggle('active', i === index);
          });

          // Update fullscreen modal current index
          currentImageIndex = index;

          console.log('Main gallery image updated to index:', index);
        }
      }

      // Previous button handler
      if (prevBtn) {
        prevBtn.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('Main gallery: Previous button clicked');
          const newIndex = currentMainImageIndex > 0 ? currentMainImageIndex - 1 : productImages.length - 1;
          updateMainImage(newIndex);
        });
      }

      // Next button handler
      if (nextBtn) {
        nextBtn.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('Main gallery: Next button clicked');
          const newIndex = currentMainImageIndex < productImages.length - 1 ? currentMainImageIndex + 1 : 0;
          updateMainImage(newIndex);
        });
      }

      // Thumbnail click handlers
      thumbnails.forEach((thumbnail, index) => {
        thumbnail.addEventListener('click', function() {
          console.log('Main gallery: Thumbnail clicked, index:', index);
          updateMainImage(index);
        });
      });

      // Keyboard navigation for main gallery
      document.addEventListener('keydown', function(e) {
        // Only handle keyboard navigation if not in fullscreen mode
        if (!fullscreenModal || !fullscreenModal.classList.contains('active')) {
          if (e.key === 'ArrowLeft') {
            console.log('Main gallery: Left arrow key pressed');
            const newIndex = currentMainImageIndex > 0 ? currentMainImageIndex - 1 : productImages.length - 1;
            updateMainImage(newIndex);
          } else if (e.key === 'ArrowRight') {
            console.log('Main gallery: Right arrow key pressed');
            const newIndex = currentMainImageIndex < productImages.length - 1 ? currentMainImageIndex + 1 : 0;
            updateMainImage(newIndex);
          }
        }
      });

      console.log('Main gallery navigation setup complete:', {
        prevBtn: !!prevBtn,
        nextBtn: !!nextBtn,
        thumbnails: thumbnails.length,
        productImages: productImages.length
      });
    }

    // Setup main gallery navigation
    setupMainGalleryNavigation();

    console.log('New image zoomer initialized with elements:', {
      mainImage: !!mainImage,
      magnifier: !!magnifier,
      magnifierImage: !!magnifierImage,
      fullscreenModal: !!fullscreenModal,
      fullscreenImage: !!fullscreenImage,
      productImages: productImages.length
    });

    // Notify Me functionality for out of stock products
    const notifyBtn = document.getElementById('notify-btn');
    const notifyEmail = document.getElementById('notify-email');

    if (notifyBtn && notifyEmail) {
      notifyBtn.addEventListener('click', async function() {
        const email = notifyEmail.value.trim();

        if (!email) {
          Swal.fire({
            icon: 'warning',
            title: 'Email Required',
            text: 'Please enter your email address to get notified.',
            confirmButtonColor: '#e03a2f'
          });
          return;
        }

        // Basic email validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid Email',
            text: 'Please enter a valid email address.',
            confirmButtonColor: '#e03a2f'
          });
          return;
        }

        // Show loading state
        const originalText = notifyBtn.innerHTML;
        notifyBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Setting up...';
        notifyBtn.disabled = true;

        try {
          // TODO: Implement actual notification signup API
          // For now, just show success message
          await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call

          Swal.fire({
            icon: 'success',
            title: 'Notification Set!',
            text: 'We\'ll notify you when this product is back in stock.',
            confirmButtonColor: '#28a745'
          });

          notifyEmail.value = '';

        } catch (error) {
          console.error('Notification signup error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Signup Failed',
            text: 'Failed to set up notification. Please try again.',
            confirmButtonColor: '#e03a2f'
          });
        } finally {
          notifyBtn.innerHTML = originalText;
          notifyBtn.disabled = false;
        }
      });
    }

    // Add to Cart functionality
    const addToCartBtn = document.querySelector('.add-to-cart-btn');
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', function() {
        const productId = this.dataset.productId;

        // Check if user is authenticated
        <% if (!user) { %>
          // Show fade-out transition and redirect to login
          document.body.style.transition = 'opacity 0.4s ease';
          document.body.style.opacity = '0';
          setTimeout(() => {
            window.location.href = '/login';
          }, 400);
          return;
        <% } %>

        // Add to cart logic for authenticated users
        // TODO: Implement actual cart functionality
        console.log('Adding product to cart:', productId);

        // Show success feedback
        const originalText = this.innerHTML;
        this.innerHTML = '<i class="bi bi-check-circle me-2"></i>Added!';
        this.classList.add('btn-success');
        this.classList.remove('btn-dark');

        setTimeout(() => {
          this.innerHTML = originalText;
          this.classList.remove('btn-success');
          this.classList.add('btn-dark');
        }, 2000);
      });
    }

    // Add to Wishlist functionality
    const addToWishlistBtn = document.querySelector('.add-to-wishlist-btn');
    if (addToWishlistBtn) {
      addToWishlistBtn.addEventListener('click', function() {
        const productId = this.dataset.productId;

        // Check if user is authenticated
        <% if (!user) { %>
          // Show fade-out transition and redirect to login
          document.body.style.transition = 'opacity 0.4s ease';
          document.body.style.opacity = '0';
          setTimeout(() => {
            window.location.href = '/login';
          }, 400);
          return;
        <% } %>

        // Add to wishlist logic for authenticated users
        // TODO: Implement actual wishlist functionality
        console.log('Adding product to wishlist:', productId);

        // Toggle heart icon and color
        const icon = this.querySelector('i');
        if (icon.classList.contains('bi-heart')) {
          icon.classList.remove('bi-heart');
          icon.classList.add('bi-heart-fill');
          this.classList.remove('btn-outline-danger');
          this.classList.add('btn-danger');
        } else {
          icon.classList.remove('bi-heart-fill');
          icon.classList.add('bi-heart');
          this.classList.remove('btn-danger');
          this.classList.add('btn-outline-danger');
        }
      });
    }

    // Review Form Functionality
    const reviewForm = document.getElementById('review-form');
    const ratingStars = document.querySelectorAll('.rating-star');
    const ratingInput = document.getElementById('rating-input');

    if (reviewForm) {
      // Rating stars interaction
      ratingStars.forEach((star, index) => {
        star.addEventListener('mouseenter', () => {
          highlightStars(index + 1);
        });

        star.addEventListener('mouseleave', () => {
          const currentRating = parseInt(ratingInput.value) || 0;
          highlightStars(currentRating);
        });

        star.addEventListener('click', () => {
          const rating = index + 1;
          ratingInput.value = rating;
          highlightStars(rating);

          // Remove any existing validation feedback
          ratingInput.classList.remove('is-invalid');
          const feedback = ratingInput.parentElement.querySelector('.invalid-feedback');
          if (feedback) feedback.style.display = 'none';
        });
      });

      function highlightStars(rating) {
        ratingStars.forEach((star, index) => {
          if (index < rating) {
            star.style.color = '#ffc107';
            star.classList.remove('bi-star');
            star.classList.add('bi-star-fill');
          } else {
            star.style.color = '#ddd';
            star.classList.remove('bi-star-fill');
            star.classList.add('bi-star');
          }
        });
      }

      // Form submission
      reviewForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Validate form
        let isValid = true;
        const formData = new FormData(this);

        // Validate rating
        if (!ratingInput.value) {
          ratingInput.classList.add('is-invalid');
          const feedback = ratingInput.parentElement.querySelector('.invalid-feedback');
          if (feedback) feedback.style.display = 'block';
          isValid = false;
        }

        // Validate title
        const titleInput = document.getElementById('review-title');
        if (!titleInput.value.trim()) {
          titleInput.classList.add('is-invalid');
          isValid = false;
        } else {
          titleInput.classList.remove('is-invalid');
        }

        // Validate comment
        const commentInput = document.getElementById('review-comment');
        if (!commentInput.value.trim()) {
          commentInput.classList.add('is-invalid');
          isValid = false;
        } else {
          commentInput.classList.remove('is-invalid');
        }

        if (!isValid) return;

        // Submit review
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Submitting...';
        submitBtn.disabled = true;

        try {
          const response = await fetch('/api/reviews', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              productId: formData.get('productId'),
              rating: parseInt(formData.get('rating')),
              title: formData.get('title'),
              comment: formData.get('comment')
            })
          });

          const result = await response.json();

          if (response.ok && result.success) {
            // Show success message
            Swal.fire({
              icon: 'success',
              title: 'Review Submitted!',
              text: 'Thank you for your review. It will be visible after approval.',
              confirmButtonColor: '#111'
            }).then(() => {
              // Reload page to show new review
              window.location.reload();
            });
          } else {
            throw new Error(result.message || 'Failed to submit review');
          }
        } catch (error) {
          console.error('Review submission error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Submission Failed',
            text: error.message || 'Failed to submit review. Please try again.',
            confirmButtonColor: '#d33'
          });
        } finally {
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      });
    }
  });

  // ========= VARIANT SELECTION FUNCTIONALITY =========
  document.addEventListener('DOMContentLoaded', function() {
    const sizeButtons = document.querySelectorAll('.size-btn');
    const currentPrice = document.getElementById('current-price');
    const discountBadge = document.getElementById('discount-badge');
    const stockBadge = document.getElementById('stock-badge');
    const addToCartBtn = document.getElementById('add-to-cart-btn');
    const notifySection = document.getElementById('notify-section');
    const regularPrice = <%= product.regularPrice %>;

    let selectedVariant = null;

    // Initialize with no variant selected - show average price
    initializeDefaultState();

    // Add click handlers to size buttons
    sizeButtons.forEach(button => {
      button.addEventListener('click', function() {
        if (!this.disabled) {
          if (this.classList.contains('active')) {
            // Deselect if already selected
            deselectVariant();
          } else {
            // Select this variant
            selectVariant(this);
          }
        }
      });
    });

    // Add click handler to deselect when clicking outside size selection
    document.addEventListener('click', function(event) {
      const sizeSelection = document.getElementById('size-selection');
      if (sizeSelection && !sizeSelection.contains(event.target) && selectedVariant) {
        deselectVariant();
      }
    });

    function selectVariant(button) {
      // Remove active class from all buttons
      sizeButtons.forEach(btn => btn.classList.remove('active'));

      // Add active class to selected button
      button.classList.add('active');

      // Get variant data
      const size = button.dataset.size;
      const stock = parseInt(button.dataset.stock);
      const price = parseFloat(button.dataset.price);
      const variantIndex = parseInt(button.dataset.variantIndex);

      selectedVariant = { size, stock, price, variantIndex };

      // Update price display
      if (currentPrice) {
        currentPrice.textContent = `₹${price.toFixed(2)}`;
      }

      // Update discount badge
      if (discountBadge && regularPrice > 0) {
        const discount = Math.round(((regularPrice - price) / regularPrice) * 100);
        discountBadge.textContent = `${discount}% OFF`;
      }

      // Show and update stock display
      if (stockBadge) {
        stockBadge.style.display = 'inline-block';
      }
      updateStockDisplay(stock);

      // Update add to cart button
      updateAddToCartButton(stock);

      // Store selected variant for cart operations
      if (addToCartBtn) {
        addToCartBtn.dataset.selectedVariant = JSON.stringify(selectedVariant);
      }
    }

    function updateStockDisplay(stock) {
      if (!stockBadge) return;

      if (stock <= 0) {
        stockBadge.className = 'badge bg-danger px-3 py-2';
        stockBadge.innerHTML = '<i class="bi bi-x-circle me-1"></i>Out of Stock';
        notifySection?.classList.remove('d-none');
      } else if (stock < 5) {
        stockBadge.className = 'badge bg-warning px-3 py-2';
        stockBadge.innerHTML = `<i class="bi bi-exclamation-triangle me-1"></i>Only ${stock} Left - Low Stock!`;
        notifySection?.classList.add('d-none');
      } else {
        stockBadge.className = 'badge bg-success px-3 py-2';
        stockBadge.innerHTML = `<i class="bi bi-check-circle me-1"></i>${stock} Available`;
        notifySection?.classList.add('d-none');
      }
    }

    function updateAddToCartButton(stock) {
      if (!addToCartBtn) return;

      if (stock <= 0) {
        addToCartBtn.disabled = true;
        addToCartBtn.innerHTML = '<i class="bi bi-x-circle me-2"></i>Out of Stock';
        addToCartBtn.classList.remove('btn-dark');
        addToCartBtn.classList.add('btn-secondary');
      } else {
        addToCartBtn.disabled = false;
        addToCartBtn.innerHTML = '<i class="bi bi-cart-plus me-2"></i>Add to Cart';
        addToCartBtn.classList.remove('btn-secondary');
        addToCartBtn.classList.add('btn-dark');
      }
    }

    function initializeDefaultState() {
      // Calculate and display average price
      const variants = Array.from(sizeButtons).map(btn => ({
        price: parseFloat(btn.dataset.price),
        offer: parseFloat(btn.dataset.offer) || 0
      }));

      if (variants.length > 0) {
        const avgPrice = variants.reduce((sum, variant) => sum + variant.price, 0) / variants.length;
        const avgOffer = variants.reduce((sum, variant) => sum + variant.offer, 0) / variants.length;

        // Update price display
        if (currentPrice) {
          currentPrice.textContent = `₹${avgPrice.toFixed(2)}`;
        }

        // Update discount badge with average discount
        if (discountBadge) {
          discountBadge.textContent = `${Math.round(avgOffer)}% OFF`;
        }
      }

      // Hide stock badge initially
      if (stockBadge) {
        stockBadge.style.display = 'none';
      }

      // Disable add to cart button (no variant selected)
      if (addToCartBtn) {
        addToCartBtn.disabled = true;
        addToCartBtn.innerHTML = '<i class="bi bi-hand-index me-2"></i>Select Size First';
        addToCartBtn.classList.remove('btn-dark');
        addToCartBtn.classList.add('btn-secondary');
        addToCartBtn.removeAttribute('data-selected-variant');
      }

      // Hide notify section
      notifySection?.classList.add('d-none');

      // Reset selected variant
      selectedVariant = null;
    }

    function deselectVariant() {
      // Remove active class from all buttons
      sizeButtons.forEach(btn => btn.classList.remove('active'));

      // Reset to default state
      initializeDefaultState();
    }
  });
</script>

<style>
/* Image Gallery Styles */
.image-gallery-container {
  overflow: hidden;
}

.main-image-wrapper {
  overflow: hidden;
}

.nav-btn {
  transition: all 0.3s ease !important;
  border-radius: 50% !important;
  width: 45px !important;
  height: 45px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  cursor: pointer !important;
  user-select: none !important;
  pointer-events: auto !important;
  z-index: 9999 !important;
  position: absolute !important;
  border: 3px solid #343a40 !important;
  background-color: #343a40 !important;
  color: white !important;
  font-size: 18px !important;
  box-shadow: 0 2px 8px rgba(0,0,0,0.3) !important;
}

.nav-btn:hover {
  opacity: 1 !important;
  background-color: #e03a2f !important;
  border-color: #e03a2f !important;
  transform: scale(1.15) !important;
  color: white !important;
  box-shadow: 0 4px 12px rgba(224, 58, 47, 0.4) !important;
}

.nav-btn:active {
  transform: scale(0.9) !important;
  box-shadow: 0 1px 4px rgba(0,0,0,0.3) !important;
}

.nav-btn:focus {
  outline: none !important;
  box-shadow: 0 0 0 3px rgba(224, 58, 47, 0.5) !important;
}

/* Ensure buttons are above ALL other elements */
.main-image-wrapper {
  position: relative !important;
  z-index: 1 !important;
}

.nav-btn i {
  pointer-events: none !important;
  font-size: inherit !important;
}

/* Specific positioning for prev/next buttons */
#prev-btn {
  left: 10px !important;
  top: 50% !important;
  transform: translateY(-50%) !important;
}

#next-btn {
  right: 10px !important;
  top: 50% !important;
  transform: translateY(-50%) !important;
}

#prev-btn:hover {
  transform: translateY(-50%) scale(1.15) !important;
}

#next-btn:hover {
  transform: translateY(-50%) scale(1.15) !important;
}

#prev-btn:active {
  transform: translateY(-50%) scale(0.9) !important;
}

#next-btn:active {
  transform: translateY(-50%) scale(0.9) !important;
}

.thumbnail-image {
  border: 2px solid transparent;
  transition: all 0.3s ease;
}

.thumbnail-image:hover {
  border-color: #e03a2f;
  transform: scale(1.05);
}

.thumbnail-image.active {
  border-color: #e03a2f;
  box-shadow: 0 0 10px rgba(224, 58, 47, 0.3);
}

/* Action Button Styles */
.add-to-cart-btn {
  transition: all 0.3s ease;
  font-weight: 600;
}

.add-to-cart-btn:hover {
  background-color: #e03a2f;
  border-color: #e03a2f;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.add-to-wishlist-btn {
  transition: all 0.3s ease;
  width: 50px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.add-to-wishlist-btn:hover {
  background-color: #e03a2f;
  border-color: #e03a2f;
  color: white;
  transform: translateY(-2px);
}

/* Stock Badge Styles */
.badge {
  font-size: 0.9rem;
  font-weight: 500;
}



/* Stock Status Styles */
.sold-out-section {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border: 2px solid #dee2e6;
  border-radius: 12px;
  padding: 1.5rem;
}

.sold-out-section h4 {
  color: #dc3545;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.sold-out-section p {
  color: #6c757d;
  margin-bottom: 1rem;
}

#notify-btn {
  transition: all 0.3s ease;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

#notify-btn:hover {
  background-color: #c82333;
  border-color: #c82333;
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

#notify-email {
  border: 2px solid #dee2e6;
  transition: all 0.3s ease;
}

#notify-email:focus {
  border-color: #e03a2f;
  box-shadow: 0 0 0 0.2rem rgba(224, 58, 47, 0.25);
}

/* Size Selection Styles */
.size-btn {
  min-width: 80px;
  height: 50px;
  border: 2px solid #dee2e6;
  background: white;
  color: #333;
  font-weight: 500;
  transition: all 0.3s ease;
  position: relative;
}

.size-btn:hover:not(:disabled) {
  border-color: #dc3545;
  background: #fff5f5;
  color: #dc3545;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.15);
}

.size-btn.active {
  border-color: #dc3545;
  background: #dc3545;
  color: white;
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
}

.size-btn:disabled {
  background: #f8f9fa;
  border-color: #e9ecef;
  color: #6c757d;
  cursor: not-allowed;
  opacity: 0.6;
}

.size-btn:disabled:hover {
  transform: none;
  box-shadow: none;
}

.size-btn small {
  font-size: 0.7em;
  line-height: 1;
}
</style>



<style>
  /* Image Zoomer 27/06/2025 */
  /* Main container for zoomable image */
  .image-zoom-container {
    position: relative;
    overflow: hidden;
  }

  /* Hover magnifier glass */
  .magnifier {
    position: absolute;
    width: 150px;
    height: 150px;
    border: 3px solid #111827;
    border-radius: 50%;
    background: white;
    display: none;
    pointer-events: none;
    z-index: 100;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }

  .magnifier-image {
    position: absolute;
    pointer-events: none;
  }

  /* Zoom overlay (if used) */
  .zoom-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    backdrop-filter: blur(5px);
  }

  .zoom-overlay.active {
    display: flex;
  }

  .zoomed-image {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    cursor: zoom-out;
    transform: scale(1);
    transition: transform 0.3s ease;
  }

  .zoomed-image.scaled {
    transform: scale(2);
    cursor: move;
  }

  /* Fullscreen modal zoom container */
  .fullscreen-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    backdrop-filter: blur(10px);
  }

  .fullscreen-modal.active {
    display: flex;
  }

  .fullscreen-content {
    position: relative;
    max-width: 95vw;
    max-height: 95vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .fullscreen-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 12px;
    cursor: zoom-in;
    transition: transform 0.3s ease;
  }

  .fullscreen-image.zoomed {
    cursor: move;
    transform: scale(2);
  }

  /* Fullscreen zoom controls (buttons) */
  .fullscreen-controls {
    position: absolute;
    top: 2rem;
    right: 2rem;
    display: flex;
    gap: 1rem;
    z-index: 10;
  }

  .zoom-btn {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    color: #111827;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .zoom-btn:hover {
    background: white;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .zoom-close {
    background: rgba(239, 68, 68, 0.9);
    color: white;
  }

  .zoom-close:hover {
    background: rgba(239, 68, 68, 1);
  }

  /* Navigation buttons in fullscreen mode */
  .fullscreen-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 50px;
    height: 50px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: #111827;
    transition: all 0.3s ease;
    z-index: 10;
  }

  .fullscreen-nav:hover {
    background: white;
    transform: translateY(-50%) scale(1.1);
  }

  .fullscreen-nav.prev {
    left: 2rem;
  }

  .fullscreen-nav.next {
    right: 2rem;
  }

  /* Info panel in fullscreen */
  .fullscreen-info {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 1rem 2rem;
    border-radius: 25px;
    text-align: center;
    backdrop-filter: blur(10px);
  }

  .image-counter {
    font-size: 0.9rem;
    opacity: 0.8;
    margin-bottom: 0.5rem;
  }

  .image-title {
    font-weight: 600;
  }

  /* Mobile-specific adjustments */
  @media (max-width: 480px) {
    .magnifier {
      display: none !important; /* Disable magnifier on mobile */
    }

    .main-image {
      cursor: pointer;
    }

    .fullscreen-controls {
      top: 1rem;
      right: 1rem;
      gap: 0.5rem;
    }

    .zoom-btn {
      width: 35px;
      height: 35px;
      font-size: 1rem;
    }

    .fullscreen-nav {
      width: 40px;
      height: 40px;
      font-size: 1.25rem;
    }

    .fullscreen-nav.prev {
      left: 1rem;
    }

    .fullscreen-nav.next {
      right: 1rem;
    }

    .fullscreen-info {
      bottom: 1rem;
      padding: 0.75rem 1.5rem;
      border-radius: 20px;
    }

    .image-counter {
      font-size: 0.8rem;
      margin-bottom: 0.25rem;
    }

    .image-title {
      font-size: 0.9rem;
    }

    .fullscreen-content {
      max-width: 100vw;
      max-height: 100vh;
      padding: 1rem;
    }

    .fullscreen-image {
      border-radius: 8px;
    }
  }

</style>

<!-- Fullscreen Modal for Image Zoom -->
<div id="fullscreenModal" class="fullscreen-modal">
  <div class="fullscreen-content">
    <img id="fullscreenImage" class="fullscreen-image" src="" alt="Fullscreen view">

    <!-- Fullscreen Controls -->
    <div class="fullscreen-controls">
      <button id="fullscreenZoomBtn" class="zoom-btn" title="Toggle Zoom">
        <i class="bi bi-zoom-in"></i>
      </button>
      <button class="zoom-btn zoom-close" onclick="document.getElementById('fullscreenModal').classList.remove('active')" title="Close">
        <i class="bi bi-x"></i>
      </button>
    </div>

    <!-- Navigation Buttons -->
    <button class="fullscreen-nav prev" onclick="previousImage()" title="Previous Image">
      <i class="bi bi-chevron-left"></i>
    </button>
    <button class="fullscreen-nav next" onclick="nextImage()" title="Next Image">
      <i class="bi bi-chevron-right"></i>
    </button>

    <!-- Info Panel -->
    <div class="fullscreen-info">
      <div id="imageCounter" class="image-counter">1 / 1</div>
      <div class="image-title"><%= product.productName %></div>
    </div>
  </div>
</div>
