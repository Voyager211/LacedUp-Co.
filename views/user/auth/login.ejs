<!-- Login Success Transition Overlay -->
<div id="login-transition-overlay" class="page-transition-overlay">
  <div class="text-center">
    <div class="transition-spinner"></div>
    <div class="transition-text" id="login-transition-text">Logging in...</div>
  </div>
</div>

<div class="container-fluid min-vh-100 d-flex align-items-center justify-content-center" style="background-color: #E5E5E5;" id="login-main-content">
  <div class="row shadow rounded overflow-hidden" style="max-width: 900px;">
    <div class="col-md-6 d-none d-md-block p-0">
      <img src="https://res.cloudinary.com/daqfxkc3u/image/upload/v1749657503/user-login-image_gcethm.jpg" alt="login" class="img-fluid h-100" style="object-fit: cover;">
    </div>

    <div class="col-md-6 bg-white p-5">
      <div class="text-center mb-3">
        <img src="https://res.cloudinary.com/daqfxkc3u/image/upload/v1749703192/laceduplogowhitebg_oundjw.png" alt="LacedUp Logo" style="height: 80px; object-fit: contain;">
      </div>
      <h3 class="fw-bold mb-3 text-center" style="color: #1A1A1A;">Log into your account</h3>

      <form id="login-form" novalidate>
        <div class="mb-3">
          <label for="email" class="form-label">Email *</label>
          <input type="email" name="email" id="email" class="form-control" placeholder="Email address" required>
        </div>
        <div class="mb-3">
          <label for="password" class="form-label">Password *</label>
          <input type="password" name="password" id="password" class="form-control" placeholder="Password" required>
        </div>

        <!-- ðŸ”½ Forgot Password link -->
        <div class="mb-3 text-end">
          <a href="/forgot-password" class="text-decoration-none text-secondary">Forgot Password?</a>
        </div>

        <button type="submit" class="btn btn-primary-custom w-100">Log In</button>
      </form>


      <div class="text-center my-3 text-secondary">or</div>

      <a href="/google"
        class="btn border d-flex align-items-center justify-content-center gap-2 w-100 google-btn"
        style="background-color: #fff; color: #555; border: 1px solid #ddd;">
        <img src="https://res.cloudinary.com/daqfxkc3u/image/upload/v1749704859/Made_by_Google_ybszlk.jpg"
            alt="Google Logo" width="20" height="20" class="me-2">
        <span>Sign up with Google</span>
      </a>


      <p class="mt-4 text-center text-secondary">Don't have an account? <a href="/signup">Sign Up</a></p>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/js/validation.js"></script>
<script>
  // Login transition utilities
  const LoginTransition = {
    overlay: null,
    transitionText: null,
    mainContent: null,

    init() {
      this.overlay = document.getElementById('login-transition-overlay');
      this.transitionText = document.getElementById('login-transition-text');
      this.mainContent = document.getElementById('login-main-content');
    },

    show(text = 'Logging in...') {
      if (!this.overlay) this.init();
      this.transitionText.textContent = text;
      this.overlay.classList.add('show');
    },

    hide() {
      if (!this.overlay) this.init();
      this.overlay.classList.remove('show');
    },

    fadeOut(callback, text = 'Logging in...') {
      if (!this.mainContent) this.init();
      this.mainContent.style.opacity = '0';
      this.show(text);
      setTimeout(() => {
        if (callback) callback();
      }, 300);
    }
  };

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    LoginTransition.init();

    // Initialize form validation
    const validator = new FormValidator('login-form');

    // Override the form submission to handle validation
    const originalSubmitForm = validator.submitForm;
    validator.submitForm = async function() {
      const email = document.getElementById('email').value.trim();
      const password = document.getElementById('password').value.trim();

      try {
        const res = await fetch('/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        });

        const data = await res.json();

        if (res.ok) {
          // Start login success transition
          LoginTransition.fadeOut(() => {
            // Redirect to home page after transition
            window.location.href = '/home';
          }, 'Welcome back!');
        } else {
          const errorMessage = data.error || 'Invalid credentials';

          // Check if it's a blocked user error
          if (errorMessage.includes('blocked')) {
            Swal.fire({
              icon: 'warning',
              title: 'Account Blocked',
              text: errorMessage,
              confirmButtonText: 'Contact Support',
              confirmButtonColor: '#dc3545',
              showCancelButton: true,
              cancelButtonText: 'OK'
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Login Failed',
              text: errorMessage
            });
          }
        }
      } catch (err) {
        Swal.fire({
          icon: 'error',
          title: 'Oops!',
          text: 'Something went wrong!'
        });
      }
    };
  });
</script>
