<div class="container-fluid min-vh-100 d-flex align-items-center justify-content-center" style="background-color: #E5E5E5;">
  <div class="row shadow rounded overflow-hidden" style="max-width: 500px;">
    <div class="col bg-white p-5">
      <div class="text-center mb-3">
        <a href="/" class="text-decoration-none">
          <img src="https://res.cloudinary.com/daqfxkc3u/image/upload/v1749703192/laceduplogowhitebg_oundjw.png" alt="LacedUp Logo" style="height: 70px; cursor: pointer;">
        </a>
      </div>
      <h4 class="fw-bold text-center mb-3">Reset Password</h4>

      <form id="reset-form">
        <input type="hidden" name="email" id="email" value="<%= email %>">
        <div class="mb-3">
          <div class="position-relative">
            <input type="password" id="newPassword" name="newPassword" class="form-control pe-5" placeholder="New password" required>
            <div class="password-toggle-btn" id="new-password-toggle" aria-label="Toggle new password visibility">
              <i class="bi bi-eye-slash" id="new-password-toggle-icon"></i>
            </div>
          </div>
        </div>
        <div class="mb-3">
          <div class="position-relative">
            <input type="password" id="confirmPassword" name="confirmPassword" class="form-control pe-5" placeholder="Confirm password" required>
            <div class="password-toggle-btn" id="confirm-password-toggle" aria-label="Toggle confirm password visibility">
              <i class="bi bi-eye-slash" id="confirm-password-toggle-icon"></i>
            </div>
          </div>
        </div>
        <button type="submit" class="btn btn-primary-custom w-100">Update Password</button>
      </form>
    </div>
  </div>
</div>

<style>
  /* Fix visual interference between password visibility toggle and HTML5 validation icons */
  input.form-control.is-invalid {
    background-image: none !important;
  }

  /* Enhanced password visibility toggle with transparent container */
  .password-toggle-btn {
    position: absolute !important;
    top: 50% !important;
    right: 8px !important;
    transform: translateY(-50%) !important;
    border: none !important;
    background: transparent !important;
    padding: 4px !important;
    color: #6c757d !important;
    z-index: 999 !important;
    width: 28px !important;
    height: 28px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
    border-radius: 4px !important;
    transition: all 0.3s ease !important;
  }

  .password-toggle-btn:hover {
    background: rgba(224, 58, 47, 0.1) !important;
    color: #E03A2F !important;
  }

  .password-toggle-btn:focus {
    outline: none !important;
    box-shadow: 0 0 0 2px rgba(224, 58, 47, 0.2) !important;
    background: rgba(224, 58, 47, 0.05) !important;
  }

  .password-toggle-btn:active {
    background: rgba(224, 58, 47, 0.15) !important;
    transform: translateY(-50%) scale(0.95) !important;
  }

  /* Ensure parent container has proper positioning context */
  .position-relative {
    position: relative !important;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Prevent back button navigation
  (function() {
    if (window.history && window.history.pushState) {
      window.history.pushState('forward', null, window.location.href);
      window.addEventListener('popstate', function() {
        window.history.pushState('forward', null, window.location.href);
      });
    }
  })();

  document.addEventListener('DOMContentLoaded', function() {
    // Password visibility toggle functionality
    function setupPasswordToggle(toggleId, inputId, iconId) {
      const toggle = document.getElementById(toggleId);
      const input = document.getElementById(inputId);
      const icon = document.getElementById(iconId);

      if (toggle && input && icon) {
        toggle.addEventListener('click', function() {
          const isPassword = input.type === 'password';

          // Toggle input type
          input.type = isPassword ? 'text' : 'password';

          // Toggle icon
          if (isPassword) {
            icon.classList.remove('bi-eye-slash');
            icon.classList.add('bi-eye');
            toggle.setAttribute('aria-label', toggle.getAttribute('aria-label').replace('Toggle', 'Hide'));
          } else {
            icon.classList.remove('bi-eye');
            icon.classList.add('bi-eye-slash');
            toggle.setAttribute('aria-label', toggle.getAttribute('aria-label').replace('Hide', 'Toggle'));
          }
        });

        // Add hover effect
        toggle.addEventListener('mouseenter', function() {
          this.style.color = '#E03A2F';
        });

        toggle.addEventListener('mouseleave', function() {
          this.style.color = '#6c757d';
        });
      }
    }

    // Setup toggles for both password fields
    setupPasswordToggle('new-password-toggle', 'newPassword', 'new-password-toggle-icon');
    setupPasswordToggle('confirm-password-toggle', 'confirmPassword', 'confirm-password-toggle-icon');
  });

  document.getElementById('reset-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const email = document.getElementById('email').value.trim();
    const newPassword = document.getElementById('newPassword').value.trim();
    const confirmPassword = document.getElementById('confirmPassword').value.trim();

    // Basic client-side validation
    if (!newPassword || !confirmPassword) {
      Swal.fire({
        icon: 'warning',
        title: 'Missing Information',
        text: 'Please fill in all password fields.'
      });
      return;
    }

    if (newPassword !== confirmPassword) {
      Swal.fire({
        icon: 'warning',
        title: 'Password Mismatch',
        text: 'Passwords do not match. Please try again.'
      });
      return;
    }

    if (newPassword.length < 6) {
      Swal.fire({
        icon: 'warning',
        title: 'Password Too Short',
        text: 'Password must be at least 6 characters long.'
      });
      return;
    }

    try {
      const res = await fetch('/reset-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, newPassword, confirmPassword })
      });

      const data = await res.json();

      if (res.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Password Updated!',
          text: 'Your password has been successfully updated.',
          showConfirmButton: false,
          timer: 2000
        }).then(() => {
          window.location.href = '/login';
        });
      } else {
        // Handle specific error cases with enhanced messaging
        if (data.error && data.error.includes('same as your current password')) {
          Swal.fire({
            icon: 'warning',
            title: 'Same Password Detected',
            text: data.error,
            confirmButtonText: 'Choose Different Password',
            confirmButtonColor: '#E03A2F',
            footer: '<small>For security reasons, your new password must be different from your current password.</small>'
          });
        } else if (data.error && data.error.includes('Passwords do not match')) {
          Swal.fire({
            icon: 'warning',
            title: 'Password Mismatch',
            text: 'The passwords you entered do not match. Please try again.'
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Password Update Failed',
            text: data.error || 'Unable to update password. Please try again.'
          });
        }
      }
    } catch (err) {
      console.error('Reset password error:', err);
      Swal.fire({
        icon: 'error',
        title: 'Connection Error',
        text: 'Unable to connect to server. Please check your internet connection and try again.'
      });
    }
  });
</script>