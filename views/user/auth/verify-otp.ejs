<div class="container-fluid min-vh-100 d-flex align-items-center justify-content-center" style="background-color: #E5E5E5;">
  <div class="row shadow rounded overflow-hidden" style="max-width: 500px;">
    <div class="col bg-white p-5">
      <div class="text-center mb-3">
        <a href="/" class="text-decoration-none">
          <img src="https://res.cloudinary.com/daqfxkc3u/image/upload/v1749703192/laceduplogowhitebg_oundjw.png" alt="LacedUp Logo" style="height: 70px; cursor: pointer;">
        </a>
      </div>
      <h4 class="fw-bold text-center mb-3">Verify OTP</h4>
      <p class="text-center text-secondary">An OTP has been sent to <strong><%= email %></strong></p>

      <form id="otp-form" class="mt-4">
        <input type="hidden" name="email" id="email" value="<%= email %>">
        <div class="mb-3">
          <input type="text" id="otp" name="otp" class="form-control text-center" maxlength="6" placeholder="Enter 6-digit OTP" required>
        </div>
        <button type="submit" class="btn btn-primary-custom w-100">Verify OTP</button>
      </form>

      <p class="text-center text-secondary mt-3" id="timer">Code expires in: <span id="countdown">01:00</span></p>

      <!-- Loading indicator -->
      <div id="otp-loading" class="text-center mt-2" style="display: none;">
        <div class="otp-spinner"></div>
        <p class="loading-text">Sending OTP</p>
      </div>

      <div class="text-center mt-3">
        <a href="#" id="resend-btn" class="text-decoration-none" style="color: #007bff; cursor: pointer; display: none;">
          <span id="resend-text"></span>
        </a>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Prevent back button navigation
  (function() {
    if (window.history && window.history.pushState) {
      window.history.pushState('forward', null, window.location.href);
      window.addEventListener('popstate', function() {
        window.history.pushState('forward', null, window.location.href);
      });
    }
  })();

  const form = document.getElementById('otp-form');
  const countdownSpan = document.getElementById('countdown');
  const resendBtn = document.getElementById('resend-btn');
  const resendText = document.getElementById('resend-text');
  const otpLoading = document.getElementById('otp-loading');
  let timer = 60; // 60 seconds (1 minute) for OTP expiration
  let timerInterval;
  let otpExpired = false; // Track if OTP has expired
  const email = document.getElementById('email').value.trim();
  const timerKey = `otp_timer_${email}_verify`; // Unique key for this email and page

  // Timer persistence functions
  function initializeTimer() {
    const storedStartTime = localStorage.getItem(timerKey);
    const currentTime = Date.now();
    
    if (storedStartTime) {
      // Calculate elapsed time since timer started
      const elapsedSeconds = Math.floor((currentTime - parseInt(storedStartTime)) / 1000);
      const remainingTime = 60 - elapsedSeconds;
      
      if (remainingTime > 0) {
        timer = remainingTime;
      } else {
        // Timer has already expired
        timer = 0;
        otpExpired = true;
        localStorage.removeItem(timerKey);
        showOTPExpiredAlert();
        return;
      }
    } else {
      // First time loading, store start time
      localStorage.setItem(timerKey, currentTime.toString());
      timer = 60;
    }
    
    // Update display immediately to prevent flash of default time
    updateCountdownDisplay();
  }

  function resetTimer() {
    // Clear existing timer data and start fresh
    localStorage.removeItem(timerKey);
    localStorage.setItem(timerKey, Date.now().toString());
    timer = 60;
    otpExpired = false;
  }

  function clearTimerData() {
    localStorage.removeItem(timerKey);
  }

  // Loading functions
  function showOTPLoading() {
    otpLoading.style.display = 'block';
    setTimeout(() => {
      otpLoading.classList.add('show');
    }, 10);
  }

  function hideOTPLoading() {
    otpLoading.classList.remove('show');
    setTimeout(() => {
      otpLoading.style.display = 'none';
    }, 300);
  }

  function updateCountdownDisplay() {
    const minutes = Math.floor(timer / 60);
    const seconds = timer % 60;
    const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    countdownSpan.textContent = formattedTime;
  }

  function updateCountdown() {
    updateCountdownDisplay();
    
    if (timer > 0) {
      timer--;
    } else {
      clearInterval(timerInterval);
      otpExpired = true;
      // OTP expired, show expiration alert
      showOTPExpiredAlert();
    }
  }

  function showOTPExpiredAlert() {
    Swal.fire({
      icon: 'warning',
      title: 'OTP Expired!',
      text: 'Your OTP has expired. Please request a new one to continue.',
      confirmButtonText: 'Request New OTP',
      confirmButtonColor: '#e03a2f',
      allowOutsideClick: false,
      allowEscapeKey: false
    }).then((result) => {
      if (result.isConfirmed) {
        // Automatically trigger resend OTP
        resendBtn.click();
      }
    });
  }

  // Start timer on page load
  document.addEventListener('DOMContentLoaded', function() {
    initializeTimer();
    timerInterval = setInterval(updateCountdown, 1000);
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Check if OTP has expired
    if (otpExpired) {
      Swal.fire({
        icon: 'warning',
        title: 'OTP Expired!',
        text: 'Your OTP has expired. Please request a new one.',
        confirmButtonText: 'Request New OTP',
        confirmButtonColor: '#e03a2f'
      }).then((result) => {
        if (result.isConfirmed) {
          resendBtn.click();
        }
      });
      return;
    }

    const email = document.getElementById('email').value.trim();
    const otp = document.getElementById('otp').value.trim();

    try {
      const res = await fetch('/verify-otp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, otp })
      });

      const data = await res.json();
      if (res.ok) {
        // Clear timer data on successful verification
        clearTimerData();
        clearInterval(timerInterval);
        
        Swal.fire({
          icon: 'success',
          title: 'OTP Verified',
          showConfirmButton: false,
          timer: 1000
        }).then(() => {
          window.location.href = '/home';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Verification Failed',
          text: data.error || 'Invalid OTP'
        });
      }
    } catch (err) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong!'
      });
    }
  });

  resendBtn.addEventListener('click', async (e) => {
    e.preventDefault();

    const email = document.getElementById('email').value.trim();

    try {
      // Show loading indicator
      showOTPLoading();

      // Show loading state on button
      const originalText = resendText.innerHTML;
      resendText.innerHTML = '';
      resendBtn.style.pointerEvents = 'none';
      resendBtn.style.color = '#6c757d';

      const res = await fetch('/resend-otp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      });

      const data = await res.json();
      
      // Hide loading indicator before showing SweetAlert
      hideOTPLoading();
      
      // Small delay to ensure loading disappears before SweetAlert appears
      setTimeout(() => {
        if (res.ok) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Sent!',
            text: 'A new OTP has been sent to your email.',
            showConfirmButton: false,
            timer: 1500
          });

          // Reset timer and expiration flag
          clearInterval(timerInterval);
          resetTimer();
          timerInterval = setInterval(updateCountdown, 1000);
          
          // Reset button state
          resendText.innerHTML = 'Resend OTP';
          resendBtn.style.pointerEvents = 'auto';
          resendBtn.style.color = '#007bff';
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.error || 'Could not resend OTP.'
          });

          resendText.innerHTML = originalText;
          resendBtn.style.pointerEvents = 'auto';
          resendBtn.style.color = '#007bff';
        }
      }, 100);

    } catch (err) {
      // Hide loading indicator on error
      hideOTPLoading();
      
      setTimeout(() => {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong!'
        });

        resendText.innerHTML = 'Resend OTP';
        resendBtn.style.pointerEvents = 'auto';
        resendBtn.style.color = '#007bff';
      }, 100);
    }
  });
</script>

<style>
/* OTP Loading Styles */
#otp-loading {
  opacity: 0;
  transition: opacity 0.3s ease;
}

#otp-loading.show {
  opacity: 1;
}

.otp-spinner {
  width: 24px;
  height: 24px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #e03a2f;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 0.5rem auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-text {
  margin: 0;
  color: #6c757d;
  font-size: 0.875rem;
  font-weight: 500;
}
</style>