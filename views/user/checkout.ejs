<% var title = "Checkout" %>

<!-- Checkout Page Specific CSS -->
<link rel="stylesheet" href="/css/checkout.css">

<!-- Breadcrumbs - Positioned correctly below navbar -->
<div class="container my-4">
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'Cart', href: '/cart' },
      { label: 'Checkout' }
    ]
  }) %>
</div>

<!-- Main Checkout Container -->
<div class="container pb-4 checkout-content">
    <!-- Checkout Header - Styled like cart header bar -->
    <div class="checkout-header-bar">
        <h1 class="checkout-title">
            <i class="bi bi-credit-card me-2"></i>Checkout
        </h1>
    </div>

    <!-- Main Content -->
    <div class="main-checkout-content">
        <!-- Left Side - Address and Payment (Vertical Stack) -->
        <div class="checkout-left">
            <!-- Delivery Address Section -->
            <div class="section-card">
              <div class="section-title">
                  <div>
                      <i class="bi bi-geo-alt"></i>
                      Delivery Address
                  </div>
                  <button class="btn-add-new-address" onclick="showAddAddressModal()">
                      <i class="bi bi-plus-circle"></i> Add New Address
                  </button>
              </div>

              <!-- Address Container - Will be populated by JavaScript -->
              <div id="addressContainer">
                  <!-- Loading state -->
                  <div class="loading-state" id="addressLoadingState">
                      <div class="spinner-border" role="status">
                          <span class="visually-hidden">Loading...</span>
                      </div>
                      <p>Loading addresses...</p>
                  </div>
              </div>
            </div> 

            <!-- Payment Method Section -->
            <div class="section-card">
                <div class="section-title">
                    <div>
                        <i class="bi bi-credit-card"></i>
                        Payment Method
                    </div>
                </div>

                <!-- Cash on Delivery -->
                <div class="payment-option selected">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="cod" checked onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-cash-coin"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Cash on Delivery</h6>
                            <p>Pay when your order is delivered</p>
                        </div>
                    </label>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="bi bi-info-circle"></i> You can pay in cash when your order arrives at your doorstep.
                        </small>
                    </div>
                </div>

                <!-- Credit/Debit Card -->
                <div class="payment-option">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="card" onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-credit-card"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Credit/Debit Card</h6>
                            <p>Visa, MasterCard, American Express</p>
                        </div>
                    </label>
                </div>

                <!-- UPI Payment -->
                <div class="payment-option">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="upi" onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-phone"></i>
                        </div>
                        <div class="payment-info">
                            <h6>UPI Payment</h6>
                            <p>Pay using Google Pay, PhonePe, Paytm</p>
                        </div>
                    </label>
                </div>

                <!-- Net Banking -->
                <div class="payment-option">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="netbanking" onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-bank"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Net Banking</h6>
                            <p>Pay directly from your bank account</p>
                        </div>
                    </label>
                </div>

                <!-- Continue Button -->
                <button class="btn-continue" onclick="proceedToPayment()">
                    <i class="bi bi-check-circle"></i> PLACE ORDER
                </button>
            </div>
            <!-- Back to Cart -->
            <a href="/cart" class="btn-back">
                <i class="bi bi-arrow-left"></i> Back to Cart
            </a>
        </div>

        <!-- Right Side - Order Summary (styled exactly like cart page) -->
        <div class="checkout-right">
            <div class="order-summary">
                <!-- Summary Header -->
                <div class="summary-header">
                    <h5 class="summary-title">
                        <i class="bi bi-receipt me-2"></i>Order Summary
                    </h5>
                </div>

                <!-- Summary Content -->
                <div class="summary-content">
                    <div class="section-subtitle">ITEMS IN CART (<%= totalItemCount || 0 %>)</div>

                    <!-- Order Items -->
                    <% if (cartItems && cartItems.length > 0) { %>
                        <% cartItems.forEach(item => { %>
                            <div class="order-item">
                                <% 
                                    // Multiple fallback options for product image
                                    let imageSrc = '/images/placeholder.svg';
                                    let productName = 'Product Name';
                                    
                                    // Try to get image from productId (main fallback)
                                    if (item.productId && item.productId.mainImage) {
                                        // Check if mainImage already contains the full path
                                        imageSrc = item.productId.mainImage.startsWith('/') ? 
                                                   item.productId.mainImage : 
                                                   '/uploads/products/' + item.productId.mainImage;
                                        productName = item.productId.productName || 'Product Name';
                                    }
                                    // Try to get image from product (additional fallback)
                                    else if (item.product && item.product.mainImage) {
                                        imageSrc = item.product.mainImage.startsWith('/') ? 
                                                   item.product.mainImage : 
                                                   '/uploads/products/' + item.product.mainImage;
                                        productName = item.product.productName || 'Product Name';
                                    }
                                    // Try to get image from subImages if mainImage is not available
                                    else if (item.productId && item.productId.subImages && item.productId.subImages.length > 0) {
                                        const subImage = item.productId.subImages[0];
                                        imageSrc = subImage.startsWith('/') ? 
                                                   subImage : 
                                                   '/uploads/products/' + subImage;
                                        productName = item.productId.productName || 'Product Name';
                                    }
                                    else if (item.product && item.product.subImages && item.product.subImages.length > 0) {
                                        const subImage = item.product.subImages[0];
                                        imageSrc = subImage.startsWith('/') ? 
                                                   subImage : 
                                                   '/uploads/products/' + subImage;
                                        productName = item.product.productName || 'Product Name';
                                    }
                                %>
                                <img src="<%= imageSrc %>" 
                                     alt="<%= productName %>"
                                     class="item-image" 
                                     onerror="this.onerror=null; this.src='/images/placeholder.svg';"
                                     loading="lazy">
                                <div class="item-details">
                                    <h6><%= item.productId.productName %></h6>
                                    <p>Size: <%= item.size %> | Qty: <%= item.quantity %></p>
                                </div>
                                <div class="item-price">₹<%= Math.round(item.totalPrice) %></div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="order-item">
                            <img src="/images/placeholder.svg" alt="Product" class="item-image">
                            <div class="item-details">
                                <h6>No items in cart</h6>
                                <p>Please add items to continue</p>
                            </div>
                            <div class="item-price">₹0</div>
                        </div>
                    <% } %>

                    <!-- Price Breakdown -->
                    <div class="price-breakdown">
                        <div class="summary-row">
                            <span class="price-label">Subtotal (<%= totalItemCount || 0 %> items)</span>
                            <span class="price-value">₹<%= subtotal || 0 %></span>
                        </div>
                        <% if (totalDiscount && totalDiscount > 0) { %>
                            <div class="summary-row discount-row">
                                <span class="price-label">
                                    <i class="bi bi-tag me-1"></i>Discount
                                </span>
                                <span class="price-value text-success">-₹<%= totalDiscount %></span>
                            </div>
                        <% } %>
                        <div class="summary-row">
                            <span class="price-label">
                                <i class="bi bi-truck me-1"></i>Shipping
                            </span>
                            <span class="price-value">
                                <% if (shipping && shipping > 0) { %>
                                    ₹<%= shipping %>
                                <% } else { %>
                                    <span class="text-success fw-bold">FREE</span>
                                <% } %>
                            </span>
                        </div>

                        <div class="price-divider"></div>

                        <div class="summary-row total">
                            <span class="price-label">Total</span>
                            <span class="price-value">₹<%= total || 0 %></span>
                        </div>
                    </div>

                    <!-- Place Order Button -->
                    <button class="btn-continue" onclick="proceedToPayment()">
                        <i class="bi bi-check-circle"></i> PLACE ORDER
                    </button>

                    <!-- Back to Cart -->
                    <div class="text-center mt-3">
                        <a href="/cart" class="text-muted text-decoration-none">
                            <i class="bi bi-arrow-left"></i> Back to Cart
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Address Modal -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">
          <i class="bi bi-plus me-2"></i> Add New Address
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%- include('partials/addresses') %>
      </div>
    </div>
  </div>
</div>

<!-- Geoapify Autocomplete Script -->
<script src="https://api.geoapify.com/v1/api.js?apiKey=<%= geoapifyApiKey %>"></script>

<!-- SweetAlert2 JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
/* ========= ADDRESS MODAL FUNCTIONALITY ========= */
window.currentEditingId = null;

/* ========= CHECKOUT VALIDATION FUNCTIONALITY ========= */
console.log('Checkout page loaded - initializing validation functionality');

async function validateCheckoutStock() {
  try {
    console.log('Validating checkout stock…');
    const res = await fetch('/cart/validate-checkout-stock');
    console.log('Checkout validation status:', res.status);
    const json = await res.json();
    console.log('Checkout validation response:', json);
    return json;
  } catch (err) {
    console.error('Error validating checkout stock:', err);
    return { success: false, allValid: false, errorMessage: 'Failed to validate cart items. Please try again.' };
  }
}

function showCheckoutValidationError(v) {
  console.log('Showing checkout validation error:', v);
  const msg = v.errorMessage || v.message || 'Some items in your cart are no longer available';

  if (typeof Swal !== 'undefined') {
    Swal.fire({
      icon: 'error',
      title: 'Cannot Place Order',
      html: msg.replace(/\n/g, '<br>'),
      confirmButtonColor: '#dc3545',
      confirmButtonText: 'Return to Cart',
      allowOutsideClick: false,
      allowEscapeKey: false,
      width: 600
    }).then(r => { if (r.isConfirmed) window.location.href = '/cart'; });
  } else {
    alert(msg);
    window.location.href = '/cart';
  }
}

async function validateCheckoutOnLoad() {
  console.log('Validating checkout on page load…');
  try {
    const v = await validateCheckoutStock();
    const bad = !v.success ||
                (v.validationResults &&
                 (v.validationResults.invalidItems.length     ||
                  v.validationResults.outOfStockItems.length  ||
                  v.validationResults.unavailableItems.length));

    if (bad) setTimeout(() => showCheckoutValidationError(v), 1000);
    else console.log('Checkout validation passed – all items available');
  } catch (err) {
    console.error('Error validating checkout on load:', err);
  }
}

/* ========= UI HELPERS =========================================== */
function selectAddress(radio) {
  document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
  radio.closest('.address-card').classList.add('selected');
}

function selectPayment(radio) {
  document.querySelectorAll('.payment-option').forEach(o => o.classList.remove('selected'));
  radio.closest('.payment-option').classList.add('selected');

  document.querySelectorAll('.btn-continue').forEach(btn => {
    btn.innerHTML = radio.value === 'cod'
      ? '<i class="bi bi-check-circle"></i> PLACE ORDER'
      : '<i class="bi bi-arrow-right"></i> CONTINUE TO PAYMENT';
  });
}

/* ========= SIMPLIFIED ADDRESS FUNCTIONS ========================= */
window.showAddAddressModal = function() {
  window.currentEditingId = null;
  const modalLabel = document.getElementById('addressModalLabel');
  if (modalLabel) modalLabel.innerHTML = '<i class="bi bi-plus me-2"></i> Add New Address';

  const form = document.getElementById('addressForm');
  if (form) {
    form.reset();
    [...form.querySelectorAll('.is-invalid, .is-valid')].forEach(e => e.classList.remove('is-invalid', 'is-valid'));
    [...form.querySelectorAll('.error-message')].forEach(e => e.style.display = 'none');
    
    const districtSelect = document.getElementById('district');
    if (districtSelect) {
      districtSelect.innerHTML = '<option value="">Select District</option>';
      districtSelect.disabled = true;
    }
  }

  const modal = new bootstrap.Modal(document.getElementById('addressModal'));
  modal.show();
};

window.editAddress = async function(id) {
  window.currentEditingId = id;
  const modalLabel = document.getElementById('addressModalLabel');
  if (modalLabel) modalLabel.innerHTML = '<i class="bi bi-pencil me-2"></i> Edit Address';

  try {
    const res = await fetch(`/api/address/${id}`);
    const { success, address, message } = await res.json();
    if (!success || !address) throw new Error(message || 'Fetch failed');

    const form = document.getElementById('addressForm');
    if (form) {
      form.fullName.value = address.name || '';
      form.mobileNumber.value = address.phone || '';
      form.altPhone.value = address.altPhone || '';
      form.addressDetails.value = address.landMark || '';
      form.city.value = address.city || '';
      form.pincode.value = address.pincode || '';

      const typeRadio = form.querySelector(`input[name="addressType"][value="${address.addressType}"]`);
      if (typeRadio) typeRadio.checked = true;

      if (address.state) {
        form.state.value = address.state;
        form.state.dispatchEvent(new Event('change'));
        setTimeout(() => { form.district.value = address.district || ''; }, 300);
      }
    }

    const modal = new bootstrap.Modal(document.getElementById('addressModal'));
    modal.show();
  } catch (err) {
    console.error('Error loading address:', err);
    Swal.fire({ 
      icon: 'error', 
      title: 'Error', 
      text: 'Failed to load address data. Please try again.' 
    });
  }
};

window.deleteAddress = async function(id) {
  const ok = await Swal.fire({
    title: 'Delete Address?',
    text: 'Are you sure you want to delete this address?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#dc3545',
    cancelButtonColor: '#6c757d',
    confirmButtonText: '<i class="bi bi-trash me-1"></i> Yes, Delete'
  });
  if (!ok.isConfirmed) return;

  try {
    const res = await fetch(`/api/address/${id}`, { method: 'DELETE' });
    const json = await res.json();
    if (!json.success) throw new Error(json.message || 'Failed');

    Swal.fire({ 
      icon: 'success', 
      title: 'Deleted!', 
      timer: 1200, 
      showConfirmButton: false 
    });
    
    // ✅ CRITICAL: Reload addresses instead of removing single element
    loadCheckoutAddresses();
    
  } catch (err) {
    Swal.fire({ 
      icon: 'error', 
      title: 'Error', 
      text: err.message 
    });
  }
};

/* ========= PLACE ORDER ========================================== */
function proceedToPayment() {
  const addr = document.querySelector('input[name="deliveryAddress"]:checked');
  const pay = document.querySelector('input[name="paymentMethod"]:checked');
  if (!addr || !pay) {
    Swal.fire({ 
      icon: 'warning', 
      title: 'Missing Information', 
      text: 'Please select both delivery address and payment method' 
    });
    return;
  }

  const btn = event.target;
  const prev = btn.innerHTML;
  btn.disabled = true;
  btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Validating…';

  validateCheckoutStock()
    .then(v => {
      if (!v.success) throw v;
      if (v.checkoutEligibleItems === 0 || (v.validationResults && v.validationResults.validItems.length === 0))
        throw { errorMessage: 'No items available for checkout.', ...v };
      btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing…';
      return fetch('/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ deliveryAddressId: addr.value, paymentMethod: pay.value })
      });
    })
    .then(r => r.json().then(d => ({ ok: r.ok, data: d })))
    .then(({ ok, data }) => {
      if (ok && data.success) return window.location.href = data.redirectUrl;
      throw data;
    })
    .catch(err => {
      console.error('Order error:', err);
      if (err.code === 'STOCK_VALIDATION_FAILED') showCheckoutValidationError(err);
      else Swal.fire({ 
        icon: 'error', 
        title: 'Order Failed', 
        text: err.message || 'Failed to place order.' 
      });
    })
    .finally(() => { btn.disabled = false; btn.innerHTML = prev; });
}

function placeOrder() { proceedToPayment(); }

/* ========= CHECKOUT-SPECIFIC FORM HANDLER ==================== */
function handleCheckoutAddressSubmit(e) {
  e.preventDefault();
  e.stopImmediatePropagation();
  
  console.log('🛒 CHECKOUT: Address form submitted');
  
  const formData = new FormData(e.target);
  const addressData = Object.fromEntries(formData.entries());
  
  const submitBtn = e.target.querySelector('button[type="submit"]');
  const originalText = submitBtn.innerHTML;
  submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
  submitBtn.disabled = true;

  const url = window.currentEditingId ? `/api/address/${window.currentEditingId}` : '/api/address';
  const method = window.currentEditingId ? 'PUT' : 'POST';
  
  fetch(url, {
    method: method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(addressData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      Swal.fire({
        title: 'Success!',
        text: data.message || 'Address saved successfully',
        icon: 'success',
        confirmButtonColor: '#000000'
      });
      
      const modal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
      modal.hide();
      
      e.target.reset();
      window.currentEditingId = null;
      
      // ✅ CRITICAL: Reload addresses instead of page refresh
      loadCheckoutAddresses();
      
    } else {
      throw new Error(data.message || 'Failed to save address');
    }
  })
  .catch(error => {
    console.error('❌ Error saving address:', error);
    Swal.fire({
      title: 'Error!',
      text: `Failed to save address: ${error.message}`,
      icon: 'error',
      confirmButtonColor: '#000000'
    });
  })
  .finally(() => {
    submitBtn.innerHTML = originalText;
    submitBtn.disabled = false;
  });
}


/* ========= STATE CHANGE HANDLER FOR CHECKOUT =================== */
function attachStateChangeHandler() {
  const stateSelect = document.getElementById('state');
  const districtSelect = document.getElementById('district');
  
  if (!stateSelect || !districtSelect) {
    console.warn('State or district select not found');
    return;
  }

  // Attach change event listener to state dropdown
  stateSelect.addEventListener('change', function() {
    const selectedState = this.value;
    console.log(`🛒 CHECKOUT: State changed to: ${selectedState}`);
    
    if (selectedState) {
      // Enable district dropdown
      districtSelect.disabled = false;
      
      // Update districts using the function from addresses partial
      if (typeof updateDistricts === 'function') {
        updateDistricts(selectedState);
        console.log('✅ CHECKOUT: Districts updated');
      } else {
        console.warn('updateDistricts function not available');
      }
    } else {
      // Disable and reset district dropdown
      districtSelect.value = '';
      districtSelect.disabled = true;
      districtSelect.innerHTML = '<option value="">Select District</option>';
    }
  });

  // Set initial state of district dropdown
  if (stateSelect.value) {
    districtSelect.disabled = false;
  } else {
    districtSelect.disabled = true;
  }
  
  console.log('✅ CHECKOUT: State change handler attached');
}

/* ========= DOM READY ============================================ */
document.addEventListener('DOMContentLoaded', () => {
  console.log('Checkout DOM ready');
  document.querySelector('.checkout-content')?.classList.remove('hidden');
  
  // ✅ Load addresses on page load
  loadCheckoutAddresses();
  
  setTimeout(validateCheckoutOnLoad, 500);

  // Rest of your existing modal handler code...
  const addressModal = document.getElementById('addressModal');
  if (addressModal) {
    addressModal.addEventListener('shown.bs.modal', () => {
      setTimeout(() => {
        // Initialize Geoapify and state/district data
        if (typeof loadStateDistrictData === 'function') loadStateDistrictData();
        if (typeof GeoapifyAddressForm !== 'undefined')
          new GeoapifyAddressForm('<%= geoapifyApiKey %>');
        
        // FORCE ATTACH CHECKOUT HANDLER
        const form = document.getElementById('addressForm');
        if (form) {
          const newForm = form.cloneNode(true);
          form.parentNode.replaceChild(newForm, form);
          
          newForm.addEventListener('submit', handleCheckoutAddressSubmit, { once: false, capture: true });
          console.log('✅ CHECKOUT: Form handler forcefully attached');
        }
        
        attachStateChangeHandler();
        
      }, 200);
    });
  }
});

/* ========= ADDRESS RENDERING FUNCTIONALITY ==================== */
let checkoutAddresses = [];

// Load and render addresses for checkout
async function loadCheckoutAddresses() {
    try {
        console.log('🔄 Loading addresses for checkout...');
        
        const response = await fetch('/api/addresses');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('📦 Addresses data:', data);

        if (data && data.success) {
            checkoutAddresses = data.addresses || [];
            console.log('✅ Addresses loaded:', checkoutAddresses.length, 'addresses');
            renderCheckoutAddresses();
        } else {
            console.error('❌ API returned error:', data ? data.message : 'Unknown error');
            showAddressError(data && data.message ? data.message : 'Failed to load addresses');
        }
    } catch (error) {
        console.error('❌ Error loading addresses:', error);
        showAddressError(`Failed to load addresses: ${error.message}`);
    } finally {
        // Hide loading state
        const loadingState = document.getElementById('addressLoadingState');
        if (loadingState) {
            loadingState.style.display = 'none';
        }
    }
}

// Render addresses in checkout format
function renderCheckoutAddresses() {
    const container = document.getElementById('addressContainer');
    if (!container) {
        console.error('❌ Address container not found');
        return;
    }

    // Hide loading state
    const loadingState = document.getElementById('addressLoadingState');
    if (loadingState) {
        loadingState.style.display = 'none';
    }

    if (checkoutAddresses.length === 0) {
        container.innerHTML = `
            <div class="text-center py-4">
                <p class="text-muted">No addresses found. Please add a delivery address to continue.</p>
                <button class="btn btn-primary" onclick="showAddAddressModal()">
                    <i class="bi bi-plus-circle"></i> Add Your First Address
                </button>
            </div>
        `;
        return;
    }

    // Generate address cards HTML - EXACT same structure as server-side rendering
    const addressesHTML = checkoutAddresses.map((address, index) => `
        <div class="address-card ${index === 0 ? 'selected' : ''}" id="address-card-${address._id}">
            <label class="d-flex align-items-start">
                <input type="radio" name="deliveryAddress" value="${address._id}" ${index === 0 ? 'checked' : ''} onclick="selectAddress(this)">
                <div class="address-info flex-grow-1">
                    <h6>${address.name}</h6>
                    <p>${address.addressType}</p>
                    <p>${address.landMark}</p>
                    <p>${address.city}, ${address.state}</p>
                    <p>PIN: ${address.pincode}</p>
                    <p><i class="bi bi-telephone"></i> ${address.phone}</p>
                    ${address.altPhone ? `<p><i class="bi bi-telephone"></i> ${address.altPhone} (Alt)</p>` : ''}
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-outline-secondary" onclick="editAddress('${address._id}')">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteAddress('${address._id}')">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </label>
        </div>
    `).join('');

    container.innerHTML = addressesHTML;
    console.log('✅ Addresses rendered in checkout');
}

// Show address loading error
function showAddressError(message) {
    const container = document.getElementById('addressContainer');
    if (container) {
        container.innerHTML = `
            <div class="text-center py-4">
                <p class="text-danger">Error: ${message}</p>
                <button class="btn btn-outline-primary" onclick="loadCheckoutAddresses()">
                    <i class="bi bi-arrow-clockwise"></i> Retry
                </button>
            </div>
        `;
    }
}

</script>




