<% var title = "Checkout" %>

<!-- Checkout Page Specific CSS -->
<link rel="stylesheet" href="/css/checkout.css">

<!-- Breadcrumbs - Positioned correctly below navbar -->
<div class="container my-4">
  <%- include('partials/breadcrumb', {
    breadcrumbs: [
      { label: 'Home', href: '/' },
      { label: 'Cart', href: '/cart' },
      { label: 'Checkout' }
    ]
  }) %>
</div>

<!-- Main Checkout Container -->
<div class="container pb-4 checkout-content">
    <!-- Checkout Header - Styled like cart header bar -->
    <div class="checkout-header-bar">
        <h1 class="checkout-title">
            <i class="bi bi-credit-card me-2"></i>Checkout
        </h1>
    </div>

    <!-- Main Content -->
    <div class="main-checkout-content">
        <!-- Left Side - Address and Payment (Vertical Stack) -->
        <div class="checkout-left">
            <!-- Delivery Address Section -->
            <div class="section-card">
                <div class="section-title">
                    <div>
                        <i class="bi bi-geo-alt"></i>
                        Delivery Address
                    </div>
                    <button class="btn-add-new-address" onclick="showAddAddressModal()">
                        <i class="bi bi-plus-circle"></i> Add New Address
                    </button>
                </div>

                <!-- Address Cards -->
                <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach((address, index) => { %>
                        <div class="address-card <%= index === 0 ? 'selected' : '' %>">
                            <label class="d-flex align-items-start">
                                <input type="radio" name="deliveryAddress" value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %> onclick="selectAddress(this)">
                                <div class="address-info flex-grow-1">
                                    <h6><%= address.name %></h6>
                                    <p><%= address.addressType %></p>
                                    <p><%= address.landMark %></p>
                                    <p><%= address.city %>, <%= address.state %></p>
                                    <p>PIN: <%= address.pincode %></p>
                                    <p><i class="bi bi-telephone"></i> <%= address.phone %></p>
                                    <% if (address.altPhone) { %>
                                        <p><i class="bi bi-telephone"></i> <%= address.altPhone %> (Alt)</p>
                                    <% } %>
                                </div>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-secondary" onclick="editAddress('<%= address._id %>')">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteAddress('<%= address._id %>')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </label>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="text-center py-4">
                        <p class="text-muted">No addresses found. Please add a delivery address to continue.</p>
                        <button class="btn btn-primary" onclick="showAddAddressModal()">
                            <i class="bi bi-plus-circle"></i> Add Your First Address
                        </button>
                    </div>
                <% } %>
            </div>

            <!-- Payment Method Section -->
            <div class="section-card">
                <div class="section-title">
                    <div>
                        <i class="bi bi-credit-card"></i>
                        Payment Method
                    </div>
                </div>

                <!-- Cash on Delivery -->
                <div class="payment-option selected">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="cod" checked onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-cash-coin"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Cash on Delivery</h6>
                            <p>Pay when your order is delivered</p>
                        </div>
                    </label>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="bi bi-info-circle"></i> You can pay in cash when your order arrives at your doorstep.
                        </small>
                    </div>
                </div>

                <!-- Credit/Debit Card -->
                <div class="payment-option">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="card" onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-credit-card"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Credit/Debit Card</h6>
                            <p>Visa, MasterCard, American Express</p>
                        </div>
                    </label>
                </div>

                <!-- UPI Payment -->
                <div class="payment-option">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="upi" onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-phone"></i>
                        </div>
                        <div class="payment-info">
                            <h6>UPI Payment</h6>
                            <p>Pay using Google Pay, PhonePe, Paytm</p>
                        </div>
                    </label>
                </div>

                <!-- Net Banking -->
                <div class="payment-option">
                    <label class="d-flex align-items-center">
                        <input type="radio" name="paymentMethod" value="netbanking" onclick="selectPayment(this)">
                        <div class="payment-icon">
                            <i class="bi bi-bank"></i>
                        </div>
                        <div class="payment-info">
                            <h6>Net Banking</h6>
                            <p>Pay directly from your bank account</p>
                        </div>
                    </label>
                </div>

                <!-- Continue Button -->
                <button class="btn-continue" onclick="proceedToPayment()">
                    <i class="bi bi-check-circle"></i> PLACE ORDER
                </button>
            </div>
            <!-- Back to Cart -->
            <a href="/cart" class="btn-back">
                <i class="bi bi-arrow-left"></i> Back to Cart
            </a>
        </div>

        <!-- Right Side - Order Summary (styled exactly like cart page) -->
        <div class="checkout-right">
            <div class="order-summary">
                <!-- Summary Header -->
                <div class="summary-header">
                    <h5 class="summary-title">
                        <i class="bi bi-receipt me-2"></i>Order Summary
                    </h5>
                </div>

                <!-- Summary Content -->
                <div class="summary-content">
                    <div class="section-subtitle">ITEMS IN CART (<%= totalItemCount || 0 %>)</div>

                    <!-- Order Items -->
                    <% if (cartItems && cartItems.length > 0) { %>
                        <% cartItems.forEach(item => { %>
                            <div class="order-item">
                                <% 
                                    // Multiple fallback options for product image
                                    let imageSrc = '/images/placeholder.svg';
                                    let productName = 'Product Name';
                                    
                                    // Try to get image from productId (main fallback)
                                    if (item.productId && item.productId.mainImage) {
                                        // Check if mainImage already contains the full path
                                        imageSrc = item.productId.mainImage.startsWith('/') ? 
                                                   item.productId.mainImage : 
                                                   '/uploads/products/' + item.productId.mainImage;
                                        productName = item.productId.productName || 'Product Name';
                                    }
                                    // Try to get image from product (additional fallback)
                                    else if (item.product && item.product.mainImage) {
                                        imageSrc = item.product.mainImage.startsWith('/') ? 
                                                   item.product.mainImage : 
                                                   '/uploads/products/' + item.product.mainImage;
                                        productName = item.product.productName || 'Product Name';
                                    }
                                    // Try to get image from subImages if mainImage is not available
                                    else if (item.productId && item.productId.subImages && item.productId.subImages.length > 0) {
                                        const subImage = item.productId.subImages[0];
                                        imageSrc = subImage.startsWith('/') ? 
                                                   subImage : 
                                                   '/uploads/products/' + subImage;
                                        productName = item.productId.productName || 'Product Name';
                                    }
                                    else if (item.product && item.product.subImages && item.product.subImages.length > 0) {
                                        const subImage = item.product.subImages[0];
                                        imageSrc = subImage.startsWith('/') ? 
                                                   subImage : 
                                                   '/uploads/products/' + subImage;
                                        productName = item.product.productName || 'Product Name';
                                    }
                                %>
                                <img src="<%= imageSrc %>" 
                                     alt="<%= productName %>"
                                     class="item-image" 
                                     onerror="this.onerror=null; this.src='/images/placeholder.svg';"
                                     loading="lazy">
                                <div class="item-details">
                                    <h6><%= item.productId.productName %></h6>
                                    <p>Size: <%= item.size %> | Qty: <%= item.quantity %></p>
                                </div>
                                <div class="item-price">₹<%= Math.round(item.totalPrice) %></div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="order-item">
                            <img src="/images/placeholder.svg" alt="Product" class="item-image">
                            <div class="item-details">
                                <h6>No items in cart</h6>
                                <p>Please add items to continue</p>
                            </div>
                            <div class="item-price">₹0</div>
                        </div>
                    <% } %>

                    <!-- Price Breakdown -->
                    <div class="price-breakdown">
                        <div class="summary-row">
                            <span class="price-label">Subtotal (<%= totalItemCount || 0 %> items)</span>
                            <span class="price-value">₹<%= subtotal || 0 %></span>
                        </div>
                        <% if (totalDiscount && totalDiscount > 0) { %>
                            <div class="summary-row discount-row">
                                <span class="price-label">
                                    <i class="bi bi-tag me-1"></i>Discount
                                </span>
                                <span class="price-value text-success">-₹<%= totalDiscount %></span>
                            </div>
                        <% } %>
                        <div class="summary-row">
                            <span class="price-label">
                                <i class="bi bi-truck me-1"></i>Shipping
                            </span>
                            <span class="price-value">
                                <% if (shipping && shipping > 0) { %>
                                    ₹<%= shipping %>
                                <% } else { %>
                                    <span class="text-success fw-bold">FREE</span>
                                <% } %>
                            </span>
                        </div>

                        <div class="price-divider"></div>

                        <div class="summary-row total">
                            <span class="price-label">Total</span>
                            <span class="price-value">₹<%= total || 0 %></span>
                        </div>
                    </div>

                    <!-- Place Order Button -->
                    <button class="btn-continue" onclick="proceedToPayment()">
                        <i class="bi bi-check-circle"></i> PLACE ORDER
                    </button>

                    <!-- Back to Cart -->
                    <div class="text-center mt-3">
                        <a href="/cart" class="text-muted text-decoration-none">
                            <i class="bi bi-arrow-left"></i> Back to Cart
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Address Modal -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">
          <i class="bi bi-plus me-2"></i> Add New Address
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%- include('partials/addresses') %>
      </div>
    </div>
  </div>
</div>

<!-- Geoapify Autocomplete Script -->
<script src="https://api.geoapify.com/v1/api.js?apiKey=<%= geoapifyApiKey %>"></script>

<!-- SweetAlert2 JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
// ========= ADDRESS MODAL FUNCTIONALITY =========
let currentEditingId = null;

// ========= CHECKOUT VALIDATION FUNCTIONALITY =========
console.log('Checkout page loaded - initializing validation functionality');

// Validate checkout stock before operations
async function validateCheckoutStock() {
  try {
    console.log('Validating checkout stock...');
    const response = await fetch('/cart/validate-checkout-stock', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    console.log('Checkout validation response status:', response.status);
    
    const result = await response.json();
    console.log('Checkout validation response:', result);
    
    return result;
  } catch (error) {
    console.error('Error validating checkout stock:', error);
    return { success: false, allValid: false, errorMessage: 'Failed to validate cart items. Please try again.' };
  }
}

// Show checkout validation error with SweetAlert
function showCheckoutValidationError(validation) {
  console.log('Showing checkout validation error:', validation);
  
  const errorMessage = validation.errorMessage || validation.message || 'Some items in your cart are no longer available';
  
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      icon: 'error',
      title: 'Cannot Place Order',
      html: errorMessage.replace(/\n/g, '<br>'),
      confirmButtonColor: '#dc3545',
      confirmButtonText: 'Return to Cart',
      allowOutsideClick: false,
      allowEscapeKey: false,
      width: '600px'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = '/cart';
      }
    });
  } else {
    alert(errorMessage);
    window.location.href = '/cart';
  }
}

// Validate checkout on page load/refresh
async function validateCheckoutOnLoad() {
  console.log('Validating checkout on page load...');

  try {
    const validation = await validateCheckoutStock();
    
    // Check if validation failed - for checkout validation, we check if there are any invalid items
    if (!validation.success || (validation.validationResults && 
        (validation.validationResults.invalidItems.length > 0 || 
         validation.validationResults.outOfStockItems.length > 0 || 
         validation.validationResults.unavailableItems.length > 0))) {
      // Show validation error after a short delay to ensure page is fully loaded
      setTimeout(() => {
        showCheckoutValidationError(validation);
      }, 1000);
    } else {
      console.log('Checkout validation passed - all items are available');
    }
  } catch (error) {
    console.error('Error validating checkout on load:', error);
  }
}

// Test function for debugging validation
window.testCheckoutValidation = async function() {
  console.log('=== TESTING CHECKOUT VALIDATION ===');
  try {
    const validation = await validateCheckoutStock();
    console.log('Test checkout validation result:', validation);
    
    if (!validation.success || !validation.allValid) {
      console.log('Checkout validation failed - should show error');
      showCheckoutValidationError(validation);
    } else {
      console.log('Checkout validation passed - no errors');
      alert('Checkout validation passed - no stock issues found');
    }
    
    return validation;
  } catch (error) {
    console.error('Test checkout validation error:', error);
  }
};

function selectAddress(radio) {
    // Remove selected class from all address cards
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected');
    });
    // Add selected class to the parent of the clicked radio
    radio.closest('.address-card').classList.add('selected');
}

function selectPayment(radio) {
    // Remove selected class from all payment options
    document.querySelectorAll('.payment-option').forEach(option => {
        option.classList.remove('selected');
    });
    // Add selected class to the parent of the clicked radio
    radio.closest('.payment-option').classList.add('selected');
    
    // Update button text based on payment method
    const continueButtons = document.querySelectorAll('.btn-continue');
    continueButtons.forEach(button => {
        if (radio.value === 'cod') {
            button.innerHTML = '<i class="bi bi-check-circle"></i> PLACE ORDER';
        } else {
            button.innerHTML = '<i class="bi bi-arrow-right"></i> CONTINUE TO PAYMENT';
        }
    });
}

function showAddAddressModal() {
    currentEditingId = null;
    document.getElementById('addressModalLabel').innerHTML = '<i class="bi bi-plus me-2"></i> Add New Address';
    
    // Reset form
    const form = document.getElementById('addressForm');
    if (form) {
        form.reset();
        // Clear any validation states
        form.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
            el.classList.remove('is-invalid', 'is-valid');
        });
        form.querySelectorAll('.error-message').forEach(el => {
            el.style.display = 'none';
        });
    }
    
    const modal = new bootstrap.Modal(document.getElementById('addressModal'));
    modal.show();
}

// Enhanced editAddress function for checkout page with API integration
async function editAddress(addressId) {
    currentEditingId = addressId;
    document.getElementById('addressModalLabel').innerHTML = '<i class="bi bi-pencil me-2"></i> Edit Address';
    
    try {
        // Fetch complete address data from API
        const response = await fetch(`/api/address/${addressId}`);
        const result = await response.json();
        
        if (!result.success || !result.address) {
            console.error('Failed to fetch address data:', result.message);
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load address data. Please try again.',
                    confirmButtonColor: '#000'
                });
            }
            return;
        }
        
        const address = result.address;
        
        // Use the populateAddressForm function if available
        if (typeof window.populateAddressForm === 'function') {
            window.populateAddressForm(address);
        } else {
            // Fallback to manual population
            const form = document.getElementById('addressForm');
            if (form) {
                form.querySelector('#fullName').value = address.name || '';
                form.querySelector('#mobileNumber').value = address.phone || '';
                form.querySelector('#altPhone').value = address.altPhone || '';
                form.querySelector('#addressDetails').value = address.landMark || '';
                form.querySelector('#city').value = address.city || '';
                form.querySelector('#pincode').value = address.pincode || '';
                
                // Set address type
                const addressTypeRadio = form.querySelector(`input[name="addressType"][value="${address.addressType}"]`);
                if (addressTypeRadio) {
                    addressTypeRadio.checked = true;
                }
                
                // Set state and district properly
                const stateSelect = form.querySelector('#state');
                const districtSelect = form.querySelector('#district');
                
                if (stateSelect && address.state) {
                    // Wait a bit for state data to be loaded
                    setTimeout(() => {
                        // Set state value
                        stateSelect.value = address.state;
                        
                        // Trigger change event to load districts
                        stateSelect.dispatchEvent(new Event('change'));
                        
                        // Set district after districts are loaded
                        setTimeout(() => {
                            if (districtSelect && address.district) {
                                districtSelect.value = address.district;
                            }
                        }, 300);
                    }, 200);
                }
            }
        }
        
        const modal = new bootstrap.Modal(document.getElementById('addressModal'));
        modal.show();
        
    } catch (error) {
        console.error('Error fetching address data:', error);
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load address data. Please try again.',
                confirmButtonColor: '#000'
            });
        }
    }
}

async function deleteAddress(addressId) {
    // Use SweetAlert for confirmation
    if (typeof Swal !== 'undefined') {
        const result = await Swal.fire({
            title: 'Delete Address?',
            text: 'Are you sure you want to delete this address? This action cannot be undone.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="bi bi-trash me-1"></i> Yes, Delete',
            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',
            reverseButtons: true
        });

        if (!result.isConfirmed) {
            return;
        }
    } else {
        // Fallback to browser confirm if SweetAlert is not available
        if (!confirm('Are you sure you want to delete this address?')) {
            return;
        }
    }

    try {
        const response = await fetch(`/api/address/${addressId}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            // Show success message
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    confirmButtonColor: '#000000'
                });
            } else {
                alert(data.message);
            }
            
            // Reload the page to refresh the address list
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            // Show error message
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'Error!',
                    text: data.message,
                    icon: 'error',
                    confirmButtonColor: '#000000'
                });
            } else {
                alert(data.message);
            }
        }
    } catch (error) {
        console.error('Error deleting address:', error);
        // Show error message
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: 'Error!',
                text: 'Failed to delete address',
                icon: 'error',
                confirmButtonColor: '#000000'
            });
        } else {
            alert('Failed to delete address');
        }
    }
}

function proceedToPayment() {
    // Get selected address and payment method
    const selectedAddress = document.querySelector('input[name="deliveryAddress"]:checked');
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    
    if (!selectedAddress || !selectedPayment) {
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'warning',
                title: 'Missing Information',
                text: 'Please select both delivery address and payment method',
                confirmButtonColor: '#dc3545'
            });
        } else {
            alert('Please select both delivery address and payment method');
        }
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="bi bi-hourglass-split"></i> Validating...';
    button.disabled = true;
    
    // First validate stock before placing order
    validateCheckoutStock()
    .then(validation => {
        console.log('Validation result in proceedToPayment:', validation);
        
        // Check if validation failed - only fail if there are NO checkout eligible items
        if (!validation.success) {
            // Restore button state
            button.innerHTML = originalText;
            button.disabled = false;
            
            // Show validation error
            showCheckoutValidationError(validation);
            return;
        }
        
        // Check if there are any items eligible for checkout
        if (validation.checkoutEligibleItems === 0 || 
            (validation.validationResults && validation.validationResults.validItems.length === 0)) {
            // Restore button state
            button.innerHTML = originalText;
            button.disabled = false;
            
            // Create a proper error message for no checkout items
            const errorMessage = validation.validationResults && 
                (validation.validationResults.outOfStockItems.length > 0 || 
                 validation.validationResults.unavailableItems.length > 0) ?
                'All items in your cart are now out of stock or unavailable. Please return to your cart to add available items.' :
                'No items available for checkout. Please add items to your cart.';
            
            showCheckoutValidationError({
                success: false,
                errorMessage: errorMessage,
                validationResults: validation.validationResults
            });
            return;
        }
        
        // If validation passes, proceed with order placement
        button.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
        
        // Prepare order data
        const orderData = {
            deliveryAddressId: selectedAddress.value,
            paymentMethod: selectedPayment.value
        };
        
        // Send order placement request
        console.log('Sending order placement request with data:', orderData);
        return fetch('/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(orderData)
        });
    })
    .then(response => {
        if (!response) return; // Validation failed, already handled
        
        console.log('Order placement response status:', response.status);
        console.log('Order placement response ok:', response.ok);
        
        // Always try to parse JSON response, even for error status codes
        return response.json().then(data => {
            return { data, status: response.status, ok: response.ok };
        });
    })
    .then(result => {
        if (!result) return; // Validation failed, already handled
        
        const { data, status, ok } = result;
        console.log('Order placement response data:', data);
        
        if (ok && data.success) {
            // Redirect to order success page
            window.location.href = data.redirectUrl;
        } else {
            // Handle error responses (including 400 status codes)
            if (data.code === 'STOCK_VALIDATION_FAILED') {
                console.log('Stock validation failed, showing error dialog');
                showCheckoutValidationError({
                    success: false,
                    allValid: false,
                    errorMessage: data.message,
                    invalidItems: data.invalidItems || []
                });
            } else {
                // Show generic error message
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Failed',
                        text: data.message || 'Failed to place order. Please try again.',
                        confirmButtonColor: '#dc3545'
                    });
                } else {
                    alert(data.message || 'Failed to place order. Please try again.');
                }
            }
            
            // Restore button state
            button.innerHTML = originalText;
            button.disabled = false;
        }
    })
    .catch(error => {
        console.error('Error placing order:', error);
        
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while placing your order. Please try again.',
                confirmButtonColor: '#dc3545'
            });
        } else {
            alert('An error occurred while placing your order. Please try again.');
        }
        
        // Restore button state
        button.innerHTML = originalText;
        button.disabled = false;
    });
}

function placeOrder() {
    // This function is kept for compatibility but now calls proceedToPayment
    proceedToPayment();
}

// Initialize address modal functionality when modal is shown
document.addEventListener('DOMContentLoaded', function() {
    console.log('Checkout page DOM loaded - setting up validation and address modal');
    
    // Show content immediately to prevent flash
    const checkoutContent = document.querySelector('.checkout-content');
    if (checkoutContent) {
        checkoutContent.classList.remove('hidden');
    }
    
    // Initialize address modal functionality
    const addressModal = document.getElementById('addressModal');
    if (addressModal) {
        addressModal.addEventListener('shown.bs.modal', function() {
            // Initialize state/district data loading and Geoapify
            setTimeout(() => {
                if (typeof loadStateDistrictData === 'function') {
                    loadStateDistrictData();
                }
                
                // Initialize Geoapify for checkout modal
                const API_KEY = '<%= geoapifyApiKey %>';
                if (typeof GeoapifyAddressForm !== 'undefined') {
                    new GeoapifyAddressForm(API_KEY);
                }
            }, 100);
        });
    }
    
    // Validate checkout on page load after a short delay
    setTimeout(() => {
        validateCheckoutOnLoad();
    }, 500);
    
    console.log('Checkout validation and address modal initialization complete');
});

// Handle successful address addition/update - refresh the page to show new address
function handleAddressSuccess(message) {
    if (typeof Swal !== 'undefined') {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            confirmButtonColor: '#000'
        }).then(() => {
            // Refresh the page to show the updated addresses
            window.location.reload();
        });
    } else {
        alert(message);
        window.location.reload();
    }
}
</script>