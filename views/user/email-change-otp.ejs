<div class="container py-5">
  <!-- Breadcrumb -->
  <nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/" class="text-decoration-none">Home</a></li>
      <li class="breadcrumb-item"><a href="/profile" class="text-decoration-none">My Profile</a></li>
      <li class="breadcrumb-item"><a href="/profile/edit" class="text-decoration-none">Edit Profile</a></li>
      <li class="breadcrumb-item active" aria-current="page">Verify Email</li>
    </ol>
  </nav>

  <!-- OTP Verification Form -->
  <div class="row justify-content-center">
    <div class="col-lg-6 col-md-8">
      <div class="auth-card p-4 text-center">
        <div class="mb-4">
          <div class="text-primary mb-3">
            <i class="bi bi-shield-check" style="font-size: 3rem;"></i>
          </div>
          <h2 class="fw-bold mb-2">Verify Your Email</h2>
          <p class="text-secondary-custom mb-0">
            We've sent a verification code to<br>
            <strong><%= email %></strong>
          </p>
        </div>

        <form id="otpForm">
          <div class="mb-4">
            <label for="otp" class="form-label fw-semibold">Enter OTP Code</label>
            <input type="text" 
                   class="form-control form-control-lg text-center" 
                   id="otp" 
                   name="otp" 
                   maxlength="6"
                   placeholder="000000"
                   required
                   style="letter-spacing: 0.5rem; font-size: 1.5rem;">
            <div class="invalid-feedback" id="otp-error"></div>
          </div>

          <div class="d-grid gap-2 mb-4">
            <button type="submit" class="btn btn-primary-custom btn-lg" id="verifyBtn">
              <span class="btn-text">
                <i class="bi bi-check-circle me-2"></i>
                Verify OTP
              </span>
              <span class="btn-loader d-none">
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                Verifying...
              </span>
            </button>
          </div>

          <div class="text-center">
            <p class="text-secondary-custom mb-2">Didn't receive the code?</p>
            <button type="button" class="btn btn-link p-0" id="resendBtn" onclick="resendOtp()">
              <span class="resend-text">Resend OTP</span>
              <span class="resend-loader d-none">
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                Sending...
              </span>
            </button>
          </div>
        </form>

        <!-- Timer Display -->
        <div class="mt-3">
          <small class="text-muted">
            Code expires in: <span id="timer" class="fw-bold text-danger">00:45</span>
          </small>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- New Email Modal -->
<div class="modal fade" id="newEmailModal" tabindex="-1" aria-labelledby="newEmailModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title fw-bold" id="newEmailModalLabel">
          <i class="bi bi-envelope-at me-2"></i>
          Enter New Email
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p class="text-secondary-custom mb-3">Please enter your new email address.</p>
        <div class="mb-3">
          <label for="newEmail" class="form-label fw-semibold">New Email Address</label>
          <input type="email" 
                 class="form-control" 
                 id="newEmail"
                 placeholder="Enter your new email address"
                 required>
          <div class="invalid-feedback" id="newEmail-error"></div>
        </div>
      </div>
      <div class="modal-footer border-0">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary-custom" onclick="changeEmail()" id="changeEmailBtn">
          <span class="change-btn-text">
            <i class="bi bi-check-lg me-2"></i>
            Update Email
          </span>
          <span class="change-btn-loader d-none">
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            Updating...
          </span>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* OTP Input styling */
#otp {
  font-family: 'Courier New', monospace;
  font-weight: bold;
}

#otp:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 0, 0, 0.25);
  border-color: #000;
}

/* Timer styling */
#timer {
  font-family: 'Courier New', monospace;
}

/* Modal enhancements */
.modal-content {
  border: none;
  border-radius: 12px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
}

/* Button link styling */
.btn-link {
  color: var(--color-accent-blue);
  text-decoration: none;
  font-weight: 500;
}

.btn-link:hover {
  color: var(--color-accent-red);
  text-decoration: underline;
}

/* Form validation styles */
.is-invalid {
  border-color: #dc3545;
}

.invalid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875rem;
  color: #dc3545;
}

.is-invalid ~ .invalid-feedback {
  display: block;
}
</style>

<script>
let timerInterval;
let timeLeft = 45; // 45 seconds

// Function to show/hide verify button loader
function toggleVerifyLoader(show) {
  const verifyBtn = document.getElementById('verifyBtn');
  const btnText = verifyBtn.querySelector('.btn-text');
  const btnLoader = verifyBtn.querySelector('.btn-loader');
  
  if (show) {
    btnText.classList.add('d-none');
    btnLoader.classList.remove('d-none');
    verifyBtn.disabled = true;
  } else {
    btnText.classList.remove('d-none');
    btnLoader.classList.add('d-none');
    verifyBtn.disabled = false;
  }
}

// Function to show/hide resend button loader
function toggleResendLoader(show) {
  const resendBtn = document.getElementById('resendBtn');
  const resendText = resendBtn.querySelector('.resend-text');
  const resendLoader = resendBtn.querySelector('.resend-loader');
  
  if (show) {
    resendText.classList.add('d-none');
    resendLoader.classList.remove('d-none');
    resendBtn.disabled = true;
  } else {
    resendText.classList.remove('d-none');
    resendLoader.classList.add('d-none');
    resendBtn.disabled = false;
  }
}

// Function to show/hide change email button loader
function toggleChangeEmailLoader(show) {
  const changeBtn = document.getElementById('changeEmailBtn');
  const btnText = changeBtn.querySelector('.change-btn-text');
  const btnLoader = changeBtn.querySelector('.change-btn-loader');
  
  if (show) {
    btnText.classList.add('d-none');
    btnLoader.classList.remove('d-none');
    changeBtn.disabled = true;
  } else {
    btnText.classList.remove('d-none');
    btnLoader.classList.add('d-none');
    changeBtn.disabled = false;
  }
}

// Start countdown timer
function startTimer() {
  timerInterval = setInterval(() => {
    timeLeft--;
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    document.getElementById('timer').textContent = 
      `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    if (timeLeft <= 0) {
      clearInterval(timerInterval);
      document.getElementById('timer').textContent = 'Expired';
      document.getElementById('timer').classList.remove('text-danger');
      document.getElementById('timer').classList.add('text-muted');
      
      // Show expiry message
      Swal.fire({
        icon: 'warning',
        title: 'OTP Expired',
        text: 'The OTP has expired. Please request a new one.',
        confirmButtonColor: '#000'
      });
    }
  }, 1000);
}

// Start timer on page load
document.addEventListener('DOMContentLoaded', function() {
  startTimer();
});

// Form validation functions
function showError(fieldId, message) {
  const field = document.getElementById(fieldId);
  const errorElement = document.getElementById(fieldId + '-error');
  
  if (field && errorElement) {
    field.classList.add('is-invalid');
    errorElement.textContent = message;
  }
}

function clearError(fieldId) {
  const field = document.getElementById(fieldId);
  const errorElement = document.getElementById(fieldId + '-error');
  
  if (field && errorElement) {
    field.classList.remove('is-invalid');
    errorElement.textContent = '';
  }
}

// OTP input formatting
document.getElementById('otp').addEventListener('input', function(e) {
  // Only allow numbers
  this.value = this.value.replace(/[^0-9]/g, '');
  clearError('otp');
});

// OTP form submission
document.getElementById('otpForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  const otp = document.getElementById('otp').value.trim();

  if (!otp) {
    showError('otp', 'Please enter the OTP code');
    return;
  }

  if (otp.length !== 6) {
    showError('otp', 'OTP must be 6 digits');
    return;
  }

  clearError('otp');

  // Show loader
  toggleVerifyLoader(true);

  try {
    const response = await fetch('/profile/verify-email-otp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ otp })
    });

    const data = await response.json();

    if (data.success) {
      // Stop timer
      clearInterval(timerInterval);
      
      // Show new email modal
      const modal = new bootstrap.Modal(document.getElementById('newEmailModal'));
      modal.show();
    } else {
      toggleVerifyLoader(false);
      showError('otp', data.message || 'Invalid OTP');
    }
  } catch (error) {
    toggleVerifyLoader(false);
    console.error('Error:', error);
    showError('otp', 'An error occurred while verifying OTP');
  }
});

// Resend OTP function
async function resendOtp() {
  // Show loader
  toggleResendLoader(true);

  try {
    // Reset timer
    clearInterval(timerInterval);
    timeLeft = 45;
    document.getElementById('timer').textContent = '00:45';
    document.getElementById('timer').classList.remove('text-muted');
    document.getElementById('timer').classList.add('text-danger');
    startTimer();

    // Here you would typically make an API call to resend OTP
    // For now, we'll just show a success message
    Swal.fire({
      icon: 'success',
      title: 'OTP Sent!',
      text: 'A new OTP has been sent to your email.',
      confirmButtonColor: '#000',
      timer: 2000,
      showConfirmButton: false
    });

  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to resend OTP. Please try again.',
      confirmButtonColor: '#000'
    });
  } finally {
    toggleResendLoader(false);
  }
}

// Change email function
async function changeEmail() {
  const newEmail = document.getElementById('newEmail').value.trim();

  if (!newEmail) {
    showError('newEmail', 'Please enter your new email address');
    return;
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(newEmail)) {
    showError('newEmail', 'Please enter a valid email address');
    return;
  }

  clearError('newEmail');

  // Show loader
  toggleChangeEmailLoader(true);

  try {
    const response = await fetch('/profile/change-email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ newEmail })
    });

    const data = await response.json();

    if (data.success) {
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('newEmailModal'));
      modal.hide();

      // Show success message and redirect
      Swal.fire({
        icon: 'success',
        title: 'Email Updated!',
        text: 'Your email address has been successfully updated.',
        confirmButtonColor: '#000'
      }).then(() => {
        window.location.href = '/profile';
      });
    } else {
      toggleChangeEmailLoader(false);
      showError('newEmail', data.message || 'Failed to update email');
    }
  } catch (error) {
    toggleChangeEmailLoader(false);
    console.error('Error:', error);
    showError('newEmail', 'An error occurred while updating email');
  }
}

// Clean up timer on page unload
window.addEventListener('beforeunload', function() {
  if (timerInterval) {
    clearInterval(timerInterval);
  }
});
</script>